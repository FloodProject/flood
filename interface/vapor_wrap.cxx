/* ----------------------------------------------------------------------------
 * This file was automatically generated by SWIG (http://www.swig.org).
 * Version 2.0.1
 * 
 * This file is not intended to be easily readable and contains a number of 
 * coding conventions designed to improve portability and efficiency. Do not make
 * changes to this file unless you know what you are doing--modify the SWIG 
 * interface file instead. 
 * ----------------------------------------------------------------------------- */

#include "Engine/API.h"
#include "Headers.h"
using namespace vapor;


#define SWIGLUA


#ifdef __cplusplus
/* SwigValueWrapper is described in swig.swg */
template<typename T> class SwigValueWrapper {
  struct SwigMovePointer {
    T *ptr;
    SwigMovePointer(T *p) : ptr(p) { }
    ~SwigMovePointer() { delete ptr; }
    SwigMovePointer& operator=(SwigMovePointer& rhs) { T* oldptr = ptr; ptr = 0; delete oldptr; ptr = rhs.ptr; rhs.ptr = 0; return *this; }
  } pointer;
  SwigValueWrapper& operator=(const SwigValueWrapper<T>& rhs);
  SwigValueWrapper(const SwigValueWrapper<T>& rhs);
public:
  SwigValueWrapper() : pointer(0) { }
  SwigValueWrapper& operator=(const T& t) { SwigMovePointer tmp(new T(t)); pointer = tmp; return *this; }
  operator T&() const { return *pointer.ptr; }
  T *operator&() { return pointer.ptr; }
};

template <typename T> T SwigValueInit() {
  return T();
}
#endif

/* -----------------------------------------------------------------------------
 *  This section contains generic SWIG labels for method/variable
 *  declarations/attributes, and other compiler dependent labels.
 * ----------------------------------------------------------------------------- */

/* template workaround for compilers that cannot correctly implement the C++ standard */
#ifndef SWIGTEMPLATEDISAMBIGUATOR
# if defined(__SUNPRO_CC) && (__SUNPRO_CC <= 0x560)
#  define SWIGTEMPLATEDISAMBIGUATOR template
# elif defined(__HP_aCC)
/* Needed even with `aCC -AA' when `aCC -V' reports HP ANSI C++ B3910B A.03.55 */
/* If we find a maximum version that requires this, the test would be __HP_aCC <= 35500 for A.03.55 */
#  define SWIGTEMPLATEDISAMBIGUATOR template
# else
#  define SWIGTEMPLATEDISAMBIGUATOR
# endif
#endif

/* inline attribute */
#ifndef SWIGINLINE
# if defined(__cplusplus) || (defined(__GNUC__) && !defined(__STRICT_ANSI__))
#   define SWIGINLINE inline
# else
#   define SWIGINLINE
# endif
#endif

/* attribute recognised by some compilers to avoid 'unused' warnings */
#ifndef SWIGUNUSED
# if defined(__GNUC__)
#   if !(defined(__cplusplus)) || (__GNUC__ > 3 || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4))
#     define SWIGUNUSED __attribute__ ((__unused__)) 
#   else
#     define SWIGUNUSED
#   endif
# elif defined(__ICC)
#   define SWIGUNUSED __attribute__ ((__unused__)) 
# else
#   define SWIGUNUSED 
# endif
#endif

#ifndef SWIG_MSC_UNSUPPRESS_4505
# if defined(_MSC_VER)
#   pragma warning(disable : 4505) /* unreferenced local function has been removed */
# endif 
#endif

#ifndef SWIGUNUSEDPARM
# ifdef __cplusplus
#   define SWIGUNUSEDPARM(p)
# else
#   define SWIGUNUSEDPARM(p) p SWIGUNUSED 
# endif
#endif

/* internal SWIG method */
#ifndef SWIGINTERN
# define SWIGINTERN static SWIGUNUSED
#endif

/* internal inline SWIG method */
#ifndef SWIGINTERNINLINE
# define SWIGINTERNINLINE SWIGINTERN SWIGINLINE
#endif

/* exporting methods */
#if (__GNUC__ >= 4) || (__GNUC__ == 3 && __GNUC_MINOR__ >= 4)
#  ifndef GCC_HASCLASSVISIBILITY
#    define GCC_HASCLASSVISIBILITY
#  endif
#endif

#ifndef SWIGEXPORT
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   if defined(STATIC_LINKED)
#     define SWIGEXPORT
#   else
#     define SWIGEXPORT __declspec(dllexport)
#   endif
# else
#   if defined(__GNUC__) && defined(GCC_HASCLASSVISIBILITY)
#     define SWIGEXPORT __attribute__ ((visibility("default")))
#   else
#     define SWIGEXPORT
#   endif
# endif
#endif

/* calling conventions for Windows */
#ifndef SWIGSTDCALL
# if defined(_WIN32) || defined(__WIN32__) || defined(__CYGWIN__)
#   define SWIGSTDCALL __stdcall
# else
#   define SWIGSTDCALL
# endif 
#endif

/* Deal with Microsoft's attempt at deprecating C standard runtime functions */
#if !defined(SWIG_NO_CRT_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_CRT_SECURE_NO_DEPRECATE)
# define _CRT_SECURE_NO_DEPRECATE
#endif

/* Deal with Microsoft's attempt at deprecating methods in the standard C++ library */
#if !defined(SWIG_NO_SCL_SECURE_NO_DEPRECATE) && defined(_MSC_VER) && !defined(_SCL_SECURE_NO_DEPRECATE)
# define _SCL_SECURE_NO_DEPRECATE
#endif


/* -----------------------------------------------------------------------------
 * swigrun.swg
 *
 * This file contains generic C API SWIG runtime support for pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

/* This should only be incremented when either the layout of swig_type_info changes,
   or for whatever reason, the runtime changes incompatibly */
#define SWIG_RUNTIME_VERSION "4"

/* define SWIG_TYPE_TABLE_NAME as "SWIG_TYPE_TABLE" */
#ifdef SWIG_TYPE_TABLE
# define SWIG_QUOTE_STRING(x) #x
# define SWIG_EXPAND_AND_QUOTE_STRING(x) SWIG_QUOTE_STRING(x)
# define SWIG_TYPE_TABLE_NAME SWIG_EXPAND_AND_QUOTE_STRING(SWIG_TYPE_TABLE)
#else
# define SWIG_TYPE_TABLE_NAME
#endif

/*
  You can use the SWIGRUNTIME and SWIGRUNTIMEINLINE macros for
  creating a static or dynamic library from the SWIG runtime code.
  In 99.9% of the cases, SWIG just needs to declare them as 'static'.
  
  But only do this if strictly necessary, ie, if you have problems
  with your compiler or suchlike.
*/

#ifndef SWIGRUNTIME
# define SWIGRUNTIME SWIGINTERN
#endif

#ifndef SWIGRUNTIMEINLINE
# define SWIGRUNTIMEINLINE SWIGRUNTIME SWIGINLINE
#endif

/*  Generic buffer size */
#ifndef SWIG_BUFFER_SIZE
# define SWIG_BUFFER_SIZE 1024
#endif

/* Flags for pointer conversions */
#define SWIG_POINTER_DISOWN        0x1
#define SWIG_CAST_NEW_MEMORY       0x2

/* Flags for new pointer objects */
#define SWIG_POINTER_OWN           0x1


/* 
   Flags/methods for returning states.
   
   The SWIG conversion methods, as ConvertPtr, return an integer 
   that tells if the conversion was successful or not. And if not,
   an error code can be returned (see swigerrors.swg for the codes).
   
   Use the following macros/flags to set or process the returning
   states.
   
   In old versions of SWIG, code such as the following was usually written:

     if (SWIG_ConvertPtr(obj,vptr,ty.flags) != -1) {
       // success code
     } else {
       //fail code
     }

   Now you can be more explicit:

    int res = SWIG_ConvertPtr(obj,vptr,ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
    } else {
      // fail code
    }

   which is the same really, but now you can also do

    Type *ptr;
    int res = SWIG_ConvertPtr(obj,(void **)(&ptr),ty.flags);
    if (SWIG_IsOK(res)) {
      // success code
      if (SWIG_IsNewObj(res) {
        ...
	delete *ptr;
      } else {
        ...
      }
    } else {
      // fail code
    }
    
   I.e., now SWIG_ConvertPtr can return new objects and you can
   identify the case and take care of the deallocation. Of course that
   also requires SWIG_ConvertPtr to return new result values, such as

      int SWIG_ConvertPtr(obj, ptr,...) {         
        if (<obj is ok>) {			       
          if (<need new object>) {		       
            *ptr = <ptr to new allocated object>; 
            return SWIG_NEWOBJ;		       
          } else {				       
            *ptr = <ptr to old object>;	       
            return SWIG_OLDOBJ;		       
          } 				       
        } else {				       
          return SWIG_BADOBJ;		       
        }					       
      }

   Of course, returning the plain '0(success)/-1(fail)' still works, but you can be
   more explicit by returning SWIG_BADOBJ, SWIG_ERROR or any of the
   SWIG errors code.

   Finally, if the SWIG_CASTRANK_MODE is enabled, the result code
   allows to return the 'cast rank', for example, if you have this

       int food(double)
       int fooi(int);

   and you call
 
      food(1)   // cast rank '1'  (1 -> 1.0)
      fooi(1)   // cast rank '0'

   just use the SWIG_AddCast()/SWIG_CheckState()
*/

#define SWIG_OK                    (0) 
#define SWIG_ERROR                 (-1)
#define SWIG_IsOK(r)               (r >= 0)
#define SWIG_ArgError(r)           ((r != SWIG_ERROR) ? r : SWIG_TypeError)  

/* The CastRankLimit says how many bits are used for the cast rank */
#define SWIG_CASTRANKLIMIT         (1 << 8)
/* The NewMask denotes the object was created (using new/malloc) */
#define SWIG_NEWOBJMASK            (SWIG_CASTRANKLIMIT  << 1)
/* The TmpMask is for in/out typemaps that use temporal objects */
#define SWIG_TMPOBJMASK            (SWIG_NEWOBJMASK << 1)
/* Simple returning values */
#define SWIG_BADOBJ                (SWIG_ERROR)
#define SWIG_OLDOBJ                (SWIG_OK)
#define SWIG_NEWOBJ                (SWIG_OK | SWIG_NEWOBJMASK)
#define SWIG_TMPOBJ                (SWIG_OK | SWIG_TMPOBJMASK)
/* Check, add and del mask methods */
#define SWIG_AddNewMask(r)         (SWIG_IsOK(r) ? (r | SWIG_NEWOBJMASK) : r)
#define SWIG_DelNewMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_NEWOBJMASK) : r)
#define SWIG_IsNewObj(r)           (SWIG_IsOK(r) && (r & SWIG_NEWOBJMASK))
#define SWIG_AddTmpMask(r)         (SWIG_IsOK(r) ? (r | SWIG_TMPOBJMASK) : r)
#define SWIG_DelTmpMask(r)         (SWIG_IsOK(r) ? (r & ~SWIG_TMPOBJMASK) : r)
#define SWIG_IsTmpObj(r)           (SWIG_IsOK(r) && (r & SWIG_TMPOBJMASK))

/* Cast-Rank Mode */
#if defined(SWIG_CASTRANK_MODE)
#  ifndef SWIG_TypeRank
#    define SWIG_TypeRank             unsigned long
#  endif
#  ifndef SWIG_MAXCASTRANK            /* Default cast allowed */
#    define SWIG_MAXCASTRANK          (2)
#  endif
#  define SWIG_CASTRANKMASK          ((SWIG_CASTRANKLIMIT) -1)
#  define SWIG_CastRank(r)           (r & SWIG_CASTRANKMASK)
SWIGINTERNINLINE int SWIG_AddCast(int r) { 
  return SWIG_IsOK(r) ? ((SWIG_CastRank(r) < SWIG_MAXCASTRANK) ? (r + 1) : SWIG_ERROR) : r;
}
SWIGINTERNINLINE int SWIG_CheckState(int r) { 
  return SWIG_IsOK(r) ? SWIG_CastRank(r) + 1 : 0; 
}
#else /* no cast-rank mode */
#  define SWIG_AddCast
#  define SWIG_CheckState(r) (SWIG_IsOK(r) ? 1 : 0)
#endif


#include <string.h>

#ifdef __cplusplus
extern "C" {
#endif

typedef void *(*swig_converter_func)(void *, int *);
typedef struct swig_type_info *(*swig_dycast_func)(void **);

/* Structure to store information on one type */
typedef struct swig_type_info {
  const char             *name;			/* mangled name of this type */
  const char             *str;			/* human readable name of this type */
  swig_dycast_func        dcast;		/* dynamic cast function down a hierarchy */
  struct swig_cast_info  *cast;			/* linked list of types that can cast into this type */
  void                   *clientdata;		/* language specific type data */
  int                    owndata;		/* flag if the structure owns the clientdata */
} swig_type_info;

/* Structure to store a type and conversion function used for casting */
typedef struct swig_cast_info {
  swig_type_info         *type;			/* pointer to type that is equivalent to this type */
  swig_converter_func     converter;		/* function to cast the void pointers */
  struct swig_cast_info  *next;			/* pointer to next cast in linked list */
  struct swig_cast_info  *prev;			/* pointer to the previous cast */
} swig_cast_info;

/* Structure used to store module information
 * Each module generates one structure like this, and the runtime collects
 * all of these structures and stores them in a circularly linked list.*/
typedef struct swig_module_info {
  swig_type_info         **types;		/* Array of pointers to swig_type_info structures that are in this module */
  size_t                 size;		        /* Number of types in this module */
  struct swig_module_info *next;		/* Pointer to next element in circularly linked list */
  swig_type_info         **type_initial;	/* Array of initially generated type structures */
  swig_cast_info         **cast_initial;	/* Array of initially generated casting structures */
  void                    *clientdata;		/* Language specific module data */
} swig_module_info;

/* 
  Compare two type names skipping the space characters, therefore
  "char*" == "char *" and "Class<int>" == "Class<int >", etc.

  Return 0 when the two name types are equivalent, as in
  strncmp, but skipping ' '.
*/
SWIGRUNTIME int
SWIG_TypeNameComp(const char *f1, const char *l1,
		  const char *f2, const char *l2) {
  for (;(f1 != l1) && (f2 != l2); ++f1, ++f2) {
    while ((*f1 == ' ') && (f1 != l1)) ++f1;
    while ((*f2 == ' ') && (f2 != l2)) ++f2;
    if (*f1 != *f2) return (*f1 > *f2) ? 1 : -1;
  }
  return (int)((l1 - f1) - (l2 - f2));
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if not equal, 1 if equal
*/
SWIGRUNTIME int
SWIG_TypeEquiv(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}

/*
  Check type equivalence in a name list like <name1>|<name2>|...
  Return 0 if equal, -1 if nb < tb, 1 if nb > tb
*/
SWIGRUNTIME int
SWIG_TypeCompare(const char *nb, const char *tb) {
  int equiv = 0;
  const char* te = tb + strlen(tb);
  const char* ne = nb;
  while (!equiv && *ne) {
    for (nb = ne; *ne; ++ne) {
      if (*ne == '|') break;
    }
    equiv = (SWIG_TypeNameComp(nb, ne, tb, te) == 0) ? 1 : 0;
    if (*ne) ++ne;
  }
  return equiv;
}


/*
  Check the typename
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheck(const char *c, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (strcmp(iter->type->name, c) == 0) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/* 
  Identical to SWIG_TypeCheck, except strcmp is replaced with a pointer comparison
*/
SWIGRUNTIME swig_cast_info *
SWIG_TypeCheckStruct(swig_type_info *from, swig_type_info *ty) {
  if (ty) {
    swig_cast_info *iter = ty->cast;
    while (iter) {
      if (iter->type == from) {
        if (iter == ty->cast)
          return iter;
        /* Move iter to the top of the linked list */
        iter->prev->next = iter->next;
        if (iter->next)
          iter->next->prev = iter->prev;
        iter->next = ty->cast;
        iter->prev = 0;
        if (ty->cast) ty->cast->prev = iter;
        ty->cast = iter;
        return iter;
      }
      iter = iter->next;
    }
  }
  return 0;
}

/*
  Cast a pointer up an inheritance hierarchy
*/
SWIGRUNTIMEINLINE void *
SWIG_TypeCast(swig_cast_info *ty, void *ptr, int *newmemory) {
  return ((!ty) || (!ty->converter)) ? ptr : (*ty->converter)(ptr, newmemory);
}

/* 
   Dynamic pointer casting. Down an inheritance hierarchy
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeDynamicCast(swig_type_info *ty, void **ptr) {
  swig_type_info *lastty = ty;
  if (!ty || !ty->dcast) return ty;
  while (ty && (ty->dcast)) {
    ty = (*ty->dcast)(ptr);
    if (ty) lastty = ty;
  }
  return lastty;
}

/*
  Return the name associated with this type
*/
SWIGRUNTIMEINLINE const char *
SWIG_TypeName(const swig_type_info *ty) {
  return ty->name;
}

/*
  Return the pretty name associated with this type,
  that is an unmangled type name in a form presentable to the user.
*/
SWIGRUNTIME const char *
SWIG_TypePrettyName(const swig_type_info *type) {
  /* The "str" field contains the equivalent pretty names of the
     type, separated by vertical-bar characters.  We choose
     to print the last name, as it is often (?) the most
     specific. */
  if (!type) return NULL;
  if (type->str != NULL) {
    const char *last_name = type->str;
    const char *s;
    for (s = type->str; *s; s++)
      if (*s == '|') last_name = s+1;
    return last_name;
  }
  else
    return type->name;
}

/* 
   Set the clientdata field for a type
*/
SWIGRUNTIME void
SWIG_TypeClientData(swig_type_info *ti, void *clientdata) {
  swig_cast_info *cast = ti->cast;
  /* if (ti->clientdata == clientdata) return; */
  ti->clientdata = clientdata;
  
  while (cast) {
    if (!cast->converter) {
      swig_type_info *tc = cast->type;
      if (!tc->clientdata) {
	SWIG_TypeClientData(tc, clientdata);
      }
    }    
    cast = cast->next;
  }
}
SWIGRUNTIME void
SWIG_TypeNewClientData(swig_type_info *ti, void *clientdata) {
  SWIG_TypeClientData(ti, clientdata);
  ti->owndata = 1;
}
  
/*
  Search for a swig_type_info structure only by mangled name
  Search is a O(log #types)
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_MangledTypeQueryModule(swig_module_info *start, 
                            swig_module_info *end, 
		            const char *name) {
  swig_module_info *iter = start;
  do {
    if (iter->size) {
      register size_t l = 0;
      register size_t r = iter->size - 1;
      do {
	/* since l+r >= 0, we can (>> 1) instead (/ 2) */
	register size_t i = (l + r) >> 1; 
	const char *iname = iter->types[i]->name;
	if (iname) {
	  register int compare = strcmp(name, iname);
	  if (compare == 0) {	    
	    return iter->types[i];
	  } else if (compare < 0) {
	    if (i) {
	      r = i - 1;
	    } else {
	      break;
	    }
	  } else if (compare > 0) {
	    l = i + 1;
	  }
	} else {
	  break; /* should never happen */
	}
      } while (l <= r);
    }
    iter = iter->next;
  } while (iter != end);
  return 0;
}

/*
  Search for a swig_type_info structure for either a mangled name or a human readable name.
  It first searches the mangled names of the types, which is a O(log #types)
  If a type is not found it then searches the human readable names, which is O(#types).
  
  We start searching at module start, and finish searching when start == end.  
  Note: if start == end at the beginning of the function, we go all the way around
  the circular list.
*/
SWIGRUNTIME swig_type_info *
SWIG_TypeQueryModule(swig_module_info *start, 
                     swig_module_info *end, 
		     const char *name) {
  /* STEP 1: Search the name field using binary search */
  swig_type_info *ret = SWIG_MangledTypeQueryModule(start, end, name);
  if (ret) {
    return ret;
  } else {
    /* STEP 2: If the type hasn't been found, do a complete search
       of the str field (the human readable name) */
    swig_module_info *iter = start;
    do {
      register size_t i = 0;
      for (; i < iter->size; ++i) {
	if (iter->types[i]->str && (SWIG_TypeEquiv(iter->types[i]->str, name)))
	  return iter->types[i];
      }
      iter = iter->next;
    } while (iter != end);
  }
  
  /* neither found a match */
  return 0;
}

/* 
   Pack binary data into a string
*/
SWIGRUNTIME char *
SWIG_PackData(char *c, void *ptr, size_t sz) {
  static const char hex[17] = "0123456789abcdef";
  register const unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu =  u + sz;
  for (; u != eu; ++u) {
    register unsigned char uu = *u;
    *(c++) = hex[(uu & 0xf0) >> 4];
    *(c++) = hex[uu & 0xf];
  }
  return c;
}

/* 
   Unpack binary data from a string
*/
SWIGRUNTIME const char *
SWIG_UnpackData(const char *c, void *ptr, size_t sz) {
  register unsigned char *u = (unsigned char *) ptr;
  register const unsigned char *eu = u + sz;
  for (; u != eu; ++u) {
    register char d = *(c++);
    register unsigned char uu;
    if ((d >= '0') && (d <= '9'))
      uu = ((d - '0') << 4);
    else if ((d >= 'a') && (d <= 'f'))
      uu = ((d - ('a'-10)) << 4);
    else 
      return (char *) 0;
    d = *(c++);
    if ((d >= '0') && (d <= '9'))
      uu |= (d - '0');
    else if ((d >= 'a') && (d <= 'f'))
      uu |= (d - ('a'-10));
    else 
      return (char *) 0;
    *u = uu;
  }
  return c;
}

/* 
   Pack 'void *' into a string buffer.
*/
SWIGRUNTIME char *
SWIG_PackVoidPtr(char *buff, void *ptr, const char *name, size_t bsz) {
  char *r = buff;
  if ((2*sizeof(void *) + 2) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,&ptr,sizeof(void *));
  if (strlen(name) + 1 > (bsz - (r - buff))) return 0;
  strcpy(r,name);
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackVoidPtr(const char *c, void **ptr, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      *ptr = (void *) 0;
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sizeof(void *));
}

SWIGRUNTIME char *
SWIG_PackDataName(char *buff, void *ptr, size_t sz, const char *name, size_t bsz) {
  char *r = buff;
  size_t lname = (name ? strlen(name) : 0);
  if ((2*sz + 2 + lname) > bsz) return 0;
  *(r++) = '_';
  r = SWIG_PackData(r,ptr,sz);
  if (lname) {
    strncpy(r,name,lname+1);
  } else {
    *r = 0;
  }
  return buff;
}

SWIGRUNTIME const char *
SWIG_UnpackDataName(const char *c, void *ptr, size_t sz, const char *name) {
  if (*c != '_') {
    if (strcmp(c,"NULL") == 0) {
      memset(ptr,0,sz);
      return name;
    } else {
      return 0;
    }
  }
  return SWIG_UnpackData(++c,ptr,sz);
}

#ifdef __cplusplus
}
#endif

/* -----------------------------------------------------------------------------
 * luarun.swg
 *
 * This file contains the runtime support for Lua modules
 * and includes code for managing global variables and pointer
 * type checking.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#endif

#include "lua.h"
#include "lauxlib.h"
#include <stdlib.h>  /* for malloc */
#include <assert.h>  /* for a few sanity tests */

/* -----------------------------------------------------------------------------
 * global swig types
 * ----------------------------------------------------------------------------- */
/* Constant table */
#define SWIG_LUA_INT     1
#define SWIG_LUA_FLOAT   2
#define SWIG_LUA_STRING  3
#define SWIG_LUA_POINTER 4
#define SWIG_LUA_BINARY  5
#define SWIG_LUA_CHAR    6

/* Structure for variable linking table */
typedef struct {
  const char *name;
  lua_CFunction get;
  lua_CFunction set;
} swig_lua_var_info;

/* Constant information structure */
typedef struct {
    int type;
    char *name;
    long lvalue;
    double dvalue;
    void   *pvalue;
    swig_type_info **ptype;
} swig_lua_const_info;

typedef struct {
  const char     *name;
  lua_CFunction   method;
} swig_lua_method;

typedef struct {
  const char     *name;
  lua_CFunction   getmethod;
  lua_CFunction   setmethod;
} swig_lua_attribute;

typedef struct swig_lua_class {
  const char    *name;
  swig_type_info   **type;
  lua_CFunction  constructor;
  void    (*destructor)(void *);
  swig_lua_method   *methods;
  swig_lua_attribute     *attributes;
  struct swig_lua_class **bases;
  const char **base_names;
} swig_lua_class;

/* this is the struct for wrappering all pointers in SwigLua
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  void        *ptr;
} swig_lua_userdata;

/* this is the struct for wrapping arbitary packed binary data
(currently it is only used for member function pointers)
the data ordering is similar to swig_lua_userdata, but it is currently not possible
to tell the two structures apart within SWIG, other than by looking at the type
*/
typedef struct {
  swig_type_info   *type;
  int     own;  /* 1 if owned & must be destroyed */
  char data[1];       /* arbitary amount of data */    
} swig_lua_rawdata;

/* Common SWIG API */
#define SWIG_NewPointerObj(L, ptr, type, owner)       SWIG_Lua_NewPointerObj(L, (void *)ptr, type, owner)
#define SWIG_ConvertPtr(L,idx, ptr, type, flags)    SWIG_Lua_ConvertPtr(L,idx,ptr,type,flags)
#define SWIG_MustGetPtr(L,idx, type,flags, argnum,fnname)  SWIG_Lua_MustGetPtr(L,idx, type,flags, argnum,fnname)
/* for C++ member pointers, ie, member methods */
#define SWIG_ConvertMember(L, idx, ptr, sz, ty)       SWIG_Lua_ConvertPacked(L, idx, ptr, sz, ty)
#define SWIG_NewMemberObj(L, ptr, sz, type)      SWIG_Lua_NewPackedObj(L, ptr, sz, type)

/* Runtime API */
#define SWIG_GetModule(clientdata) SWIG_Lua_GetModule((lua_State*)(clientdata))
#define SWIG_SetModule(clientdata, pointer) SWIG_Lua_SetModule((lua_State*) (clientdata), pointer)
#define SWIG_MODULE_CLIENTDATA_TYPE lua_State*

/* Contract support */
#define SWIG_contract_assert(expr, msg)  \
  if (!(expr)) { lua_pushstring(L, (char *) msg); goto fail; } else

/* helper #defines */
#define SWIG_fail {goto fail;}
#define SWIG_fail_arg(func_name,argnum,type) \
  {lua_pushfstring(L,"Error in %s (arg %d), expected '%s' got '%s'",\
  func_name,argnum,type,SWIG_Lua_typename(L,argnum));\
  goto fail;}
#define SWIG_fail_ptr(func_name,argnum,type) \
  SWIG_fail_arg(func_name,argnum,(type && type->str)?type->str:"void*")
#define SWIG_check_num_args(func_name,a,b) \
  if (lua_gettop(L)<a || lua_gettop(L)>b) \
  {lua_pushfstring(L,"Error in %s expected %d..%d args, got %d",func_name,a,b,lua_gettop(L));\
  goto fail;}


#define SWIG_Lua_get_table(L,n) \
  (lua_pushstring(L, n), lua_rawget(L,-2))

#define SWIG_Lua_add_function(L,n,f) \
  (lua_pushstring(L, n), \
      lua_pushcfunction(L, f), \
      lua_rawset(L,-3))

/* special helper for allowing 'nil' for usertypes */
#define SWIG_isptrtype(L,I) (lua_isuserdata(L,I) || lua_isnil(L,I))

#ifdef __cplusplus
/* Special helper for member function pointers 
it gets the address, casts it, then dereferences it */
//#define SWIG_mem_fn_as_voidptr(a)  (*((char**)&(a)))
#endif

/* storing/access of swig_module_info */
SWIGRUNTIME swig_module_info *
SWIG_Lua_GetModule(lua_State* L) {
  swig_module_info *ret = 0;
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_rawget(L,LUA_REGISTRYINDEX);
  if (lua_islightuserdata(L,-1))
    ret=(swig_module_info*)lua_touserdata(L,-1);
  lua_pop(L,1);  /* tidy */
  return ret;
}

SWIGRUNTIME void
SWIG_Lua_SetModule(lua_State* L, swig_module_info *module) {
  /* add this all into the Lua registry: */
  lua_pushstring(L,"swig_runtime_data_type_pointer" SWIG_RUNTIME_VERSION SWIG_TYPE_TABLE_NAME);
  lua_pushlightuserdata(L,(void*)module);
  lua_rawset(L,LUA_REGISTRYINDEX);
}

/* -----------------------------------------------------------------------------
 * global variable support code: modules
 * ----------------------------------------------------------------------------- */

/* this function is called when trying to set an immutable.
default value is to print an error.
This can removed with a compile flag SWIGLUA_IGNORE_SET_IMMUTABLE */
SWIGINTERN int SWIG_Lua_set_immutable(lua_State* L)
{
/*  there should be 1 param passed in: the new value */
#ifndef SWIGLUA_IGNORE_SET_IMMUTABLE
  lua_pop(L,1);  /* remove it */
  lua_pushstring(L,"This variable is immutable");
  lua_error(L);
#endif
    return 0;   /* should not return anything */
}

/* the module.get method used for getting linked data */
SWIGINTERN int SWIG_Lua_module_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  printf("SWIG_Lua_module_get %p(%s) '%s'\n",
   lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
   lua_tostring(L,2));
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get");  /* get the .get table */
  lua_remove(L,3);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .get table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,3);  /* remove .get */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_call(L,0,1);
      return 1;
    }
    lua_pop(L,1);  /* remove the top */
  }
  lua_pop(L,1);  /* remove the .get */
  lua_pushnil(L);  /* return a nil */
    return 1;
}

/* the module.set method used for setting linked data */
SWIGINTERN int SWIG_Lua_module_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
*/
  /* get the metatable */
  assert(lua_istable(L,1));  /* just in case */
  lua_getmetatable(L,1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".set");  /* get the .set table */
  lua_remove(L,4);  /* remove metatable */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    lua_remove(L,4);  /* remove .set */
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,1,0);
      return 0;
    }
  }
  lua_settop(L,3);  /* reset back to start */
  /* we now have the table, key & new value, so just set directly */
  lua_rawset(L,1);  /* add direct */
  return 0;
}

/* registering a module in lua */
SWIGINTERN void  SWIG_Lua_module_begin(lua_State* L,const char* name)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushstring(L,name);
  lua_newtable(L);   /* the table */
  /* add meta table */
  lua_newtable(L);    /* the meta table */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_module_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_module_set);
  lua_pushstring(L,".get");
  lua_newtable(L);    /* the .get table */
  lua_rawset(L,-3);  /* add .get into metatable */
  lua_pushstring(L,".set");
  lua_newtable(L);    /* the .set table */
  lua_rawset(L,-3);  /* add .set into metatable */
  lua_setmetatable(L,-2);  /* sets meta table in module */
  lua_rawset(L,-3);        /* add module into parent */
  SWIG_Lua_get_table(L,name);   /* get the table back out */
}

/* ending the register */
SWIGINTERN void  SWIG_Lua_module_end(lua_State* L)
{
  lua_pop(L,1);       /* tidy stack (remove module) */
}

/* adding a linked variable to the module */
SWIGINTERN void SWIG_Lua_module_add_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  lua_getmetatable(L,-1);  /* get the metatable */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* should be a table: */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)  /* if there is a set fn */
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* should be a table: */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
  lua_pop(L,1);       /* tidy stack (remove meta) */
}

/* adding a function module */
SWIGINTERN void  SWIG_Lua_module_add_function(lua_State* L,const char* name,lua_CFunction fn)
{
  SWIG_Lua_add_function(L,name,fn);
}

/* -----------------------------------------------------------------------------
 * global variable support code: classes
 * ----------------------------------------------------------------------------- */

/* the class.get method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_get(lua_State* L)
{
/*  there should be 2 params passed in
  (1) userdata (not the meta table)
  (2) string name of the attribute
*/
  assert(lua_isuserdata(L,-2));  /* just in case */
  lua_getmetatable(L,-2);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  /* look for the key in the .get table */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);
  lua_remove(L,-2); /* stack tidy, remove .get table */
  if (lua_iscfunction(L,-1))
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_call(L,1,1);  /* 1 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* ok, so try the .fn table */
  SWIG_Lua_get_table(L,".fn"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  lua_pushvalue(L,2);  /* key */
  lua_rawget(L,-2);  /* look for the fn */
  lua_remove(L,-2); /* stack tidy, remove .fn table */
  if (lua_isfunction(L,-1)) /* note: if its a C function or lua function */
  {  /* found it so return the fn & let lua call it */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  lua_pop(L,1);  /* remove whatever was there */
  /* NEW: looks for the __getitem() fn
  this is a user provided get fn */
  SWIG_Lua_get_table(L,"__getitem"); /* find the __getitem fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_call(L,2,1);  /* 2 value in (userdata),1 out (result) */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;  /* sorry not known */
}

/* the class.set method, performs the lookup of class attributes */
SWIGINTERN int  SWIG_Lua_class_set(lua_State* L)
{
/*  there should be 3 params passed in
  (1) table (not the meta table)
  (2) string name of the attribute
  (3) any for the new value
printf("SWIG_Lua_class_set %p(%s) '%s' %p(%s)\n",
      lua_topointer(L,1),lua_typename(L,lua_type(L,1)),
      lua_tostring(L,2),
      lua_topointer(L,3),lua_typename(L,lua_type(L,3)));*/

  assert(lua_isuserdata(L,1));  /* just in case */
  lua_getmetatable(L,1);    /* get the meta table */
  assert(lua_istable(L,-1));  /* just in case */

  SWIG_Lua_get_table(L,".set"); /* find the .set table */
  if (lua_istable(L,-1))
  {
    /* look for the key in the .set table */
    lua_pushvalue(L,2);  /* key */
    lua_rawget(L,-2);
    if (lua_iscfunction(L,-1))
    {  /* found it so call the fn & return its value */
      lua_pushvalue(L,1);  /* userdata */
      lua_pushvalue(L,3);  /* value */
      lua_call(L,2,0);
      return 0;
    }
    lua_pop(L,1);  /* remove the value */
  }
  lua_pop(L,1);  /* remove the value .set table */
  /* NEW: looks for the __setitem() fn
  this is a user provided set fn */
  SWIG_Lua_get_table(L,"__setitem"); /* find the fn */
  if (lua_iscfunction(L,-1))  /* if its there */
  {  /* found it so call the fn & return its value */
    lua_pushvalue(L,1);  /* the userdata */
    lua_pushvalue(L,2);  /* the parameter */
    lua_pushvalue(L,3);  /* the value */
    lua_call(L,3,0);  /* 3 values in ,0 out */
    lua_remove(L,-2); /* stack tidy, remove metatable */
    return 1;
  }
  return 0;
}

/* the class.destruct method called by the interpreter */
SWIGINTERN int  SWIG_Lua_class_destruct(lua_State* L)
{
/*  there should be 1 params passed in
  (1) userdata (not the meta table) */
  swig_lua_userdata* usr;
  swig_lua_class* clss;
  assert(lua_isuserdata(L,-1));  /* just in case */
  usr=(swig_lua_userdata*)lua_touserdata(L,-1);  /* get it */
  /* if must be destroyed & has a destructor */
  if (usr->own) /* if must be destroyed */
  {
    clss=(swig_lua_class*)usr->type->clientdata;  /* get the class */
    if (clss && clss->destructor)  /* there is a destroy fn */
    {
      clss->destructor(usr->ptr);  /* bye bye */
    }
  }
  return 0;
}

/* gets the swig class registry (or creates it) */
SWIGINTERN void  SWIG_Lua_get_class_registry(lua_State* L)
{
  /* add this all into the swig registry: */
  lua_pushstring(L,"SWIG");
  lua_rawget(L,LUA_REGISTRYINDEX);  /* get the registry */
  if (!lua_istable(L,-1))  /* not there */
  {  /* must be first time, so add it */
    lua_pop(L,1);  /* remove the result */
    lua_pushstring(L,"SWIG");
    lua_newtable(L);
    lua_rawset(L,LUA_REGISTRYINDEX);
    /* then get it */
    lua_pushstring(L,"SWIG");
    lua_rawget(L,LUA_REGISTRYINDEX);
  }
}

/* helper fn to get the classes metatable from the register */
SWIGINTERN void  SWIG_Lua_get_class_metatable(lua_State* L,const char* cname)
{
  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,cname);  /* get the name */
  lua_rawget(L,-2);    /* get it */
  lua_remove(L,-2);    /* tidy up (remove registry) */
}

/* helper add a variable to a registered class */
SWIGINTERN void  SWIG_Lua_add_class_variable(lua_State* L,const char* name,lua_CFunction getFn,lua_CFunction setFn)
{
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_get_table(L,".get"); /* find the .get table */
  assert(lua_istable(L,-1));  /* just in case */
  SWIG_Lua_add_function(L,name,getFn);
  lua_pop(L,1);       /* tidy stack (remove table) */
  if (setFn)
  {
    SWIG_Lua_get_table(L,".set"); /* find the .set table */
    assert(lua_istable(L,-1));  /* just in case */
    SWIG_Lua_add_function(L,name,setFn);
    lua_pop(L,1);       /* tidy stack (remove table) */
  }
}

/* helper to recursively add class details (attributes & operations) */
SWIGINTERN void  SWIG_Lua_add_class_details(lua_State* L,swig_lua_class* clss)
{
  int i;
  /* call all the base classes first: we can then override these later: */
  for(i=0;clss->bases[i];i++)
  {
    SWIG_Lua_add_class_details(L,clss->bases[i]);
  }
  /* add fns */
  for(i=0;clss->attributes[i].name;i++){
    SWIG_Lua_add_class_variable(L,clss->attributes[i].name,clss->attributes[i].getmethod,clss->attributes[i].setmethod);
  }
  /* add methods to the metatable */
  SWIG_Lua_get_table(L,".fn"); /* find the .fn table */
  assert(lua_istable(L,-1));  /* just in case */
  for(i=0;clss->methods[i].name;i++){
    SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
  }
  lua_pop(L,1);       /* tidy stack (remove table) */
  /*   add operator overloads
    these look ANY method which start with "__" and assume they
    are operator overloads & add them to the metatable
    (this might mess up is someone defines a method __gc (the destructor)*/
  for(i=0;clss->methods[i].name;i++){
    if (clss->methods[i].name[0]=='_' && clss->methods[i].name[1]=='_'){
      SWIG_Lua_add_function(L,clss->methods[i].name,clss->methods[i].method);
    }
  }
}

/* set up the base classes pointers.
Each class structure has a list of pointers to the base class structures.
This function fills them.
It cannot be done at compile time, as this will not work with hireachies
spread over more than one swig file. 
Therefore it must be done at runtime, querying the SWIG type system.
*/
SWIGINTERN void SWIG_Lua_init_base_class(lua_State* L,swig_lua_class* clss)
{
  int i=0;
  swig_module_info* module=SWIG_GetModule(L);
  for(i=0;clss->base_names[i];i++)
  {
    if (clss->bases[i]==0) /* not found yet */
    {
      /* lookup and cache the base class */
      swig_type_info *info = SWIG_TypeQueryModule(module,module,clss->base_names[i]);
      if (info) clss->bases[i] = (swig_lua_class *) info->clientdata;
    }
  }	
}

/* performs the entire class registration process */
SWIGINTERN void  SWIG_Lua_class_register(lua_State* L,swig_lua_class* clss)
{
  /*  add its constructor to module with the name of the class
  so you can do MyClass(...) as well as new_MyClass(...)
  BUT only if a constructor is defined
  (this overcomes the problem of pure virtual classes without constructors)*/
  if (clss->constructor)
    SWIG_Lua_add_function(L,clss->name,clss->constructor);

  SWIG_Lua_get_class_registry(L);  /* get the registry */
  lua_pushstring(L,clss->name);  /* get the name */
  lua_newtable(L);    /* create the metatable */
  /* add string of class name called ".type" */
  lua_pushstring(L,".type");
  lua_pushstring(L,clss->name);
  lua_rawset(L,-3);
  /* add a table called ".get" */
  lua_pushstring(L,".get");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".set" */
  lua_pushstring(L,".set");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add a table called ".fn" */
  lua_pushstring(L,".fn");
  lua_newtable(L);
  lua_rawset(L,-3);
  /* add accessor fns for using the .get,.set&.fn */
  SWIG_Lua_add_function(L,"__index",SWIG_Lua_class_get);
  SWIG_Lua_add_function(L,"__newindex",SWIG_Lua_class_set);
  SWIG_Lua_add_function(L,"__gc",SWIG_Lua_class_destruct);
  /* add it */
  lua_rawset(L,-3);  /* metatable into registry */
  lua_pop(L,1);      /* tidy stack (remove registry) */

  SWIG_Lua_get_class_metatable(L,clss->name);
  SWIG_Lua_add_class_details(L,clss);  /* recursive adding of details (atts & ops) */
  lua_pop(L,1);      /* tidy stack (remove class metatable) */
}

/* -----------------------------------------------------------------------------
 * Class/structure conversion fns
 * ----------------------------------------------------------------------------- */

/* helper to add metatable to new lua object */
SWIGINTERN void _SWIG_Lua_AddMetatable(lua_State* L,swig_type_info *type)
{
  if (type->clientdata)  /* there is clientdata: so add the metatable */
  {
    SWIG_Lua_get_class_metatable(L,((swig_lua_class*)(type->clientdata))->name);
    if (lua_istable(L,-1))
    {
      lua_setmetatable(L,-2);
    }
    else
    {
      lua_pop(L,1);
    }
  }
}

/* pushes a new object into the lua stack */
SWIGRUNTIME void SWIG_Lua_NewPointerObj(lua_State* L,void* ptr,swig_type_info *type, int own)
{
  swig_lua_userdata* usr;
  if (!ptr){
    lua_pushnil(L);
    return;
  }
  usr=(swig_lua_userdata*)lua_newuserdata(L,sizeof(swig_lua_userdata));  /* get data */
  usr->ptr=ptr;  /* set the ptr */
  usr->type=type;
  usr->own=own;
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}

/* takes a object from the lua stack & converts it into an object of the correct type
 (if possible) */
SWIGRUNTIME int  SWIG_Lua_ConvertPtr(lua_State* L,int index,void** ptr,swig_type_info *type,int flags)
{
  swig_lua_userdata* usr;
  swig_cast_info *cast;
  if (lua_isnil(L,index)){*ptr=0; return SWIG_OK;}    /* special case: lua nil => NULL pointer */
  usr=(swig_lua_userdata*)lua_touserdata(L,index);  /* get data */
  if (usr)
  {
    if (flags & SWIG_POINTER_DISOWN) /* must disown the object */
    {
        usr->own=0;
    }
    if (!type)            /* special cast void*, no casting fn */
    {
      *ptr=usr->ptr;
      return SWIG_OK; /* ok */
    }
    cast=SWIG_TypeCheckStruct(usr->type,type); /* performs normal type checking */
    if (cast)
    {
      int newmemory = 0;
      *ptr=SWIG_TypeCast(cast,usr->ptr,&newmemory);
      assert(!newmemory); /* newmemory handling not yet implemented */
      return SWIG_OK;  /* ok */
    }
  }
  return SWIG_ERROR;  /* error */
}

SWIGRUNTIME void* SWIG_Lua_MustGetPtr(lua_State* L,int index,swig_type_info *type,int flags,
       int argnum,const char* func_name){
  void* result;
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,index,&result,type,flags))){
    lua_pushfstring(L,"Error in %s, expected a %s at argument number %d\n",
      func_name,(type && type->str)?type->str:"void*",argnum);
    lua_error(L);
  }
  return result;
}

/* pushes a packed userdata. user for member fn pointers only */
SWIGRUNTIME void SWIG_Lua_NewPackedObj(lua_State* L,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  assert(ptr); /* not acceptable to pass in a NULL value */
  raw=(swig_lua_rawdata*)lua_newuserdata(L,sizeof(swig_lua_rawdata)-1+size);  /* alloc data */
  raw->type=type;
  raw->own=0;
  memcpy(raw->data,ptr,size); /* copy the data */
  _SWIG_Lua_AddMetatable(L,type); /* add metatable */
}
    
/* converts a packed userdata. user for member fn pointers only */
SWIGRUNTIME int  SWIG_Lua_ConvertPacked(lua_State* L,int index,void* ptr,size_t size,swig_type_info *type)
{
  swig_lua_rawdata* raw;
  raw=(swig_lua_rawdata*)lua_touserdata(L,index);  /* get data */
  if (!raw) return SWIG_ERROR;  /* error */
  if (type==0 || type==raw->type) /* void* or identical type */
  {
    memcpy(ptr,raw->data,size); /* copy it */
    return SWIG_OK; /* ok */
  }
  return SWIG_ERROR;  /* error */
}

/* a function to get the typestring of a piece of data */
SWIGRUNTIME const char *SWIG_Lua_typename(lua_State *L, int tp)
{
  swig_lua_userdata* usr;
  if (lua_isuserdata(L,tp))
  {
    usr=(swig_lua_userdata*)lua_touserdata(L,tp);  /* get data */
    if (usr && usr->type && usr->type->str)
      return usr->type->str;
    return "userdata (unknown type)";
  }
  return lua_typename(L,lua_type(L,tp));
}

/* lua callable function to get the userdata's type */
SWIGRUNTIME int SWIG_Lua_type(lua_State* L)
{
  lua_pushstring(L,SWIG_Lua_typename(L,1));
  return 1;
}

/* lua callable function to compare userdata's value
the issue is that two userdata may point to the same thing
but to lua, they are different objects */
SWIGRUNTIME int SWIG_Lua_equal(lua_State* L)
{
  int result;
  swig_lua_userdata *usr1,*usr2;
  if (!lua_isuserdata(L,1) || !lua_isuserdata(L,2))  /* just in case */
    return 0;  /* nil reply */
  usr1=(swig_lua_userdata*)lua_touserdata(L,1);  /* get data */
  usr2=(swig_lua_userdata*)lua_touserdata(L,2);  /* get data */
  /*result=(usr1->ptr==usr2->ptr && usr1->type==usr2->type); only works if type is the same*/
  result=(usr1->ptr==usr2->ptr);
   lua_pushboolean(L,result);
  return 1;
}

/* -----------------------------------------------------------------------------
 * global variable support code: class/struct typemap functions
 * ----------------------------------------------------------------------------- */

/* Install Constants */
SWIGINTERN void
SWIG_Lua_InstallConstants(lua_State* L, swig_lua_const_info constants[]) {
  int i;
  for (i = 0; constants[i].type; i++) {
    switch(constants[i].type) {
    case SWIG_LUA_INT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_FLOAT:
      lua_pushstring(L,constants[i].name);
      lua_pushnumber(L,(lua_Number)constants[i].dvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_CHAR:
      lua_pushstring(L,constants[i].name);
      lua_pushfstring(L,"%c",(char)constants[i].lvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_STRING:
      lua_pushstring(L,constants[i].name);
      lua_pushstring(L,(char *) constants[i].pvalue);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_POINTER:
      lua_pushstring(L,constants[i].name);
      SWIG_NewPointerObj(L,constants[i].pvalue, *(constants[i]).ptype,0);
      lua_rawset(L,-3);
      break;
    case SWIG_LUA_BINARY:
      lua_pushstring(L,constants[i].name);
      SWIG_NewMemberObj(L,constants[i].pvalue,constants[i].lvalue,*(constants[i]).ptype);
      lua_rawset(L,-3);
      break;
    default:
      break;
    }
  }
}

/* -----------------------------------------------------------------------------
 * executing lua code from within the wrapper
 * ----------------------------------------------------------------------------- */

#ifndef SWIG_DOSTRING_FAIL /* Allows redefining of error function */
#define SWIG_DOSTRING_FAIL(S) fprintf(stderr,"%s\n",S)
#endif
/* Executes a C string in Lua a really simple way of calling lua from C
Unfortunately lua keeps changing its API's, so we need a conditional compile
In lua 5.0.X its lua_dostring()
In lua 5.1.X its luaL_dostring()
*/
SWIGINTERN int 
SWIG_Lua_dostring(lua_State *L, const char* str) {
  int ok,top;
  if (str==0 || str[0]==0) return 0; /* nothing to do */
  top=lua_gettop(L); /* save stack */
#if (defined(LUA_VERSION_NUM) && (LUA_VERSION_NUM>=501))
  ok=luaL_dostring(L,str);	/* looks like this is lua 5.1.X or later, good */
#else
  ok=lua_dostring(L,str);	/* might be lua 5.0.x, using lua_dostring */
#endif
  if (ok!=0) {
    SWIG_DOSTRING_FAIL(lua_tostring(L,-1));
  }
  lua_settop(L,top); /* restore the stack */
  return ok;
}    

#ifdef __cplusplus
}
#endif

/* ------------------------------ end luarun.swg  ------------------------------ */


/* -------- TYPES TABLE (BEGIN) -------- */

#define SWIGTYPE_p_Event0T_t swig_types[0]
#define SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t swig_types[1]
#define SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t swig_types[2]
#define SWIGTYPE_p_SkeletonPtr swig_types[3]
#define SWIGTYPE_p_Type swig_types[4]
#define SWIGTYPE_p_a_3__vapor__Vector3 swig_types[5]
#define SWIGTYPE_p_char swig_types[6]
#define SWIGTYPE_p_float swig_types[7]
#define SWIGTYPE_p_long swig_types[8]
#define SWIGTYPE_p_short swig_types[9]
#define SWIGTYPE_p_signed_char swig_types[10]
#define SWIGTYPE_p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t swig_types[11]
#define SWIGTYPE_p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t swig_types[12]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Camera_t swig_types[13]
#define SWIGTYPE_p_std__shared_ptrT_vapor__CharacterController_t swig_types[14]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Component_t swig_types[15]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Controller_t swig_types[16]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t swig_types[17]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Geometry_t swig_types[18]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Group_t swig_types[19]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Light_t swig_types[20]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Model_t swig_types[21]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Scene_t swig_types[22]
#define SWIGTYPE_p_std__shared_ptrT_vapor__Transform_t swig_types[23]
#define SWIGTYPE_p_std__string swig_types[24]
#define SWIGTYPE_p_std__vectorT_float_t swig_types[25]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t swig_types[26]
#define SWIGTYPE_p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t swig_types[27]
#define SWIGTYPE_p_std__vectorT_unsigned_short_t swig_types[28]
#define SWIGTYPE_p_std__vectorT_vapor__MeshGroup_t swig_types[29]
#define SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t swig_types[30]
#define SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t swig_types[31]
#define SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t swig_types[32]
#define SWIGTYPE_p_std__vectorT_vapor__Vector3_t swig_types[33]
#define SWIGTYPE_p_std__weak_ptrT_vapor__Camera_t swig_types[34]
#define SWIGTYPE_p_std__weak_ptrT_vapor__CharacterController_t swig_types[35]
#define SWIGTYPE_p_std__weak_ptrT_vapor__Component_t swig_types[36]
#define SWIGTYPE_p_std__weak_ptrT_vapor__Entity_t swig_types[37]
#define SWIGTYPE_p_std__weak_ptrT_vapor__Geometry_t swig_types[38]
#define SWIGTYPE_p_std__weak_ptrT_vapor__Scene_t swig_types[39]
#define SWIGTYPE_p_unsigned_char swig_types[40]
#define SWIGTYPE_p_unsigned_long swig_types[41]
#define SWIGTYPE_p_unsigned_short swig_types[42]
#define SWIGTYPE_p_vapor__BoundingBox swig_types[43]
#define SWIGTYPE_p_vapor__Camera swig_types[44]
#define SWIGTYPE_p_vapor__CharacterController swig_types[45]
#define SWIGTYPE_p_vapor__Color swig_types[46]
#define SWIGTYPE_p_vapor__Component swig_types[47]
#define SWIGTYPE_p_vapor__Controller swig_types[48]
#define SWIGTYPE_p_vapor__Entity swig_types[49]
#define SWIGTYPE_p_vapor__EulerAngles swig_types[50]
#define SWIGTYPE_p_vapor__Frustum swig_types[51]
#define SWIGTYPE_p_vapor__Geometry swig_types[52]
#define SWIGTYPE_p_vapor__Group swig_types[53]
#define SWIGTYPE_p_vapor__InputEvent swig_types[54]
#define SWIGTYPE_p_vapor__KeyEvent swig_types[55]
#define SWIGTYPE_p_vapor__KeyboardEventType swig_types[56]
#define SWIGTYPE_p_vapor__Keys swig_types[57]
#define SWIGTYPE_p_vapor__Light swig_types[58]
#define SWIGTYPE_p_vapor__LightType swig_types[59]
#define SWIGTYPE_p_vapor__Matrix4x3 swig_types[60]
#define SWIGTYPE_p_vapor__Mesh swig_types[61]
#define SWIGTYPE_p_vapor__MeshGroup swig_types[62]
#define SWIGTYPE_p_vapor__MeshMaterial swig_types[63]
#define SWIGTYPE_p_vapor__Model swig_types[64]
#define SWIGTYPE_p_vapor__MouseButton swig_types[65]
#define SWIGTYPE_p_vapor__MouseButtonEvent swig_types[66]
#define SWIGTYPE_p_vapor__MouseDragEvent swig_types[67]
#define SWIGTYPE_p_vapor__MouseEvent swig_types[68]
#define SWIGTYPE_p_vapor__MouseEventType swig_types[69]
#define SWIGTYPE_p_vapor__MouseInfo swig_types[70]
#define SWIGTYPE_p_vapor__MouseMoveEvent swig_types[71]
#define SWIGTYPE_p_vapor__MouseWheelEvent swig_types[72]
#define SWIGTYPE_p_vapor__Quaternion swig_types[73]
#define SWIGTYPE_p_vapor__Ray swig_types[74]
#define SWIGTYPE_p_vapor__RayQueryResult swig_types[75]
#define SWIGTYPE_p_vapor__RayTriangleQueryResult swig_types[76]
#define SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t swig_types[77]
#define SWIGTYPE_p_vapor__RefPtrT_vapor__Attachment_t swig_types[78]
#define SWIGTYPE_p_vapor__RefPtrT_vapor__Bone_t swig_types[79]
#define SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t swig_types[80]
#define SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t swig_types[81]
#define SWIGTYPE_p_vapor__RefPtrT_vapor__Resource_t swig_types[82]
#define SWIGTYPE_p_vapor__ReferenceCounted swig_types[83]
#define SWIGTYPE_p_vapor__RenderBlock swig_types[84]
#define SWIGTYPE_p_vapor__RenderQueue swig_types[85]
#define SWIGTYPE_p_vapor__RenderView swig_types[86]
#define SWIGTYPE_p_vapor__Resource swig_types[87]
#define SWIGTYPE_p_vapor__Scene swig_types[88]
#define SWIGTYPE_p_vapor__Transform swig_types[89]
#define SWIGTYPE_p_vapor__Vector3 swig_types[90]
static swig_type_info *swig_types[92];
static swig_module_info swig_module = {swig_types, 91, 0, 0, 0, 0};
#define SWIG_TypeQuery(name) SWIG_TypeQueryModule(&swig_module, &swig_module, name)
#define SWIG_MangledTypeQuery(name) SWIG_MangledTypeQueryModule(&swig_module, &swig_module, name)

/* -------- TYPES TABLE (END) -------- */

#define SWIG_name      "vapor"
#define SWIG_init      luaopen_vapor
#define SWIG_init_user luaopen_vapor_user

#define SWIG_LUACODE   luaopen_vapor_luacode


namespace swig {
typedef struct{} LANGUAGE_OBJ;
}


SWIGINTERN int SWIG_lua_isnilstring(lua_State *L, int idx) {
  int ret = lua_isstring(L, idx);
  if (!ret)
   ret = lua_isnil(L, idx);
  return ret;
}

SWIGINTERN char const *vapor_Color___str__(vapor::Color *self){
		static char temp[256];
		sprintf(temp,"[%g, %g, %g, %g]", self->r, self->g, self->b, self->a);
		return &temp[0];
	}
SWIGINTERN char const *vapor_EulerAngles___str__(vapor::EulerAngles *self){
		static char temp[256];
		sprintf(temp,"[%g, %g, %g]", self->x, self->y, self->z);
		return &temp[0];
	}
SWIGINTERN char const *vapor_Quaternion___str__(vapor::Quaternion *self){
		static char temp[256];
		sprintf(temp,"[%g, %g, %g, %g]", self->x, self->y, self->z, self->w);
		return &temp[0];
	}
#ifdef __cplusplus
extern "C" {
#endif
static int _wrap_LogDebug(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("vapor::LogDebug",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("vapor::LogDebug",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  vapor::LogDebug((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogInfo(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("vapor::LogInfo",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("vapor::LogInfo",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  vapor::LogInfo((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogWarn(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("vapor::LogWarn",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("vapor::LogWarn",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  vapor::LogWarn((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_LogError(lua_State* L) {
  int SWIG_arg = 0;
  char *arg1 = (char *) 0 ;
  void *arg2 = 0 ;
  
  SWIG_check_num_args("vapor::LogError",1,1)
  if(!SWIG_lua_isnilstring(L,1)) SWIG_fail_arg("vapor::LogError",1,"char const *");
  arg1 = (char *)lua_tostring(L, 1);
  vapor::LogError((char const *)arg1,arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Color",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::Color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::Color",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("vapor::Color",4,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  result = (vapor::Color *)new vapor::Color(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Color",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::Color",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::Color",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (vapor::Color *)new vapor::Color(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Color",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::Color",2,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  result = (vapor::Color *)new vapor::Color(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Color",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = (vapor::Color *)new vapor::Color(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",0,0)
  result = (vapor::Color *)new vapor::Color();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_5(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  int arg4 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Color",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::Color",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::Color",3,"int");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("vapor::Color",4,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  arg4 = (int)lua_tonumber(L, 4);
  result = (vapor::Color *)new vapor::Color(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_6(lua_State* L) {
  int SWIG_arg = 0;
  int arg1 ;
  int arg2 ;
  int arg3 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Color",1,"int");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::Color",2,"int");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::Color",3,"int");
  arg1 = (int)lua_tonumber(L, 1);
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (int)lua_tonumber(L, 3);
  result = (vapor::Color *)new vapor::Color(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color__SWIG_7(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = 0 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Color",1,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("new_Color",1,SWIGTYPE_p_vapor__Color);
  }
  
  result = (vapor::Color *)new vapor::Color((vapor::Color const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Color(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Color__SWIG_4(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Color__SWIG_7(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Color__SWIG_3(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_Color__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Color__SWIG_6(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_Color__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_0(L);
          }
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Color__SWIG_5(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Color'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Color(float,float,float,float)\n"
    "    vapor::Color(float,float,float)\n"
    "    vapor::Color(float,float)\n"
    "    vapor::Color(float)\n"
    "    vapor::Color()\n"
    "    vapor::Color(int,int,int,int)\n"
    "    vapor::Color(int,int,int)\n"
    "    vapor::Color(vapor::Color const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color___eq(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  vapor::Color *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"vapor::Color const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color___eq",1,SWIGTYPE_p_vapor__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color___eq",2,SWIGTYPE_p_vapor__Color);
  }
  
  result = (bool)((vapor::Color const *)arg1)->operator ==((vapor::Color const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_nearEqual__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  vapor::Color *arg2 = 0 ;
  float arg3 ;
  bool result;
  
  SWIG_check_num_args("nearEqual",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nearEqual",1,"vapor::Color *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("nearEqual",2,"vapor::Color const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("nearEqual",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_nearEqual",1,SWIGTYPE_p_vapor__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_nearEqual",2,SWIGTYPE_p_vapor__Color);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (bool)(arg1)->nearEqual((vapor::Color const &)*arg2,arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_nearEqual__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  vapor::Color *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("nearEqual",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("nearEqual",1,"vapor::Color *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("nearEqual",2,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_nearEqual",1,SWIGTYPE_p_vapor__Color);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_nearEqual",2,SWIGTYPE_p_vapor__Color);
  }
  
  result = (bool)(arg1)->nearEqual((vapor::Color const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_nearEqual(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Color_nearEqual__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Color, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Color, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Color_nearEqual__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Color_nearEqual'\n"
    "  Possible C/C++ prototypes are:\n"
    "    nearEqual(vapor::Color *,vapor::Color const &,float)\n"
    "    nearEqual(vapor::Color *,vapor::Color const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Color___mul(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float arg2 ;
  vapor::Color result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"vapor::Color const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("operator *",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color___mul",1,SWIGTYPE_p_vapor__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((vapor::Color const *)arg1)->operator *(arg2);
  {
    vapor::Color * resultptr = new vapor::Color((const vapor::Color &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Color,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_White_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::White",0,0)
  result = (vapor::Color *)&vapor::Color::White;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_Black_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::Black",0,0)
  result = (vapor::Color *)&vapor::Color::Black;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_LightGrey_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::LightGrey",0,0)
  result = (vapor::Color *)&vapor::Color::LightGrey;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_Red_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::Red",0,0)
  result = (vapor::Color *)&vapor::Color::Red;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_Green_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::Green",0,0)
  result = (vapor::Color *)&vapor::Color::Green;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_Blue_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::Blue",0,0)
  result = (vapor::Color *)&vapor::Color::Blue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_NavyBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::NavyBlue",0,0)
  result = (vapor::Color *)&vapor::Color::NavyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_SkyBlue_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::SkyBlue",0,0)
  result = (vapor::Color *)&vapor::Color::SkyBlue;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_Yellow_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("vapor::Color::Yellow",0,0)
  result = (vapor::Color *)&vapor::Color::Yellow;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_r_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("r",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"vapor::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("r",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_r_set",1,SWIGTYPE_p_vapor__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->r = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_r_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("r",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("r",1,"vapor::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_r_get",1,SWIGTYPE_p_vapor__Color);
  }
  
  result = (float) ((arg1)->r);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("g",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"vapor::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("g",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_g_set",1,SWIGTYPE_p_vapor__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->g = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_g_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("g",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("g",1,"vapor::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_g_get",1,SWIGTYPE_p_vapor__Color);
  }
  
  result = (float) ((arg1)->g);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("b",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"vapor::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("b",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_b_set",1,SWIGTYPE_p_vapor__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->b = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_b_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("b",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("b",1,"vapor::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_b_get",1,SWIGTYPE_p_vapor__Color);
  }
  
  result = (float) ((arg1)->b);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("a",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"vapor::Color *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("a",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_a_set",1,SWIGTYPE_p_vapor__Color);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->a = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color_a_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  float result;
  
  SWIG_check_num_args("a",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("a",1,"vapor::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color_a_get",1,SWIGTYPE_p_vapor__Color);
  }
  
  result = (float) ((arg1)->a);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Color___tostring(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Color *arg1 = (vapor::Color *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__str__",1,"vapor::Color *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Color___tostring",1,SWIGTYPE_p_vapor__Color);
  }
  
  result = (char *)vapor_Color___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Color(void *obj) {
vapor::Color *arg1 = (vapor::Color *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Color_methods[] = {
    {"__eq", _wrap_Color___eq}, 
    {"nearEqual", _wrap_Color_nearEqual}, 
    {"__mul", _wrap_Color___mul}, 
    {"__tostring", _wrap_Color___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Color_attributes[] = {
    { "r", _wrap_Color_r_get, _wrap_Color_r_set},
    { "g", _wrap_Color_g_get, _wrap_Color_g_set},
    { "b", _wrap_Color_b_get, _wrap_Color_b_set},
    { "a", _wrap_Color_a_get, _wrap_Color_a_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Color_bases[] = {0};
static const char *swig_vapor_Color_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Color = { "Color", &SWIGTYPE_p_vapor__Color,_wrap_new_Color, swig_delete_Color, swig_vapor_Color_methods, swig_vapor_Color_attributes, swig_vapor_Color_bases, swig_vapor_Color_base_names };

static int _wrap_new_EulerAngles__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *result = 0 ;
  
  SWIG_check_num_args("vapor::EulerAngles",0,0)
  result = (vapor::EulerAngles *)new vapor::EulerAngles();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__EulerAngles,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EulerAngles__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  vapor::EulerAngles *result = 0 ;
  
  SWIG_check_num_args("vapor::EulerAngles",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::EulerAngles",1,"float");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::EulerAngles",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::EulerAngles",3,"float");
  arg1 = (float)lua_tonumber(L, 1);
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = (vapor::EulerAngles *)new vapor::EulerAngles(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__EulerAngles,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EulerAngles__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = 0 ;
  vapor::EulerAngles *result = 0 ;
  
  SWIG_check_num_args("vapor::EulerAngles",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::EulerAngles",1,"vapor::EulerAngles const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("new_EulerAngles",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = (vapor::EulerAngles *)new vapor::EulerAngles((vapor::EulerAngles const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__EulerAngles,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_EulerAngles(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_EulerAngles__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__EulerAngles, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_EulerAngles__SWIG_2(L);
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_EulerAngles__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_EulerAngles'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::EulerAngles()\n"
    "    vapor::EulerAngles(float,float,float)\n"
    "    vapor::EulerAngles(vapor::EulerAngles const &)\n");
  lua_error(L);return 0;
}


static int _wrap_EulerAngles_rotate(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  
  SWIG_check_num_args("rotate",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("rotate",1,"vapor::EulerAngles *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("rotate",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("rotate",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("rotate",4,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_rotate",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  (arg1)->rotate(arg2,arg3,arg4);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_identity(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  
  SWIG_check_num_args("identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("identity",1,"vapor::EulerAngles *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_identity",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_x_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::EulerAngles *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_x_set",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_x_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::EulerAngles *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_x_get",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_y_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::EulerAngles *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_y_set",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_y_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::EulerAngles *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_y_get",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_z_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vapor::EulerAngles *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_z_set",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles_z_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vapor::EulerAngles *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles_z_get",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_EulerAngles___tostring(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = (vapor::EulerAngles *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__str__",1,"vapor::EulerAngles *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("EulerAngles___tostring",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = (char *)vapor_EulerAngles___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_EulerAngles(void *obj) {
vapor::EulerAngles *arg1 = (vapor::EulerAngles *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_EulerAngles_methods[] = {
    {"rotate", _wrap_EulerAngles_rotate}, 
    {"identity", _wrap_EulerAngles_identity}, 
    {"__tostring", _wrap_EulerAngles___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_EulerAngles_attributes[] = {
    { "x", _wrap_EulerAngles_x_get, _wrap_EulerAngles_x_set},
    { "y", _wrap_EulerAngles_y_get, _wrap_EulerAngles_y_set},
    { "z", _wrap_EulerAngles_z_get, _wrap_EulerAngles_z_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_EulerAngles_bases[] = {0};
static const char *swig_vapor_EulerAngles_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_EulerAngles = { "EulerAngles", &SWIGTYPE_p_vapor__EulerAngles,_wrap_new_EulerAngles, swig_delete_EulerAngles, swig_vapor_EulerAngles_methods, swig_vapor_EulerAngles_attributes, swig_vapor_EulerAngles_bases, swig_vapor_EulerAngles_base_names };

static int _wrap_new_Quaternion__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("vapor::Quaternion",0,0)
  result = (vapor::Quaternion *)new vapor::Quaternion();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = 0 ;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("vapor::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Quaternion",1,"vapor::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (vapor::Quaternion *)new vapor::Quaternion((vapor::Quaternion const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("vapor::Quaternion",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Quaternion",1,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  result = (vapor::Quaternion *)new vapor::Quaternion(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = 0 ;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("vapor::Quaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Quaternion",1,"vapor::EulerAngles const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("new_Quaternion",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = (vapor::Quaternion *)new vapor::Quaternion((vapor::EulerAngles const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("vapor::Quaternion",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Quaternion",1,"float const");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("vapor::Quaternion",2,"float const");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::Quaternion",3,"float const");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("vapor::Quaternion",4,"float const");
  arg1 = (float const)lua_tonumber(L, 1);
  arg2 = (float const)lua_tonumber(L, 2);
  arg3 = (float const)lua_tonumber(L, 3);
  arg4 = (float const)lua_tonumber(L, 4);
  result = (vapor::Quaternion *)new vapor::Quaternion(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Quaternion(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Quaternion__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Quaternion, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_1(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__EulerAngles, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_3(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Quaternion__SWIG_2(L);
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isnumber(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_Quaternion__SWIG_4(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Quaternion'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Quaternion()\n"
    "    vapor::Quaternion(vapor::Quaternion const &)\n"
    "    vapor::Quaternion(float const)\n"
    "    vapor::Quaternion(vapor::EulerAngles const &)\n"
    "    vapor::Quaternion(float const,float const,float const,float const)\n");
  lua_error(L);return 0;
}


static int _wrap_Quaternion___eq(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Quaternion *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("operator ==",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator ==",1,"vapor::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator ==",2,"vapor::Quaternion &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___eq",2,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (bool)((vapor::Quaternion const *)arg1)->operator ==(*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_identity(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  
  SWIG_check_num_args("identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("identity",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_identity",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_conjugate(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Quaternion *arg2 = 0 ;
  vapor::Quaternion result;
  
  SWIG_check_num_args("conjugate",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("conjugate",1,"vapor::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("conjugate",2,"vapor::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_conjugate",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_conjugate",2,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (arg1)->conjugate((vapor::Quaternion const &)*arg2);
  {
    vapor::Quaternion * resultptr = new vapor::Quaternion((const vapor::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___mul(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Quaternion *arg2 = 0 ;
  vapor::Quaternion result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"vapor::Quaternion const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"vapor::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___mul",2,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = ((vapor::Quaternion const *)arg1)->operator *((vapor::Quaternion const &)*arg2);
  {
    vapor::Quaternion * resultptr = new vapor::Quaternion((const vapor::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_magnitude(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("magnitude",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("magnitude",1,"vapor::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_magnitude",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float)((vapor::Quaternion const *)arg1)->magnitude();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_normalize(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  
  SWIG_check_num_args("normalize",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normalize",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_normalize",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  (arg1)->normalize();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setToRotateAboutX(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setToRotateAboutX",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToRotateAboutX",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setToRotateAboutX",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setToRotateAboutX",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setToRotateAboutX(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setToRotateAboutY(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setToRotateAboutY",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToRotateAboutY",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setToRotateAboutY",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setToRotateAboutY",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setToRotateAboutY(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setToRotateAboutZ(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setToRotateAboutZ",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToRotateAboutZ",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setToRotateAboutZ",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setToRotateAboutZ",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setToRotateAboutZ(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_setToRotateAboutAxis(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Vector3 *arg2 = 0 ;
  float arg3 ;
  
  SWIG_check_num_args("setToRotateAboutAxis",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setToRotateAboutAxis",1,"vapor::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setToRotateAboutAxis",2,"vapor::Vector3 &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setToRotateAboutAxis",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_setToRotateAboutAxis",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Quaternion_setToRotateAboutAxis",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setToRotateAboutAxis(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_safeAcos(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  float result;
  
  SWIG_check_num_args("safeAcos",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("safeAcos",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("safeAcos",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_safeAcos",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = (float)(arg1)->safeAcos(arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getRotationAngle(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("getRotationAngle",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotationAngle",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getRotationAngle",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float)(arg1)->getRotationAngle();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getRotationAxis(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Vector3 result;
  
  SWIG_check_num_args("getRotationAxis",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotationAxis",1,"vapor::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getRotationAxis",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = ((vapor::Quaternion const *)arg1)->getRotationAxis();
  {
    vapor::Vector3 * resultptr = new vapor::Vector3((const vapor::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_dot(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Quaternion *arg2 = 0 ;
  float result;
  
  SWIG_check_num_args("dot",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dot",1,"vapor::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("dot",2,"vapor::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_dot",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_dot",2,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float)(arg1)->dot((vapor::Quaternion const &)*arg2);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_getEulerAngles(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::EulerAngles result;
  
  SWIG_check_num_args("getEulerAngles",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEulerAngles",1,"vapor::Quaternion const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_getEulerAngles",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = ((vapor::Quaternion const *)arg1)->getEulerAngles();
  {
    vapor::EulerAngles * resultptr = new vapor::EulerAngles((const vapor::EulerAngles &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__EulerAngles,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_slerp(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  vapor::Quaternion *arg2 = 0 ;
  float arg3 ;
  vapor::Quaternion result;
  
  SWIG_check_num_args("slerp",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("slerp",1,"vapor::Quaternion *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("slerp",2,"vapor::Quaternion const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("slerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_slerp",2,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = (arg1)->slerp((vapor::Quaternion const &)*arg2,arg3);
  {
    vapor::Quaternion * resultptr = new vapor::Quaternion((const vapor::Quaternion &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Quaternion,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_Identity_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("vapor::Quaternion::Identity",0,0)
  result = (vapor::Quaternion *)&vapor::Quaternion::Identity;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_x_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_x_set",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_x_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_x_get",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_y_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_y_set",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_y_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_y_get",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_z_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("z",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("z",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_z_set",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->z = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_z_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("z",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("z",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_z_get",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float) ((arg1)->z);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_w_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("w",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"vapor::Quaternion *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("w",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_w_set",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->w = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion_w_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  float result;
  
  SWIG_check_num_args("w",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("w",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion_w_get",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (float) ((arg1)->w);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Quaternion___tostring(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = (vapor::Quaternion *) 0 ;
  char *result = 0 ;
  
  SWIG_check_num_args("__str__",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("__str__",1,"vapor::Quaternion *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Quaternion___tostring",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = (char *)vapor_Quaternion___str__(arg1);
  lua_pushstring(L,(const char *)result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Quaternion(void *obj) {
vapor::Quaternion *arg1 = (vapor::Quaternion *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Quaternion_methods[] = {
    {"__eq", _wrap_Quaternion___eq}, 
    {"identity", _wrap_Quaternion_identity}, 
    {"conjugate", _wrap_Quaternion_conjugate}, 
    {"__mul", _wrap_Quaternion___mul}, 
    {"magnitude", _wrap_Quaternion_magnitude}, 
    {"normalize", _wrap_Quaternion_normalize}, 
    {"setToRotateAboutX", _wrap_Quaternion_setToRotateAboutX}, 
    {"setToRotateAboutY", _wrap_Quaternion_setToRotateAboutY}, 
    {"setToRotateAboutZ", _wrap_Quaternion_setToRotateAboutZ}, 
    {"setToRotateAboutAxis", _wrap_Quaternion_setToRotateAboutAxis}, 
    {"safeAcos", _wrap_Quaternion_safeAcos}, 
    {"getRotationAngle", _wrap_Quaternion_getRotationAngle}, 
    {"getRotationAxis", _wrap_Quaternion_getRotationAxis}, 
    {"dot", _wrap_Quaternion_dot}, 
    {"getEulerAngles", _wrap_Quaternion_getEulerAngles}, 
    {"slerp", _wrap_Quaternion_slerp}, 
    {"__tostring", _wrap_Quaternion___tostring}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Quaternion_attributes[] = {
    { "x", _wrap_Quaternion_x_get, _wrap_Quaternion_x_set},
    { "y", _wrap_Quaternion_y_get, _wrap_Quaternion_y_set},
    { "z", _wrap_Quaternion_z_get, _wrap_Quaternion_z_set},
    { "w", _wrap_Quaternion_w_get, _wrap_Quaternion_w_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Quaternion_bases[] = {0};
static const char *swig_vapor_Quaternion_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Quaternion = { "Quaternion", &SWIGTYPE_p_vapor__Quaternion,_wrap_new_Quaternion, swig_delete_Quaternion, swig_vapor_Quaternion_methods, swig_vapor_Quaternion_attributes, swig_vapor_Quaternion_bases, swig_vapor_Quaternion_base_names };

static int _wrap_new_Ray__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *result = 0 ;
  
  SWIG_check_num_args("vapor::Ray",0,0)
  result = (vapor::Ray *)new vapor::Ray();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Vector3 *arg1 = 0 ;
  vapor::Vector3 *arg2 = 0 ;
  vapor::Ray *result = 0 ;
  
  SWIG_check_num_args("vapor::Ray",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Ray",1,"vapor::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vapor::Ray",2,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_vapor__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("new_Ray",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = (vapor::Ray *)new vapor::Ray((vapor::Vector3 const &)*arg1,(vapor::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = 0 ;
  vapor::Ray *result = 0 ;
  
  SWIG_check_num_args("vapor::Ray",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Ray",1,"vapor::Ray const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("new_Ray",1,SWIGTYPE_p_vapor__Ray);
  }
  
  result = (vapor::Ray *)new vapor::Ray((vapor::Ray const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Ray,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Ray(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Ray__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Ray, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Ray__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_Ray__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Ray'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Ray()\n"
    "    vapor::Ray(vapor::Vector3 const &,vapor::Vector3 const &)\n"
    "    vapor::Ray(vapor::Ray const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Ray_getPoint(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = (vapor::Ray *) 0 ;
  float arg2 ;
  vapor::Vector3 result;
  
  SWIG_check_num_args("getPoint",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPoint",1,"vapor::Ray const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getPoint",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Ray_getPoint",1,SWIGTYPE_p_vapor__Ray);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  result = ((vapor::Ray const *)arg1)->getPoint(arg2);
  {
    vapor::Vector3 * resultptr = new vapor::Vector3((const vapor::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_intersects(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = (vapor::Ray *) 0 ;
  vapor::Vector3 (*arg2)[3] = 0 ;
  float *arg3 = 0 ;
  float *arg4 = 0 ;
  float *arg5 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersects",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersects",1,"vapor::Ray const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersects",2,"vapor::Vector3 const (&)[3]");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersects",3,"float &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("intersects",4,"float &");
  if(!lua_isuserdata(L,5)) SWIG_fail_arg("intersects",5,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Ray_intersects",1,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_a_3__vapor__Vector3,0))){
    SWIG_fail_ptr("Ray_intersects",2,SWIGTYPE_p_a_3__vapor__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Ray_intersects",3,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Ray_intersects",4,SWIGTYPE_p_float);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,5,(void**)&arg5,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("Ray_intersects",5,SWIGTYPE_p_float);
  }
  
  result = (bool)((vapor::Ray const *)arg1)->intersects(*arg2,*arg3,*arg4,*arg5);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_origin_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = (vapor::Ray *) 0 ;
  vapor::Vector3 *arg2 = (vapor::Vector3 *) 0 ;
  
  SWIG_check_num_args("origin",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("origin",1,"vapor::Ray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("origin",2,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Ray_origin_set",1,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Ray_origin_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  if (arg1) (arg1)->origin = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_origin_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = (vapor::Ray *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("origin",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("origin",1,"vapor::Ray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Ray_origin_get",1,SWIGTYPE_p_vapor__Ray);
  }
  
  result = (vapor::Vector3 *)& ((arg1)->origin);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_direction_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = (vapor::Ray *) 0 ;
  vapor::Vector3 *arg2 = (vapor::Vector3 *) 0 ;
  
  SWIG_check_num_args("direction",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("direction",1,"vapor::Ray *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("direction",2,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Ray_direction_set",1,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Ray_direction_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  if (arg1) (arg1)->direction = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Ray_direction_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Ray *arg1 = (vapor::Ray *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("direction",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("direction",1,"vapor::Ray *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Ray_direction_get",1,SWIGTYPE_p_vapor__Ray);
  }
  
  result = (vapor::Vector3 *)& ((arg1)->direction);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Ray(void *obj) {
vapor::Ray *arg1 = (vapor::Ray *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Ray_methods[] = {
    {"getPoint", _wrap_Ray_getPoint}, 
    {"intersects", _wrap_Ray_intersects}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Ray_attributes[] = {
    { "origin", _wrap_Ray_origin_get, _wrap_Ray_origin_set},
    { "direction", _wrap_Ray_direction_get, _wrap_Ray_direction_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Ray_bases[] = {0};
static const char *swig_vapor_Ray_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Ray = { "Ray", &SWIGTYPE_p_vapor__Ray,_wrap_new_Ray, swig_delete_Ray, swig_vapor_Ray_methods, swig_vapor_Ray_attributes, swig_vapor_Ray_bases, swig_vapor_Ray_base_names };

static int _wrap_new_Matrix4x3(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *result = 0 ;
  
  SWIG_check_num_args("vapor::Matrix4x3",0,0)
  result = (vapor::Matrix4x3 *)new vapor::Matrix4x3();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_identity(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  
  SWIG_check_num_args("identity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("identity",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_identity",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  (arg1)->identity();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_determinant(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("determinant",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("determinant",1,"vapor::Matrix4x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_determinant",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float)((vapor::Matrix4x3 const *)arg1)->determinant();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_inverse(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("inverse",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("inverse",1,"vapor::Matrix4x3 const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_inverse",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = ((vapor::Matrix4x3 const *)arg1)->inverse();
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3___mul__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  vapor::Vector3 *arg2 = 0 ;
  vapor::Vector3 result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"vapor::Matrix4x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3___mul",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Matrix4x3___mul",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = ((vapor::Matrix4x3 const *)arg1)->operator *((vapor::Vector3 const &)*arg2);
  {
    vapor::Vector3 * resultptr = new vapor::Vector3((const vapor::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3___mul__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  vapor::Matrix4x3 *arg2 = 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("operator *",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("operator *",1,"vapor::Matrix4x3 const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("operator *",2,"vapor::Matrix4x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3___mul",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3___mul",2,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = ((vapor::Matrix4x3 const *)arg1)->operator *((vapor::Matrix4x3 const &)*arg2);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3___mul(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Matrix4x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x3___mul__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Matrix4x3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Matrix4x3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Matrix4x3___mul__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Matrix4x3___mul'\n"
    "  Possible C/C++ prototypes are:\n"
    "    operator *(vapor::Matrix4x3 const *,vapor::Vector3 const &)\n"
    "    operator *(vapor::Matrix4x3 const *,vapor::Matrix4x3 const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Matrix4x3_lerp(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = 0 ;
  vapor::Matrix4x3 *arg2 = 0 ;
  float arg3 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::lerp",3,3)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Matrix4x3::lerp",1,"vapor::Matrix4x3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vapor::Matrix4x3::lerp",2,"vapor::Matrix4x3 const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("vapor::Matrix4x3::lerp",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_lerp",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_lerp",2,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg3 = (float)lua_tonumber(L, 3);
  result = vapor::Matrix4x3::lerp((vapor::Matrix4x3 const &)*arg1,(vapor::Matrix4x3 const &)*arg2,arg3);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_createTranslation(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Vector3 *arg1 = 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::createTranslation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Matrix4x3::createTranslation",1,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Matrix4x3_createTranslation",1,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = vapor::Matrix4x3::createTranslation((vapor::Vector3 const &)*arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_createRotation(lua_State* L) {
  int SWIG_arg = 0;
  vapor::EulerAngles *arg1 = 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::createRotation",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Matrix4x3::createRotation",1,"vapor::EulerAngles const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__EulerAngles,0))){
    SWIG_fail_ptr("Matrix4x3_createRotation",1,SWIGTYPE_p_vapor__EulerAngles);
  }
  
  result = vapor::Matrix4x3::createRotation((vapor::EulerAngles const &)*arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_createScale(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Vector3 *arg1 = 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::createScale",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Matrix4x3::createScale",1,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Matrix4x3_createScale",1,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = vapor::Matrix4x3::createScale((vapor::Vector3 const &)*arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_createFromQuaternion(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Quaternion *arg1 = 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::createFromQuaternion",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Matrix4x3::createFromQuaternion",1,"vapor::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Matrix4x3_createFromQuaternion",1,SWIGTYPE_p_vapor__Quaternion);
  }
  
  result = vapor::Matrix4x3::createFromQuaternion((vapor::Quaternion const &)*arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_rotateX(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::rotateX",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Matrix4x3::rotateX",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = vapor::Matrix4x3::rotateX(arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_rotateY(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::rotateY",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Matrix4x3::rotateY",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = vapor::Matrix4x3::rotateY(arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_rotateZ(lua_State* L) {
  int SWIG_arg = 0;
  float arg1 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("vapor::Matrix4x3::rotateZ",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Matrix4x3::rotateZ",1,"float");
  arg1 = (float)lua_tonumber(L, 1);
  result = vapor::Matrix4x3::rotateZ(arg1);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m11_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m11",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m11",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m11",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m11_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m11 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m11_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m11",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m11",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m11_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m11);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m12_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m12",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m12",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m12",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m12_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m12 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m12_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m12",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m12",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m12_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m12);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m13_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m13",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m13",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m13",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m13_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m13 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m13_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m13",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m13",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m13_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m13);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m21_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m21",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m21",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m21",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m21_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m21 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m21_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m21",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m21",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m21_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m21);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m22_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m22",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m22",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m22",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m22_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m22 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m22_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m22",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m22",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m22_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m22);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m23_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m23",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m23",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m23",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m23_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m23 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m23_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m23",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m23",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m23_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m23);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m31_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m31",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m31",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m31",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m31_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m31 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m31_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m31",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m31",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m31_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m31);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m32_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m32",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m32",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m32",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m32_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m32 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m32_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m32",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m32",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m32_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m32);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m33_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("m33",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m33",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("m33",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m33_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->m33 = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_m33_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("m33",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("m33",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_m33_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->m33);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_tx_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("tx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tx",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tx",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_tx_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_tx_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("tx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tx",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_tx_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->tx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_ty_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("ty",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ty",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("ty",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_ty_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->ty = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_ty_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("ty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ty",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_ty_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->ty);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_tz_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("tz",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tz",1,"vapor::Matrix4x3 *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("tz",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_tz_set",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->tz = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_tz_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) 0 ;
  float result;
  
  SWIG_check_num_args("tz",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("tz",1,"vapor::Matrix4x3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Matrix4x3_tz_get",1,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = (float) ((arg1)->tz);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Matrix4x3_Identity_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Matrix4x3 *result = 0 ;
  
  SWIG_check_num_args("vapor::Matrix4x3::Identity",0,0)
  result = (vapor::Matrix4x3 *)&vapor::Matrix4x3::Identity;
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Matrix4x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Matrix4x3(void *obj) {
vapor::Matrix4x3 *arg1 = (vapor::Matrix4x3 *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Matrix4x3_methods[] = {
    {"identity", _wrap_Matrix4x3_identity}, 
    {"determinant", _wrap_Matrix4x3_determinant}, 
    {"inverse", _wrap_Matrix4x3_inverse}, 
    {"__mul", _wrap_Matrix4x3___mul}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Matrix4x3_attributes[] = {
    { "m11", _wrap_Matrix4x3_m11_get, _wrap_Matrix4x3_m11_set},
    { "m12", _wrap_Matrix4x3_m12_get, _wrap_Matrix4x3_m12_set},
    { "m13", _wrap_Matrix4x3_m13_get, _wrap_Matrix4x3_m13_set},
    { "m21", _wrap_Matrix4x3_m21_get, _wrap_Matrix4x3_m21_set},
    { "m22", _wrap_Matrix4x3_m22_get, _wrap_Matrix4x3_m22_set},
    { "m23", _wrap_Matrix4x3_m23_get, _wrap_Matrix4x3_m23_set},
    { "m31", _wrap_Matrix4x3_m31_get, _wrap_Matrix4x3_m31_set},
    { "m32", _wrap_Matrix4x3_m32_get, _wrap_Matrix4x3_m32_set},
    { "m33", _wrap_Matrix4x3_m33_get, _wrap_Matrix4x3_m33_set},
    { "tx", _wrap_Matrix4x3_tx_get, _wrap_Matrix4x3_tx_set},
    { "ty", _wrap_Matrix4x3_ty_get, _wrap_Matrix4x3_ty_set},
    { "tz", _wrap_Matrix4x3_tz_get, _wrap_Matrix4x3_tz_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Matrix4x3_bases[] = {0};
static const char *swig_vapor_Matrix4x3_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Matrix4x3 = { "Matrix4x3", &SWIGTYPE_p_vapor__Matrix4x3,_wrap_new_Matrix4x3, swig_delete_Matrix4x3, swig_vapor_Matrix4x3_methods, swig_vapor_Matrix4x3_attributes, swig_vapor_Matrix4x3_bases, swig_vapor_Matrix4x3_base_names };

static int _wrap_new_BoundingBox__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("vapor::BoundingBox",0,0)
  result = (vapor::BoundingBox *)new vapor::BoundingBox();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Vector3 *arg1 = 0 ;
  vapor::Vector3 *arg2 = 0 ;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("vapor::BoundingBox",2,2)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::BoundingBox",1,"vapor::Vector3 const &");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("vapor::BoundingBox",2,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("new_BoundingBox",1,SWIGTYPE_p_vapor__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("new_BoundingBox",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = (vapor::BoundingBox *)new vapor::BoundingBox((vapor::Vector3 const &)*arg1,(vapor::Vector3 const &)*arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = 0 ;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("vapor::BoundingBox",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::BoundingBox",1,"vapor::BoundingBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("new_BoundingBox",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  result = (vapor::BoundingBox *)new vapor::BoundingBox((vapor::BoundingBox const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_BoundingBox(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_BoundingBox__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__BoundingBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_BoundingBox__SWIG_2(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_new_BoundingBox__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_BoundingBox'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::BoundingBox()\n"
    "    vapor::BoundingBox(vapor::Vector3 const &,vapor::Vector3 const &)\n"
    "    vapor::BoundingBox(vapor::BoundingBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BoundingBox_add__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"vapor::BoundingBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("add",2,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_add",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("BoundingBox_add",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  (arg1)->add((vapor::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_add__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::BoundingBox *arg2 = 0 ;
  
  SWIG_check_num_args("add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"vapor::BoundingBox *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("add",2,"vapor::BoundingBox const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_add",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_add",2,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  (arg1)->add((vapor::BoundingBox const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_add(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__BoundingBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoundingBox_add__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__BoundingBox, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__BoundingBox, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_BoundingBox_add__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'BoundingBox_add'\n"
    "  Possible C/C++ prototypes are:\n"
    "    add(vapor::BoundingBox *,vapor::Vector3 const &)\n"
    "    add(vapor::BoundingBox *,vapor::BoundingBox const &)\n");
  lua_error(L);return 0;
}


static int _wrap_BoundingBox_reset(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  
  SWIG_check_num_args("reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reset",1,"vapor::BoundingBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_reset",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_setZero(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  
  SWIG_check_num_args("setZero",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setZero",1,"vapor::BoundingBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_setZero",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  (arg1)->setZero();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_isInfinite(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  bool result;
  
  SWIG_check_num_args("isInfinite",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isInfinite",1,"vapor::BoundingBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_isInfinite",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  result = (bool)((vapor::BoundingBox const *)arg1)->isInfinite();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_getCenter(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Vector3 result;
  
  SWIG_check_num_args("getCenter",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCenter",1,"vapor::BoundingBox const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_getCenter",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  result = ((vapor::BoundingBox const *)arg1)->getCenter();
  {
    vapor::Vector3 * resultptr = new vapor::Vector3((const vapor::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_getCorner(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  int arg2 ;
  vapor::Vector3 result;
  
  SWIG_check_num_args("getCorner",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCorner",1,"vapor::BoundingBox const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getCorner",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_getCorner",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = ((vapor::BoundingBox const *)arg1)->getCorner(arg2);
  {
    vapor::Vector3 * resultptr = new vapor::Vector3((const vapor::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_intersects(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Ray *arg2 = 0 ;
  float *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("intersects",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersects",1,"vapor::BoundingBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("intersects",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("intersects",3,"float &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_intersects",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("BoundingBox_intersects",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_float,0))){
    SWIG_fail_ptr("BoundingBox_intersects",3,SWIGTYPE_p_float);
  }
  
  result = (bool)((vapor::BoundingBox const *)arg1)->intersects((vapor::Ray const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_transform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Matrix4x3 *arg2 = 0 ;
  vapor::BoundingBox result;
  
  SWIG_check_num_args("transform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("transform",1,"vapor::BoundingBox const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("transform",2,"vapor::Matrix4x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_transform",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("BoundingBox_transform",2,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  result = ((vapor::BoundingBox const *)arg1)->transform((vapor::Matrix4x3 const &)*arg2);
  {
    vapor::BoundingBox * resultptr = new vapor::BoundingBox((const vapor::BoundingBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__BoundingBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_min_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Vector3 *arg2 = (vapor::Vector3 *) 0 ;
  
  SWIG_check_num_args("min",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("min",1,"vapor::BoundingBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("min",2,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_min_set",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("BoundingBox_min_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  if (arg1) (arg1)->min = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_min_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("min",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("min",1,"vapor::BoundingBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_min_get",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  result = (vapor::Vector3 *)& ((arg1)->min);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_max_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Vector3 *arg2 = (vapor::Vector3 *) 0 ;
  
  SWIG_check_num_args("max",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("max",1,"vapor::BoundingBox *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("max",2,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_max_set",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("BoundingBox_max_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  if (arg1) (arg1)->max = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_BoundingBox_max_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::BoundingBox *arg1 = (vapor::BoundingBox *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("max",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("max",1,"vapor::BoundingBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("BoundingBox_max_get",1,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  result = (vapor::Vector3 *)& ((arg1)->max);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_BoundingBox(void *obj) {
vapor::BoundingBox *arg1 = (vapor::BoundingBox *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_BoundingBox_methods[] = {
    {"add", _wrap_BoundingBox_add}, 
    {"reset", _wrap_BoundingBox_reset}, 
    {"setZero", _wrap_BoundingBox_setZero}, 
    {"isInfinite", _wrap_BoundingBox_isInfinite}, 
    {"getCenter", _wrap_BoundingBox_getCenter}, 
    {"getCorner", _wrap_BoundingBox_getCorner}, 
    {"intersects", _wrap_BoundingBox_intersects}, 
    {"transform", _wrap_BoundingBox_transform}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_BoundingBox_attributes[] = {
    { "min", _wrap_BoundingBox_min_get, _wrap_BoundingBox_min_set},
    { "max", _wrap_BoundingBox_max_get, _wrap_BoundingBox_max_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_BoundingBox_bases[] = {0};
static const char *swig_vapor_BoundingBox_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_BoundingBox = { "BoundingBox", &SWIGTYPE_p_vapor__BoundingBox,_wrap_new_BoundingBox, swig_delete_BoundingBox, swig_vapor_BoundingBox_methods, swig_vapor_BoundingBox_attributes, swig_vapor_BoundingBox_bases, swig_vapor_BoundingBox_base_names };

static int _wrap_MeshMaterial_name_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("name",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"vapor::MeshMaterial *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("name",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshMaterial_name_set",1,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->name = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMaterial_name_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("name",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("name",1,"vapor::MeshMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshMaterial_name_get",1,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  result = (std::string *) & ((arg1)->name);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMaterial_texture_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("texture",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("texture",1,"vapor::MeshMaterial *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("texture",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshMaterial_texture_set",1,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  if (arg1) (arg1)->texture = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMaterial_texture_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("texture",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("texture",1,"vapor::MeshMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshMaterial_texture_get",1,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  result = (std::string *) & ((arg1)->texture);
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMaterial_alpha_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("alpha",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("alpha",1,"vapor::MeshMaterial *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("alpha",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshMaterial_alpha_set",1,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->alpha = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshMaterial_alpha_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) 0 ;
  bool result;
  
  SWIG_check_num_args("alpha",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("alpha",1,"vapor::MeshMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshMaterial_alpha_get",1,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  result = (bool) ((arg1)->alpha);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MeshMaterial(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshMaterial *result = 0 ;
  
  SWIG_check_num_args("vapor::MeshMaterial::MeshMaterial",0,0)
  result = (vapor::MeshMaterial *)new vapor::MeshMaterial();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MeshMaterial,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MeshMaterial(void *obj) {
vapor::MeshMaterial *arg1 = (vapor::MeshMaterial *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MeshMaterial_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MeshMaterial_attributes[] = {
    { "name", _wrap_MeshMaterial_name_get, _wrap_MeshMaterial_name_set},
    { "texture", _wrap_MeshMaterial_texture_get, _wrap_MeshMaterial_texture_set},
    { "alpha", _wrap_MeshMaterial_alpha_get, _wrap_MeshMaterial_alpha_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_MeshMaterial_bases[] = {0};
static const char *swig_vapor_MeshMaterial_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_MeshMaterial = { "MeshMaterial", &SWIGTYPE_p_vapor__MeshMaterial,_wrap_new_MeshMaterial, swig_delete_MeshMaterial, swig_vapor_MeshMaterial_methods, swig_vapor_MeshMaterial_attributes, swig_vapor_MeshMaterial_bases, swig_vapor_MeshMaterial_base_names };

static int _wrap_MeshGroup_indices_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshGroup *arg1 = (vapor::MeshGroup *) 0 ;
  std::vector< uint16 > *arg2 = (std::vector< uint16 > *) 0 ;
  
  SWIG_check_num_args("indices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("indices",1,"vapor::MeshGroup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("indices",2,"std::vector< uint16 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshGroup,0))){
    SWIG_fail_ptr("MeshGroup_indices_set",1,SWIGTYPE_p_vapor__MeshGroup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_unsigned_short_t,0))){
    SWIG_fail_ptr("MeshGroup_indices_set",2,SWIGTYPE_p_std__vectorT_unsigned_short_t);
  }
  
  if (arg1) (arg1)->indices = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshGroup_indices_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshGroup *arg1 = (vapor::MeshGroup *) 0 ;
  std::vector< uint16 > *result = 0 ;
  
  SWIG_check_num_args("indices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("indices",1,"vapor::MeshGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshGroup,0))){
    SWIG_fail_ptr("MeshGroup_indices_get",1,SWIGTYPE_p_vapor__MeshGroup);
  }
  
  result = (std::vector< uint16 > *)& ((arg1)->indices);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_unsigned_short_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshGroup_material_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshGroup *arg1 = (vapor::MeshGroup *) 0 ;
  vapor::MeshMaterial *arg2 = (vapor::MeshMaterial *) 0 ;
  
  SWIG_check_num_args("material",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("material",1,"vapor::MeshGroup *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("material",2,"vapor::MeshMaterial *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshGroup,0))){
    SWIG_fail_ptr("MeshGroup_material_set",1,SWIGTYPE_p_vapor__MeshGroup);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__MeshMaterial,0))){
    SWIG_fail_ptr("MeshGroup_material_set",2,SWIGTYPE_p_vapor__MeshMaterial);
  }
  
  if (arg1) (arg1)->material = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MeshGroup_material_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshGroup *arg1 = (vapor::MeshGroup *) 0 ;
  vapor::MeshMaterial *result = 0 ;
  
  SWIG_check_num_args("material",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("material",1,"vapor::MeshGroup *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MeshGroup,0))){
    SWIG_fail_ptr("MeshGroup_material_get",1,SWIGTYPE_p_vapor__MeshGroup);
  }
  
  result = (vapor::MeshMaterial *)& ((arg1)->material);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MeshMaterial,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_MeshGroup(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshGroup *result = 0 ;
  
  SWIG_check_num_args("vapor::MeshGroup::MeshGroup",0,0)
  result = (vapor::MeshGroup *)new vapor::MeshGroup();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MeshGroup,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MeshGroup(void *obj) {
vapor::MeshGroup *arg1 = (vapor::MeshGroup *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MeshGroup_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MeshGroup_attributes[] = {
    { "indices", _wrap_MeshGroup_indices_get, _wrap_MeshGroup_indices_set},
    { "material", _wrap_MeshGroup_material_get, _wrap_MeshGroup_material_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_MeshGroup_bases[] = {0};
static const char *swig_vapor_MeshGroup_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_MeshGroup = { "MeshGroup", &SWIGTYPE_p_vapor__MeshGroup,_wrap_new_MeshGroup, swig_delete_MeshGroup, swig_vapor_MeshGroup_methods, swig_vapor_MeshGroup_attributes, swig_vapor_MeshGroup_bases, swig_vapor_MeshGroup_base_names };

static int _wrap_new_Mesh(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *result = 0 ;
  
  SWIG_check_num_args("vapor::Mesh",0,0)
  result = (vapor::Mesh *)new vapor::Mesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Mesh,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_isBuilt(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("isBuilt",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isBuilt",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_isBuilt",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (bool)((vapor::Mesh const *)arg1)->isBuilt();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_isAnimated(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("isAnimated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isAnimated",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_isAnimated",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (bool)((vapor::Mesh const *)arg1)->isAnimated();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getSkeleton(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  SkeletonPtr result;
  
  SWIG_check_num_args("getSkeleton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSkeleton",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_getSkeleton",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = ((vapor::Mesh const *)arg1)->getSkeleton();
  {
    SkeletonPtr * resultptr = new SkeletonPtr((const SkeletonPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SkeletonPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getBindPose(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  SwigValueWrapper< vapor::RefPtr< vapor::Animation > > result;
  
  SWIG_check_num_args("getBindPose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBindPose",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_getBindPose",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = ((vapor::Mesh const *)arg1)->getBindPose();
  {
    vapor::AnimationPtr * resultptr = new vapor::AnimationPtr((const vapor::AnimationPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_findAnimation(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< vapor::RefPtr< vapor::Animation > > result;
  
  SWIG_check_num_args("findAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findAnimation",1,"vapor::Mesh *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findAnimation",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_findAnimation",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = (arg1)->findAnimation((std::string const &)*arg2);
  {
    vapor::AnimationPtr * resultptr = new vapor::AnimationPtr((const vapor::AnimationPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getBoundingVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("getBoundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundingVolume",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_getBoundingVolume",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (vapor::BoundingBox *) &((vapor::Mesh const *)arg1)->getBoundingVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getAnimations(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::AnimationPtr > *result = 0 ;
  
  SWIG_check_num_args("getAnimations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAnimations",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_getAnimations",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< vapor::AnimationPtr > *) &((vapor::Mesh const *)arg1)->getAnimations();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_getResourceGroup(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  vapor::ResourceGroup::Enum result;
  
  SWIG_check_num_args("getResourceGroup",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getResourceGroup",1,"vapor::Mesh const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_getResourceGroup",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (vapor::ResourceGroup::Enum)((vapor::Mesh const *)arg1)->getResourceGroup();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_setupInitialVertices(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  
  SWIG_check_num_args("setupInitialVertices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setupInitialVertices",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_setupInitialVertices",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  (arg1)->setupInitialVertices();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_buildBounds(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  
  SWIG_check_num_args("buildBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("buildBounds",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_buildBounds",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  (arg1)->buildBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_animated_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("animated",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("animated",1,"vapor::Mesh *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("animated",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_animated_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->animated = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_animated_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("animated",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("animated",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_animated_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (bool) ((arg1)->animated);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_skeleton_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  SkeletonPtr arg2 ;
  SkeletonPtr *argp2 ;
  
  SWIG_check_num_args("skeleton",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skeleton",1,"vapor::Mesh *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("skeleton",2,"SkeletonPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_skeleton_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_SkeletonPtr,0))){
    SWIG_fail_ptr("Mesh_skeleton_set",2,SWIGTYPE_p_SkeletonPtr);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->skeleton = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_skeleton_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  SkeletonPtr result;
  
  SWIG_check_num_args("skeleton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("skeleton",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_skeleton_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result =  ((arg1)->skeleton);
  {
    SkeletonPtr * resultptr = new SkeletonPtr((const SkeletonPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_SkeletonPtr,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_bindPose_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  vapor::AnimationPtr *arg2 = (vapor::AnimationPtr *) 0 ;
  
  SWIG_check_num_args("bindPose",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bindPose",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("bindPose",2,"vapor::AnimationPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_bindPose_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t,0))){
    SWIG_fail_ptr("Mesh_bindPose_set",2,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t);
  }
  
  if (arg1) (arg1)->bindPose = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_bindPose_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  vapor::AnimationPtr *result = 0 ;
  
  SWIG_check_num_args("bindPose",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("bindPose",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_bindPose_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (vapor::AnimationPtr *)& ((arg1)->bindPose);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_animations_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::AnimationPtr > *arg2 = (std::vector< vapor::AnimationPtr > *) 0 ;
  
  SWIG_check_num_args("animations",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("animations",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("animations",2,"std::vector< vapor::AnimationPtr > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_animations_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t,0))){
    SWIG_fail_ptr("Mesh_animations_set",2,SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t);
  }
  
  if (arg1) (arg1)->animations = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_animations_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::AnimationPtr > *result = 0 ;
  
  SWIG_check_num_args("animations",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("animations",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_animations_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< vapor::AnimationPtr > *)& ((arg1)->animations);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_groups_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::MeshGroup > *arg2 = (std::vector< vapor::MeshGroup > *) 0 ;
  
  SWIG_check_num_args("groups",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("groups",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("groups",2,"std::vector< vapor::MeshGroup > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_groups_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_vapor__MeshGroup_t,0))){
    SWIG_fail_ptr("Mesh_groups_set",2,SWIGTYPE_p_std__vectorT_vapor__MeshGroup_t);
  }
  
  if (arg1) (arg1)->groups = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_groups_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::MeshGroup > *result = 0 ;
  
  SWIG_check_num_args("groups",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("groups",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_groups_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< vapor::MeshGroup > *)& ((arg1)->groups);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_vapor__MeshGroup_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_boundingVolume_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  vapor::BoundingBox *arg2 = (vapor::BoundingBox *) 0 ;
  
  SWIG_check_num_args("boundingVolume",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boundingVolume",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boundingVolume",2,"vapor::BoundingBox *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_boundingVolume_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__BoundingBox,0))){
    SWIG_fail_ptr("Mesh_boundingVolume_set",2,SWIGTYPE_p_vapor__BoundingBox);
  }
  
  if (arg1) (arg1)->boundingVolume = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_boundingVolume_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("boundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boundingVolume",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_boundingVolume_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (vapor::BoundingBox *)& ((arg1)->boundingVolume);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_position_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::Vector3 > *arg2 = (std::vector< vapor::Vector3 > *) 0 ;
  
  SWIG_check_num_args("position",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("position",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("position",2,"std::vector< vapor::Vector3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_position_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_vapor__Vector3_t,0))){
    SWIG_fail_ptr("Mesh_position_set",2,SWIGTYPE_p_std__vectorT_vapor__Vector3_t);
  }
  
  if (arg1) (arg1)->position = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_position_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::Vector3 > *result = 0 ;
  
  SWIG_check_num_args("position",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("position",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_position_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< vapor::Vector3 > *)& ((arg1)->position);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_vapor__Vector3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_normals_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::Vector3 > *arg2 = (std::vector< vapor::Vector3 > *) 0 ;
  
  SWIG_check_num_args("normals",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normals",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("normals",2,"std::vector< vapor::Vector3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_normals_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_vapor__Vector3_t,0))){
    SWIG_fail_ptr("Mesh_normals_set",2,SWIGTYPE_p_std__vectorT_vapor__Vector3_t);
  }
  
  if (arg1) (arg1)->normals = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_normals_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::Vector3 > *result = 0 ;
  
  SWIG_check_num_args("normals",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("normals",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_normals_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< vapor::Vector3 > *)& ((arg1)->normals);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_vapor__Vector3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_texCoords_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::Vector3 > *arg2 = (std::vector< vapor::Vector3 > *) 0 ;
  
  SWIG_check_num_args("texCoords",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("texCoords",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("texCoords",2,"std::vector< vapor::Vector3 > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_texCoords_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_vapor__Vector3_t,0))){
    SWIG_fail_ptr("Mesh_texCoords_set",2,SWIGTYPE_p_std__vectorT_vapor__Vector3_t);
  }
  
  if (arg1) (arg1)->texCoords = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_texCoords_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< vapor::Vector3 > *result = 0 ;
  
  SWIG_check_num_args("texCoords",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("texCoords",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_texCoords_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< vapor::Vector3 > *)& ((arg1)->texCoords);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_vapor__Vector3_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_boneIndices_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< float > *arg2 = (std::vector< float > *) 0 ;
  
  SWIG_check_num_args("boneIndices",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneIndices",1,"vapor::Mesh *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("boneIndices",2,"std::vector< float > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_boneIndices_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__vectorT_float_t,0))){
    SWIG_fail_ptr("Mesh_boneIndices_set",2,SWIGTYPE_p_std__vectorT_float_t);
  }
  
  if (arg1) (arg1)->boneIndices = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_boneIndices_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  std::vector< float > *result = 0 ;
  
  SWIG_check_num_args("boneIndices",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("boneIndices",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_boneIndices_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (std::vector< float > *)& ((arg1)->boneIndices);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_float_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_built_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("built",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("built",1,"vapor::Mesh *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("built",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_built_set",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->built = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Mesh_built_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Mesh *arg1 = (vapor::Mesh *) 0 ;
  bool result;
  
  SWIG_check_num_args("built",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("built",1,"vapor::Mesh *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Mesh,0))){
    SWIG_fail_ptr("Mesh_built_get",1,SWIGTYPE_p_vapor__Mesh);
  }
  
  result = (bool) ((arg1)->built);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Mesh(void *obj) {
vapor::Mesh *arg1 = (vapor::Mesh *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Mesh_methods[] = {
    {"isBuilt", _wrap_Mesh_isBuilt}, 
    {"isAnimated", _wrap_Mesh_isAnimated}, 
    {"getSkeleton", _wrap_Mesh_getSkeleton}, 
    {"getBindPose", _wrap_Mesh_getBindPose}, 
    {"findAnimation", _wrap_Mesh_findAnimation}, 
    {"getBoundingVolume", _wrap_Mesh_getBoundingVolume}, 
    {"getAnimations", _wrap_Mesh_getAnimations}, 
    {"getResourceGroup", _wrap_Mesh_getResourceGroup}, 
    {"setupInitialVertices", _wrap_Mesh_setupInitialVertices}, 
    {"buildBounds", _wrap_Mesh_buildBounds}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Mesh_attributes[] = {
    { "animated", _wrap_Mesh_animated_get, _wrap_Mesh_animated_set},
    { "skeleton", _wrap_Mesh_skeleton_get, _wrap_Mesh_skeleton_set},
    { "bindPose", _wrap_Mesh_bindPose_get, _wrap_Mesh_bindPose_set},
    { "animations", _wrap_Mesh_animations_get, _wrap_Mesh_animations_set},
    { "groups", _wrap_Mesh_groups_get, _wrap_Mesh_groups_set},
    { "boundingVolume", _wrap_Mesh_boundingVolume_get, _wrap_Mesh_boundingVolume_set},
    { "position", _wrap_Mesh_position_get, _wrap_Mesh_position_set},
    { "normals", _wrap_Mesh_normals_get, _wrap_Mesh_normals_set},
    { "texCoords", _wrap_Mesh_texCoords_get, _wrap_Mesh_texCoords_set},
    { "boneIndices", _wrap_Mesh_boneIndices_get, _wrap_Mesh_boneIndices_set},
    { "built", _wrap_Mesh_built_get, _wrap_Mesh_built_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Mesh_bases[] = {0};
static const char *swig_vapor_Mesh_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Mesh = { "Mesh", &SWIGTYPE_p_vapor__Mesh,_wrap_new_Mesh, swig_delete_Mesh, swig_vapor_Mesh_methods, swig_vapor_Mesh_attributes, swig_vapor_Mesh_bases, swig_vapor_Mesh_base_names };

static int _wrap_new_Keys(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Keys *result = 0 ;
  
  SWIG_check_num_args("vapor::Keys::Keys",0,0)
  result = (vapor::Keys *)new vapor::Keys();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Keys,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Keys(void *obj) {
vapor::Keys *arg1 = (vapor::Keys *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Keys_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_Keys_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Keys_bases[] = {0};
static const char *swig_vapor_Keys_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Keys = { "Keys", &SWIGTYPE_p_vapor__Keys,_wrap_new_Keys, swig_delete_Keys, swig_vapor_Keys_methods, swig_vapor_Keys_attributes, swig_vapor_Keys_bases, swig_vapor_Keys_base_names };

static int _wrap_new_KeyboardEventType(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyboardEventType *result = 0 ;
  
  SWIG_check_num_args("vapor::KeyboardEventType::KeyboardEventType",0,0)
  result = (vapor::KeyboardEventType *)new vapor::KeyboardEventType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__KeyboardEventType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KeyboardEventType(void *obj) {
vapor::KeyboardEventType *arg1 = (vapor::KeyboardEventType *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_KeyboardEventType_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_KeyboardEventType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_KeyboardEventType_bases[] = {0};
static const char *swig_vapor_KeyboardEventType_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_KeyboardEventType = { "KeyboardEventType", &SWIGTYPE_p_vapor__KeyboardEventType,_wrap_new_KeyboardEventType, swig_delete_KeyboardEventType, swig_vapor_KeyboardEventType_methods, swig_vapor_KeyboardEventType_attributes, swig_vapor_KeyboardEventType_bases, swig_vapor_KeyboardEventType_base_names };

static int _wrap_new_KeyEvent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Keys::Enum arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  vapor::KeyboardEventType::Enum arg5 ;
  vapor::KeyEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::KeyEvent",5,5)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::KeyEvent",1,"vapor::Keys::Enum");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("vapor::KeyEvent",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("vapor::KeyEvent",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("vapor::KeyEvent",4,"bool");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("vapor::KeyEvent",5,"vapor::KeyboardEventType::Enum");
  arg1 = (vapor::Keys::Enum)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  arg5 = (vapor::KeyboardEventType::Enum)(int)lua_tonumber(L, 5);
  result = (vapor::KeyEvent *)new vapor::KeyEvent(arg1,arg2,arg3,arg4,arg5);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__KeyEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyEvent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Keys::Enum arg1 ;
  bool arg2 ;
  bool arg3 ;
  bool arg4 ;
  vapor::KeyEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::KeyEvent",4,4)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::KeyEvent",1,"vapor::Keys::Enum");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("vapor::KeyEvent",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("vapor::KeyEvent",3,"bool");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("vapor::KeyEvent",4,"bool");
  arg1 = (vapor::Keys::Enum)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (vapor::KeyEvent *)new vapor::KeyEvent(arg1,arg2,arg3,arg4);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__KeyEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyEvent__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Keys::Enum arg1 ;
  bool arg2 ;
  bool arg3 ;
  vapor::KeyEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::KeyEvent",3,3)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::KeyEvent",1,"vapor::Keys::Enum");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("vapor::KeyEvent",2,"bool");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("vapor::KeyEvent",3,"bool");
  arg1 = (vapor::Keys::Enum)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  arg3 = (lua_toboolean(L, 3)!=0);
  result = (vapor::KeyEvent *)new vapor::KeyEvent(arg1,arg2,arg3);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__KeyEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyEvent__SWIG_3(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Keys::Enum arg1 ;
  bool arg2 ;
  vapor::KeyEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::KeyEvent",2,2)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::KeyEvent",1,"vapor::Keys::Enum");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("vapor::KeyEvent",2,"bool");
  arg1 = (vapor::Keys::Enum)(int)lua_tonumber(L, 1);
  arg2 = (lua_toboolean(L, 2)!=0);
  result = (vapor::KeyEvent *)new vapor::KeyEvent(arg1,arg2);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__KeyEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyEvent__SWIG_4(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Keys::Enum arg1 ;
  vapor::KeyEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::KeyEvent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::KeyEvent",1,"vapor::Keys::Enum");
  arg1 = (vapor::Keys::Enum)(int)lua_tonumber(L, 1);
  result = (vapor::KeyEvent *)new vapor::KeyEvent(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__KeyEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_KeyEvent(lua_State* L) {
  int argc;
  int argv[6]={
    1,2,3,4,5,6
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_KeyEvent__SWIG_4(L);
    }
  }
  if (argc == 2) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        return _wrap_new_KeyEvent__SWIG_3(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_new_KeyEvent__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_new_KeyEvent__SWIG_1(L);
          }
        }
      }
    }
  }
  if (argc == 5) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      {
        _v = lua_isboolean(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            {
              _v = lua_isnumber(L,argv[4]);
            }
            if (_v) {
              return _wrap_new_KeyEvent__SWIG_0(L);
            }
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_KeyEvent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::KeyEvent(vapor::Keys::Enum,bool,bool,bool,vapor::KeyboardEventType::Enum)\n"
    "    vapor::KeyEvent(vapor::Keys::Enum,bool,bool,bool)\n"
    "    vapor::KeyEvent(vapor::Keys::Enum,bool,bool)\n"
    "    vapor::KeyEvent(vapor::Keys::Enum,bool)\n"
    "    vapor::KeyEvent(vapor::Keys::Enum)\n");
  lua_error(L);return 0;
}


static int _wrap_KeyEvent_keyCode_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  vapor::Keys::Enum arg2 ;
  
  SWIG_check_num_args("keyCode",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("keyCode",1,"vapor::KeyEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("keyCode",2,"vapor::Keys::Enum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_keyCode_set",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  arg2 = (vapor::Keys::Enum)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->keyCode = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_keyCode_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  vapor::Keys::Enum result;
  
  SWIG_check_num_args("keyCode",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("keyCode",1,"vapor::KeyEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_keyCode_get",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  result = (vapor::Keys::Enum) ((arg1)->keyCode);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_altPressed_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("altPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("altPressed",1,"vapor::KeyEvent *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("altPressed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_altPressed_set",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->altPressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_altPressed_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("altPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("altPressed",1,"vapor::KeyEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_altPressed_get",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  result = (bool) ((arg1)->altPressed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_shiftPressed_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("shiftPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shiftPressed",1,"vapor::KeyEvent *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("shiftPressed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_shiftPressed_set",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->shiftPressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_shiftPressed_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("shiftPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("shiftPressed",1,"vapor::KeyEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_shiftPressed_get",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  result = (bool) ((arg1)->shiftPressed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_ctrlPressed_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("ctrlPressed",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ctrlPressed",1,"vapor::KeyEvent *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("ctrlPressed",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_ctrlPressed_set",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  if (arg1) (arg1)->ctrlPressed = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_KeyEvent_ctrlPressed_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::KeyEvent *arg1 = (vapor::KeyEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("ctrlPressed",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("ctrlPressed",1,"vapor::KeyEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__KeyEvent,0))){
    SWIG_fail_ptr("KeyEvent_ctrlPressed_get",1,SWIGTYPE_p_vapor__KeyEvent);
  }
  
  result = (bool) ((arg1)->ctrlPressed);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_KeyEvent(void *obj) {
vapor::KeyEvent *arg1 = (vapor::KeyEvent *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_KeyEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_KeyEvent_attributes[] = {
    { "keyCode", _wrap_KeyEvent_keyCode_get, _wrap_KeyEvent_keyCode_set},
    { "altPressed", _wrap_KeyEvent_altPressed_get, _wrap_KeyEvent_altPressed_set},
    { "shiftPressed", _wrap_KeyEvent_shiftPressed_get, _wrap_KeyEvent_shiftPressed_set},
    { "ctrlPressed", _wrap_KeyEvent_ctrlPressed_get, _wrap_KeyEvent_ctrlPressed_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_KeyEvent_bases[] = {0};
static const char *swig_vapor_KeyEvent_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_KeyEvent = { "KeyEvent", &SWIGTYPE_p_vapor__KeyEvent,_wrap_new_KeyEvent, swig_delete_KeyEvent, swig_vapor_KeyEvent_methods, swig_vapor_KeyEvent_attributes, swig_vapor_KeyEvent_bases, swig_vapor_KeyEvent_base_names };

static int _wrap_new_MouseButton(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButton *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseButton::MouseButton",0,0)
  result = (vapor::MouseButton *)new vapor::MouseButton();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseButton,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseButton(void *obj) {
vapor::MouseButton *arg1 = (vapor::MouseButton *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseButton_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseButton_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseButton_bases[] = {0};
static const char *swig_vapor_MouseButton_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_MouseButton = { "MouseButton", &SWIGTYPE_p_vapor__MouseButton,_wrap_new_MouseButton, swig_delete_MouseButton, swig_vapor_MouseButton_methods, swig_vapor_MouseButton_attributes, swig_vapor_MouseButton_bases, swig_vapor_MouseButton_base_names };

static int _wrap_new_MouseEventType(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseEventType *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseEventType::MouseEventType",0,0)
  result = (vapor::MouseEventType *)new vapor::MouseEventType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseEventType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseEventType(void *obj) {
vapor::MouseEventType *arg1 = (vapor::MouseEventType *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseEventType_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseEventType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseEventType_bases[] = {0};
static const char *swig_vapor_MouseEventType_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_MouseEventType = { "MouseEventType", &SWIGTYPE_p_vapor__MouseEventType,_wrap_new_MouseEventType, swig_delete_MouseEventType, swig_vapor_MouseEventType_methods, swig_vapor_MouseEventType_attributes, swig_vapor_MouseEventType_bases, swig_vapor_MouseEventType_base_names };

static int _wrap_new_MouseEvent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseEventType::Enum arg1 ;
  vapor::MouseEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseEvent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::MouseEvent",1,"vapor::MouseEventType::Enum");
  arg1 = (vapor::MouseEventType::Enum)(int)lua_tonumber(L, 1);
  result = (vapor::MouseEvent *)new vapor::MouseEvent(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseEvent(void *obj) {
vapor::MouseEvent *arg1 = (vapor::MouseEvent *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseEvent_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseEvent_bases[] = {0};
static const char *swig_vapor_MouseEvent_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_MouseEvent = { "MouseEvent", &SWIGTYPE_p_vapor__MouseEvent,_wrap_new_MouseEvent, swig_delete_MouseEvent, swig_vapor_MouseEvent_methods, swig_vapor_MouseEvent_attributes, swig_vapor_MouseEvent_bases, swig_vapor_MouseEvent_base_names };

static int _wrap_new_MouseMoveEvent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseMoveEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseMoveEvent",0,0)
  result = (vapor::MouseMoveEvent *)new vapor::MouseMoveEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseMoveEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseMoveEvent_x_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseMoveEvent *arg1 = (vapor::MouseMoveEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::MouseMoveEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseMoveEvent,0))){
    SWIG_fail_ptr("MouseMoveEvent_x_set",1,SWIGTYPE_p_vapor__MouseMoveEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseMoveEvent_x_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseMoveEvent *arg1 = (vapor::MouseMoveEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::MouseMoveEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseMoveEvent,0))){
    SWIG_fail_ptr("MouseMoveEvent_x_get",1,SWIGTYPE_p_vapor__MouseMoveEvent);
  }
  
  result = (short) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseMoveEvent_y_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseMoveEvent *arg1 = (vapor::MouseMoveEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::MouseMoveEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseMoveEvent,0))){
    SWIG_fail_ptr("MouseMoveEvent_y_set",1,SWIGTYPE_p_vapor__MouseMoveEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseMoveEvent_y_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseMoveEvent *arg1 = (vapor::MouseMoveEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::MouseMoveEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseMoveEvent,0))){
    SWIG_fail_ptr("MouseMoveEvent_y_get",1,SWIGTYPE_p_vapor__MouseMoveEvent);
  }
  
  result = (short) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseMoveEvent(void *obj) {
vapor::MouseMoveEvent *arg1 = (vapor::MouseMoveEvent *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseMoveEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseMoveEvent_attributes[] = {
    { "x", _wrap_MouseMoveEvent_x_get, _wrap_MouseMoveEvent_x_set},
    { "y", _wrap_MouseMoveEvent_y_get, _wrap_MouseMoveEvent_y_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseMoveEvent_bases[] = {0,0};
static const char *swig_vapor_MouseMoveEvent_base_names[] = {"vapor::MouseEvent *",0};
static swig_lua_class _wrap_class_vapor_MouseMoveEvent = { "MouseMoveEvent", &SWIGTYPE_p_vapor__MouseMoveEvent,_wrap_new_MouseMoveEvent, swig_delete_MouseMoveEvent, swig_vapor_MouseMoveEvent_methods, swig_vapor_MouseMoveEvent_attributes, swig_vapor_MouseMoveEvent_bases, swig_vapor_MouseMoveEvent_base_names };

static int _wrap_new_MouseDragEvent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseDragEvent",0,0)
  result = (vapor::MouseDragEvent *)new vapor::MouseDragEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseDragEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_dx_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("dx",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dx",1,"vapor::MouseDragEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dx",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_dx_set",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->dx = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_dx_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("dx",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dx",1,"vapor::MouseDragEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_dx_get",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  result = (short) ((arg1)->dx);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_dy_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("dy",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dy",1,"vapor::MouseDragEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("dy",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_dy_set",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->dy = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_dy_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("dy",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("dy",1,"vapor::MouseDragEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_dy_get",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  result = (short) ((arg1)->dy);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_x_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::MouseDragEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_x_set",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_x_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::MouseDragEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_x_get",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  result = (short) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_y_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::MouseDragEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_y_set",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_y_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::MouseDragEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_y_get",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  result = (short) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_info_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  vapor::MouseInfo *arg2 = (vapor::MouseInfo *) 0 ;
  
  SWIG_check_num_args("info",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("info",1,"vapor::MouseDragEvent *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("info",2,"vapor::MouseInfo *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_info_set",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__MouseInfo,SWIG_POINTER_DISOWN))){
    SWIG_fail_ptr("MouseDragEvent_info_set",2,SWIGTYPE_p_vapor__MouseInfo);
  }
  
  if (arg1) (arg1)->info = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseDragEvent_info_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) 0 ;
  vapor::MouseInfo *result = 0 ;
  
  SWIG_check_num_args("info",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("info",1,"vapor::MouseDragEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseDragEvent,0))){
    SWIG_fail_ptr("MouseDragEvent_info_get",1,SWIGTYPE_p_vapor__MouseDragEvent);
  }
  
  result = (vapor::MouseInfo *) ((arg1)->info);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseInfo,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseDragEvent(void *obj) {
vapor::MouseDragEvent *arg1 = (vapor::MouseDragEvent *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseDragEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseDragEvent_attributes[] = {
    { "dx", _wrap_MouseDragEvent_dx_get, _wrap_MouseDragEvent_dx_set},
    { "dy", _wrap_MouseDragEvent_dy_get, _wrap_MouseDragEvent_dy_set},
    { "x", _wrap_MouseDragEvent_x_get, _wrap_MouseDragEvent_x_set},
    { "y", _wrap_MouseDragEvent_y_get, _wrap_MouseDragEvent_y_set},
    { "info", _wrap_MouseDragEvent_info_get, _wrap_MouseDragEvent_info_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseDragEvent_bases[] = {0,0};
static const char *swig_vapor_MouseDragEvent_base_names[] = {"vapor::MouseEvent *",0};
static swig_lua_class _wrap_class_vapor_MouseDragEvent = { "MouseDragEvent", &SWIGTYPE_p_vapor__MouseDragEvent,_wrap_new_MouseDragEvent, swig_delete_MouseDragEvent, swig_vapor_MouseDragEvent_methods, swig_vapor_MouseDragEvent_attributes, swig_vapor_MouseDragEvent_bases, swig_vapor_MouseDragEvent_base_names };

static int _wrap_new_MouseButtonEvent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseEventType::Enum arg1 ;
  vapor::MouseButtonEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseButtonEvent",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::MouseButtonEvent",1,"vapor::MouseEventType::Enum");
  arg1 = (vapor::MouseEventType::Enum)(int)lua_tonumber(L, 1);
  result = (vapor::MouseButtonEvent *)new vapor::MouseButtonEvent(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseButtonEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_isLeftButton(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("isLeftButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isLeftButton",1,"vapor::MouseButtonEvent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_isLeftButton",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  result = (bool)((vapor::MouseButtonEvent const *)arg1)->isLeftButton();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_isRightButton(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("isRightButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isRightButton",1,"vapor::MouseButtonEvent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_isRightButton",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  result = (bool)((vapor::MouseButtonEvent const *)arg1)->isRightButton();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_isMiddleButton(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  bool result;
  
  SWIG_check_num_args("isMiddleButton",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isMiddleButton",1,"vapor::MouseButtonEvent const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_isMiddleButton",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  result = (bool)((vapor::MouseButtonEvent const *)arg1)->isMiddleButton();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_x_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("x",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::MouseButtonEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("x",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_x_set",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->x = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_x_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("x",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("x",1,"vapor::MouseButtonEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_x_get",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  result = (short) ((arg1)->x);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_y_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("y",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::MouseButtonEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("y",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_y_set",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->y = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_y_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("y",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("y",1,"vapor::MouseButtonEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_y_get",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  result = (short) ((arg1)->y);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_button_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  vapor::MouseButton::Enum arg2 ;
  
  SWIG_check_num_args("button",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("button",1,"vapor::MouseButtonEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("button",2,"vapor::MouseButton::Enum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_button_set",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  arg2 = (vapor::MouseButton::Enum)(int)lua_tonumber(L, 2);
  if (arg1) (arg1)->button = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseButtonEvent_button_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) 0 ;
  vapor::MouseButton::Enum result;
  
  SWIG_check_num_args("button",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("button",1,"vapor::MouseButtonEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseButtonEvent,0))){
    SWIG_fail_ptr("MouseButtonEvent_button_get",1,SWIGTYPE_p_vapor__MouseButtonEvent);
  }
  
  result = (vapor::MouseButton::Enum) ((arg1)->button);
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseButtonEvent(void *obj) {
vapor::MouseButtonEvent *arg1 = (vapor::MouseButtonEvent *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseButtonEvent_methods[] = {
    {"isLeftButton", _wrap_MouseButtonEvent_isLeftButton}, 
    {"isRightButton", _wrap_MouseButtonEvent_isRightButton}, 
    {"isMiddleButton", _wrap_MouseButtonEvent_isMiddleButton}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseButtonEvent_attributes[] = {
    { "x", _wrap_MouseButtonEvent_x_get, _wrap_MouseButtonEvent_x_set},
    { "y", _wrap_MouseButtonEvent_y_get, _wrap_MouseButtonEvent_y_set},
    { "button", _wrap_MouseButtonEvent_button_get, _wrap_MouseButtonEvent_button_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseButtonEvent_bases[] = {0,0};
static const char *swig_vapor_MouseButtonEvent_base_names[] = {"vapor::MouseEvent *",0};
static swig_lua_class _wrap_class_vapor_MouseButtonEvent = { "MouseButtonEvent", &SWIGTYPE_p_vapor__MouseButtonEvent,_wrap_new_MouseButtonEvent, swig_delete_MouseButtonEvent, swig_vapor_MouseButtonEvent_methods, swig_vapor_MouseButtonEvent_attributes, swig_vapor_MouseButtonEvent_bases, swig_vapor_MouseButtonEvent_base_names };

static int _wrap_new_MouseWheelEvent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseWheelEvent *result = 0 ;
  
  SWIG_check_num_args("vapor::MouseWheelEvent",0,0)
  result = (vapor::MouseWheelEvent *)new vapor::MouseWheelEvent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__MouseWheelEvent,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseWheelEvent_delta_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseWheelEvent *arg1 = (vapor::MouseWheelEvent *) 0 ;
  short arg2 ;
  
  SWIG_check_num_args("delta",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delta",1,"vapor::MouseWheelEvent *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("delta",2,"short");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseWheelEvent,0))){
    SWIG_fail_ptr("MouseWheelEvent_delta_set",1,SWIGTYPE_p_vapor__MouseWheelEvent);
  }
  
  arg2 = (short)lua_tonumber(L, 2);
  if (arg1) (arg1)->delta = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_MouseWheelEvent_delta_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MouseWheelEvent *arg1 = (vapor::MouseWheelEvent *) 0 ;
  short result;
  
  SWIG_check_num_args("delta",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("delta",1,"vapor::MouseWheelEvent *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__MouseWheelEvent,0))){
    SWIG_fail_ptr("MouseWheelEvent_delta_get",1,SWIGTYPE_p_vapor__MouseWheelEvent);
  }
  
  result = (short) ((arg1)->delta);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_MouseWheelEvent(void *obj) {
vapor::MouseWheelEvent *arg1 = (vapor::MouseWheelEvent *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_MouseWheelEvent_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_MouseWheelEvent_attributes[] = {
    { "delta", _wrap_MouseWheelEvent_delta_get, _wrap_MouseWheelEvent_delta_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_MouseWheelEvent_bases[] = {0,0};
static const char *swig_vapor_MouseWheelEvent_base_names[] = {"vapor::MouseEvent *",0};
static swig_lua_class _wrap_class_vapor_MouseWheelEvent = { "MouseWheelEvent", &SWIGTYPE_p_vapor__MouseWheelEvent,_wrap_new_MouseWheelEvent, swig_delete_MouseWheelEvent, swig_vapor_MouseWheelEvent_methods, swig_vapor_MouseWheelEvent_attributes, swig_vapor_MouseWheelEvent_bases, swig_vapor_MouseWheelEvent_base_names };

static int _wrap_Component_getEntity(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  vapor::Entity *result = 0 ;
  
  SWIG_check_num_args("getEntity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEntity",1,"vapor::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_getEntity",1,SWIGTYPE_p_vapor__Component);
  }
  
  result = (vapor::Entity *)((vapor::Component const *)arg1)->getEntity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setEntity(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  vapor::Entity *arg2 = (vapor::Entity *) 0 ;
  
  SWIG_check_num_args("setEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEntity",1,"vapor::Component *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setEntity",2,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_setEntity",1,SWIGTYPE_p_vapor__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Component_setEntity",2,SWIGTYPE_p_vapor__Entity);
  }
  
  (arg1)->setEntity(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Component *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_update",1,SWIGTYPE_p_vapor__Component);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_onPreRender(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  vapor::Camera *arg2 = 0 ;
  
  SWIG_check_num_args("onPreRender",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onPreRender",1,"vapor::Component *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onPreRender",2,"vapor::Camera const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_onPreRender",1,SWIGTYPE_p_vapor__Component);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Component_onPreRender",2,SWIGTYPE_p_vapor__Camera);
  }
  
  (arg1)->onPreRender((vapor::Camera const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_isDebugRenderableVisible(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("isDebugRenderableVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isDebugRenderableVisible",1,"vapor::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_isDebugRenderableVisible",1,SWIGTYPE_p_vapor__Component);
  }
  
  result = (bool)((vapor::Component const *)arg1)->isDebugRenderableVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setDebugRenderableVisible(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setDebugRenderableVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDebugRenderableVisible",1,"vapor::Component *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setDebugRenderableVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_setDebugRenderableVisible",1,SWIGTYPE_p_vapor__Component);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDebugRenderableVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_createDebugRenderable(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  SwigValueWrapper< vapor::RefPtr< vapor::Renderable > > result;
  
  SWIG_check_num_args("createDebugRenderable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("createDebugRenderable",1,"vapor::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_createDebugRenderable",1,SWIGTYPE_p_vapor__Component);
  }
  
  result = ((vapor::Component const *)arg1)->createDebugRenderable();
  {
    vapor::RenderablePtr * resultptr = new vapor::RenderablePtr((const vapor::RenderablePtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getDebugRenderable(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  SwigValueWrapper< vapor::RefPtr< vapor::Renderable > > result;
  
  SWIG_check_num_args("getDebugRenderable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDebugRenderable",1,"vapor::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_getDebugRenderable",1,SWIGTYPE_p_vapor__Component);
  }
  
  result = ((vapor::Component const *)arg1)->getDebugRenderable();
  {
    vapor::RenderablePtr * resultptr = new vapor::RenderablePtr((const vapor::RenderablePtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_getDebugInheritsTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  bool result;
  
  SWIG_check_num_args("getDebugInheritsTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDebugInheritsTransform",1,"vapor::Component const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_getDebugInheritsTransform",1,SWIGTYPE_p_vapor__Component);
  }
  
  result = (bool)((vapor::Component const *)arg1)->getDebugInheritsTransform();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Component_setDebugInheritsTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Component *arg1 = (vapor::Component *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setDebugInheritsTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDebugInheritsTransform",1,"vapor::Component *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setDebugInheritsTransform",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Component,0))){
    SWIG_fail_ptr("Component_setDebugInheritsTransform",1,SWIGTYPE_p_vapor__Component);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setDebugInheritsTransform(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Component(void *obj) {
vapor::Component *arg1 = (vapor::Component *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Component_methods[] = {
    {"getEntity", _wrap_Component_getEntity}, 
    {"setEntity", _wrap_Component_setEntity}, 
    {"update", _wrap_Component_update}, 
    {"onPreRender", _wrap_Component_onPreRender}, 
    {"isDebugRenderableVisible", _wrap_Component_isDebugRenderableVisible}, 
    {"setDebugRenderableVisible", _wrap_Component_setDebugRenderableVisible}, 
    {"createDebugRenderable", _wrap_Component_createDebugRenderable}, 
    {"getDebugRenderable", _wrap_Component_getDebugRenderable}, 
    {"getDebugInheritsTransform", _wrap_Component_getDebugInheritsTransform}, 
    {"setDebugInheritsTransform", _wrap_Component_setDebugInheritsTransform}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Component_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Component_bases[] = {0};
static const char *swig_vapor_Component_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Component = { "Component", &SWIGTYPE_p_vapor__Component,0, swig_delete_Component, swig_vapor_Component_methods, swig_vapor_Component_attributes, swig_vapor_Component_bases, swig_vapor_Component_base_names };

static int _wrap_new_Transform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *result = 0 ;
  
  SWIG_check_num_args("vapor::Transform",0,0)
  result = (vapor::Transform *)new vapor::Transform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Transform,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_reset(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  
  SWIG_check_num_args("reset",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("reset",1,"vapor::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_reset",1,SWIGTYPE_p_vapor__Transform);
  }
  
  (arg1)->reset();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getPosition(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("getPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getPosition",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getPosition",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = (vapor::Vector3 *) &((vapor::Transform const *)arg1)->getPosition();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_setPosition(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setPosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setPosition",1,"vapor::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setPosition",2,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_setPosition",1,SWIGTYPE_p_vapor__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Transform_setPosition",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  (arg1)->setPosition((vapor::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getScale(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("getScale",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getScale",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getScale",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = (vapor::Vector3 *) &((vapor::Transform const *)arg1)->getScale();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_setScale(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Vector3 *arg2 = 0 ;
  
  SWIG_check_num_args("setScale",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setScale",1,"vapor::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setScale",2,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_setScale",1,SWIGTYPE_p_vapor__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Transform_setScale",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  (arg1)->setScale((vapor::Vector3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getRotation(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Quaternion *result = 0 ;
  
  SWIG_check_num_args("getRotation",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotation",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getRotation",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = (vapor::Quaternion *) &((vapor::Transform const *)arg1)->getRotation();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Quaternion,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getRotationMatrix(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("getRotationMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRotationMatrix",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getRotationMatrix",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = ((vapor::Transform const *)arg1)->getRotationMatrix();
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_setRotation(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Quaternion *arg2 = 0 ;
  
  SWIG_check_num_args("setRotation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setRotation",1,"vapor::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setRotation",2,"vapor::Quaternion const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_setRotation",1,SWIGTYPE_p_vapor__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Quaternion,0))){
    SWIG_fail_ptr("Transform_setRotation",2,SWIGTYPE_p_vapor__Quaternion);
  }
  
  (arg1)->setRotation((vapor::Quaternion const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_lookAt(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Vector3 *arg2 = 0 ;
  vapor::Vector3 *arg3 = 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("lookAt",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("lookAt",1,"vapor::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("lookAt",2,"vapor::Vector3 const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("lookAt",3,"vapor::Vector3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_lookAt",1,SWIGTYPE_p_vapor__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Transform_lookAt",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Transform_lookAt",3,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = (arg1)->lookAt((vapor::Vector3 const &)*arg2,(vapor::Vector3 const &)*arg3);
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getAbsoluteTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Matrix4x3 *result = 0 ;
  
  SWIG_check_num_args("getAbsoluteTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAbsoluteTransform",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getAbsoluteTransform",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = (vapor::Matrix4x3 *) &((vapor::Transform const *)arg1)->getAbsoluteTransform();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Matrix4x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_setAbsoluteTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Matrix4x3 *arg2 = 0 ;
  
  SWIG_check_num_args("setAbsoluteTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAbsoluteTransform",1,"vapor::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAbsoluteTransform",2,"vapor::Matrix4x3 const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_setAbsoluteTransform",1,SWIGTYPE_p_vapor__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Matrix4x3,0))){
    SWIG_fail_ptr("Transform_setAbsoluteTransform",2,SWIGTYPE_p_vapor__Matrix4x3);
  }
  
  (arg1)->setAbsoluteTransform((vapor::Matrix4x3 const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getLocalTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Matrix4x3 result;
  
  SWIG_check_num_args("getLocalTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLocalTransform",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getLocalTransform",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = ((vapor::Transform const *)arg1)->getLocalTransform();
  {
    vapor::Matrix4x3 * resultptr = new vapor::Matrix4x3((const vapor::Matrix4x3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Matrix4x3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getWorldPosition(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::Vector3 result;
  
  SWIG_check_num_args("getWorldPosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldPosition",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getWorldPosition",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = ((vapor::Transform const *)arg1)->getWorldPosition();
  {
    vapor::Vector3 * resultptr = new vapor::Vector3((const vapor::Vector3 &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Vector3,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getBoundingVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("getBoundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundingVolume",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getBoundingVolume",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = (vapor::BoundingBox *) &((vapor::Transform const *)arg1)->getBoundingVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_getWorldBoundingVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  vapor::BoundingBox result;
  
  SWIG_check_num_args("getWorldBoundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldBoundingVolume",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_getWorldBoundingVolume",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = ((vapor::Transform const *)arg1)->getWorldBoundingVolume();
  {
    vapor::BoundingBox * resultptr = new vapor::BoundingBox((const vapor::BoundingBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__BoundingBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_updateBoundingVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  
  SWIG_check_num_args("updateBoundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateBoundingVolume",1,"vapor::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_updateBoundingVolume",1,SWIGTYPE_p_vapor__Transform);
  }
  
  (arg1)->updateBoundingVolume();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_markBoundingVolumeDirty(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  
  SWIG_check_num_args("markBoundingVolumeDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("markBoundingVolumeDirty",1,"vapor::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_markBoundingVolumeDirty",1,SWIGTYPE_p_vapor__Transform);
  }
  
  (arg1)->markBoundingVolumeDirty();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_requiresBoundingVolumeUpdate(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  bool result;
  
  SWIG_check_num_args("requiresBoundingVolumeUpdate",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("requiresBoundingVolumeUpdate",1,"vapor::Transform const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_requiresBoundingVolumeUpdate",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result = (bool)((vapor::Transform const *)arg1)->requiresBoundingVolumeUpdate();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Transform *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_update",1,SWIGTYPE_p_vapor__Transform);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_onTransform_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  Event0< > arg2 ;
  Event0< > *argp2 ;
  
  SWIG_check_num_args("onTransform",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onTransform",1,"vapor::Transform *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onTransform",2,"Event0< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_onTransform_set",1,SWIGTYPE_p_vapor__Transform);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Event0T_t,0))){
    SWIG_fail_ptr("Transform_onTransform_set",2,SWIGTYPE_p_Event0T_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->onTransform = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Transform_onTransform_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Transform *arg1 = (vapor::Transform *) 0 ;
  Event0< > result;
  
  SWIG_check_num_args("onTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onTransform",1,"vapor::Transform *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Transform,0))){
    SWIG_fail_ptr("Transform_onTransform_get",1,SWIGTYPE_p_vapor__Transform);
  }
  
  result =  ((arg1)->onTransform);
  {
    Event0< > * resultptr = new Event0< >((const Event0< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Event0T_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Transform(void *obj) {
vapor::Transform *arg1 = (vapor::Transform *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Transform_methods[] = {
    {"reset", _wrap_Transform_reset}, 
    {"getPosition", _wrap_Transform_getPosition}, 
    {"setPosition", _wrap_Transform_setPosition}, 
    {"getScale", _wrap_Transform_getScale}, 
    {"setScale", _wrap_Transform_setScale}, 
    {"getRotation", _wrap_Transform_getRotation}, 
    {"getRotationMatrix", _wrap_Transform_getRotationMatrix}, 
    {"setRotation", _wrap_Transform_setRotation}, 
    {"lookAt", _wrap_Transform_lookAt}, 
    {"getAbsoluteTransform", _wrap_Transform_getAbsoluteTransform}, 
    {"setAbsoluteTransform", _wrap_Transform_setAbsoluteTransform}, 
    {"getLocalTransform", _wrap_Transform_getLocalTransform}, 
    {"getWorldPosition", _wrap_Transform_getWorldPosition}, 
    {"getBoundingVolume", _wrap_Transform_getBoundingVolume}, 
    {"getWorldBoundingVolume", _wrap_Transform_getWorldBoundingVolume}, 
    {"updateBoundingVolume", _wrap_Transform_updateBoundingVolume}, 
    {"markBoundingVolumeDirty", _wrap_Transform_markBoundingVolumeDirty}, 
    {"requiresBoundingVolumeUpdate", _wrap_Transform_requiresBoundingVolumeUpdate}, 
    {"update", _wrap_Transform_update}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Transform_attributes[] = {
    { "onTransform", _wrap_Transform_onTransform_get, _wrap_Transform_onTransform_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Transform_bases[] = {0,0};
static const char *swig_vapor_Transform_base_names[] = {"vapor::Component *",0};
static swig_lua_class _wrap_class_vapor_Transform = { "Transform", &SWIGTYPE_p_vapor__Transform,_wrap_new_Transform, swig_delete_Transform, swig_vapor_Transform_methods, swig_vapor_Transform_attributes, swig_vapor_Transform_bases, swig_vapor_Transform_base_names };

static int _wrap_new_Model__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *result = 0 ;
  
  SWIG_check_num_args("vapor::Model",0,0)
  result = (vapor::Model *)new vapor::Model();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Model,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Model__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::MeshPtr *arg1 = 0 ;
  vapor::Model *result = 0 ;
  
  SWIG_check_num_args("vapor::Model",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Model",1,"vapor::MeshPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t,0))){
    SWIG_fail_ptr("new_Model",1,SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t);
  }
  
  result = (vapor::Model *)new vapor::Model((vapor::MeshPtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Model,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Model(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Model__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Model__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Model'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Model()\n"
    "    vapor::Model(vapor::MeshPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Model_getMesh(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  vapor::MeshPtr *result = 0 ;
  
  SWIG_check_num_args("getMesh",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getMesh",1,"vapor::Model const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_getMesh",1,SWIGTYPE_p_vapor__Model);
  }
  
  result = (vapor::MeshPtr *) &((vapor::Model const *)arg1)->getMesh();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_setMesh(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  vapor::MeshPtr *arg2 = 0 ;
  
  SWIG_check_num_args("setMesh",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setMesh",1,"vapor::Model *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setMesh",2,"vapor::MeshPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_setMesh",1,SWIGTYPE_p_vapor__Model);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t,0))){
    SWIG_fail_ptr("Model_setMesh",2,SWIGTYPE_p_vapor__RefPtrT_vapor__Mesh_t);
  }
  
  (arg1)->setMesh((vapor::MeshPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_setAnimation__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  vapor::AnimationPtr *arg2 = 0 ;
  
  SWIG_check_num_args("setAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAnimation",1,"vapor::Model *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAnimation",2,"vapor::AnimationPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_setAnimation",1,SWIGTYPE_p_vapor__Model);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t,0))){
    SWIG_fail_ptr("Model_setAnimation",2,SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t);
  }
  
  (arg1)->setAnimation((vapor::AnimationPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_setAnimation__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setAnimation",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAnimation",1,"vapor::Model *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAnimation",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_setAnimation",1,SWIGTYPE_p_vapor__Model);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setAnimation((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_setAnimation(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Model, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__RefPtrT_vapor__Animation_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Model_setAnimation__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Model, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Model_setAnimation__SWIG_1(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Model_setAnimation'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setAnimation(vapor::Model *,vapor::AnimationPtr const &)\n"
    "    setAnimation(vapor::Model *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Model_setAnimationFade__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  std::string *arg2 = 0 ;
  float arg3 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setAnimationFade",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAnimationFade",1,"vapor::Model *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAnimationFade",2,"std::string const &");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("setAnimationFade",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_setAnimationFade",1,SWIGTYPE_p_vapor__Model);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  arg3 = (float)lua_tonumber(L, 3);
  (arg1)->setAnimationFade((std::string const &)*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_setAnimationFade__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setAnimationFade",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAnimationFade",1,"vapor::Model *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAnimationFade",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_setAnimationFade",1,SWIGTYPE_p_vapor__Model);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setAnimationFade((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_setAnimationFade(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Model, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Model_setAnimationFade__SWIG_1(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Model, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Model_setAnimationFade__SWIG_0(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Model_setAnimationFade'\n"
    "  Possible C/C++ prototypes are:\n"
    "    setAnimationFade(vapor::Model *,std::string const &,float)\n"
    "    setAnimationFade(vapor::Model *,std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Model_setAttachment(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  std::string *arg2 = 0 ;
  vapor::EntityPtr *arg3 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setAttachment",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAttachment",1,"vapor::Model *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setAttachment",2,"std::string const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("setAttachment",3,"vapor::EntityPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_setAttachment",1,SWIGTYPE_p_vapor__Model);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0))){
    SWIG_fail_ptr("Model_setAttachment",3,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t);
  }
  
  (arg1)->setAttachment((std::string const &)*arg2,(vapor::EntityPtr const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Model *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_update",1,SWIGTYPE_p_vapor__Model);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Model_build(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Model *arg1 = (vapor::Model *) 0 ;
  
  SWIG_check_num_args("build",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("build",1,"vapor::Model *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Model,0))){
    SWIG_fail_ptr("Model_build",1,SWIGTYPE_p_vapor__Model);
  }
  
  (arg1)->build();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Model(void *obj) {
vapor::Model *arg1 = (vapor::Model *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Model_methods[] = {
    {"getMesh", _wrap_Model_getMesh}, 
    {"setMesh", _wrap_Model_setMesh}, 
    {"setAnimation", _wrap_Model_setAnimation}, 
    {"setAnimationFade", _wrap_Model_setAnimationFade}, 
    {"setAttachment", _wrap_Model_setAttachment}, 
    {"update", _wrap_Model_update}, 
    {"build", _wrap_Model_build}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Model_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Model_bases[] = {0};
static const char *swig_vapor_Model_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Model = { "Model", &SWIGTYPE_p_vapor__Model,_wrap_new_Model, swig_delete_Model, swig_vapor_Model_methods, swig_vapor_Model_attributes, swig_vapor_Model_bases, swig_vapor_Model_base_names };

static int _wrap_new_Camera(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *result = 0 ;
  
  SWIG_check_num_args("vapor::Camera",0,0)
  result = (vapor::Camera *)new vapor::Camera();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Camera,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_render__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::ScenePtr *arg2 = 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"vapor::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("render",2,"vapor::ScenePtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_render",1,SWIGTYPE_p_vapor__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Scene_t,0))){
    SWIG_fail_ptr("Camera_render",2,SWIGTYPE_p_std__shared_ptrT_vapor__Scene_t);
  }
  
  (arg1)->render((vapor::ScenePtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_render__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::RenderBlock *arg2 = 0 ;
  bool arg3 ;
  
  SWIG_check_num_args("render",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"vapor::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("render",2,"vapor::RenderBlock &");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("render",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_render",1,SWIGTYPE_p_vapor__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RenderBlock,0))){
    SWIG_fail_ptr("Camera_render",2,SWIGTYPE_p_vapor__RenderBlock);
  }
  
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->render(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_render__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::RenderBlock *arg2 = 0 ;
  
  SWIG_check_num_args("render",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("render",1,"vapor::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("render",2,"vapor::RenderBlock &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_render",1,SWIGTYPE_p_vapor__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RenderBlock,0))){
    SWIG_fail_ptr("Camera_render",2,SWIGTYPE_p_vapor__RenderBlock);
  }
  
  (arg1)->render(*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_render(lua_State* L) {
  int argc;
  int argv[4]={
    1,2,3,4
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_vapor__Scene_t, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_render__SWIG_0(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__RenderBlock, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Camera_render__SWIG_2(L);
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__RenderBlock, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          _v = lua_isboolean(L,argv[2]);
        }
        if (_v) {
          return _wrap_Camera_render__SWIG_1(L);
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_render'\n"
    "  Possible C/C++ prototypes are:\n"
    "    render(vapor::Camera *,vapor::ScenePtr const &)\n"
    "    render(vapor::Camera *,vapor::RenderBlock &,bool)\n"
    "    render(vapor::Camera *,vapor::RenderBlock &)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_cull(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::RenderBlock *arg2 = 0 ;
  vapor::EntityPtr *arg3 = 0 ;
  
  SWIG_check_num_args("cull",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("cull",1,"vapor::Camera *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("cull",2,"vapor::RenderBlock &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("cull",3,"vapor::EntityPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_cull",1,SWIGTYPE_p_vapor__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RenderBlock,0))){
    SWIG_fail_ptr("Camera_cull",2,SWIGTYPE_p_vapor__RenderBlock);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0))){
    SWIG_fail_ptr("Camera_cull",3,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t);
  }
  
  (arg1)->cull(*arg2,(vapor::EntityPtr const &)*arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getLookAtVector(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("getLookAtVector",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLookAtVector",1,"vapor::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getLookAtVector",1,SWIGTYPE_p_vapor__Camera);
  }
  
  result = (vapor::Vector3 *) &((vapor::Camera const *)arg1)->getLookAtVector();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getViewMatrix(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::Matrix4x3 *result = 0 ;
  
  SWIG_check_num_args("getViewMatrix",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getViewMatrix",1,"vapor::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getViewMatrix",1,SWIGTYPE_p_vapor__Camera);
  }
  
  result = (vapor::Matrix4x3 *) &((vapor::Camera const *)arg1)->getViewMatrix();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Matrix4x3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getView(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::RenderView *result = 0 ;
  
  SWIG_check_num_args("getView",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getView",1,"vapor::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getView",1,SWIGTYPE_p_vapor__Camera);
  }
  
  result = (vapor::RenderView *)((vapor::Camera const *)arg1)->getView();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__RenderView,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_setView(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::RenderView *arg2 = (vapor::RenderView *) 0 ;
  
  SWIG_check_num_args("setView",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setView",1,"vapor::Camera *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setView",2,"vapor::RenderView *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_setView",1,SWIGTYPE_p_vapor__Camera);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RenderView,0))){
    SWIG_fail_ptr("Camera_setView",2,SWIGTYPE_p_vapor__RenderView);
  }
  
  (arg1)->setView(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getFrustum__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::Frustum *result = 0 ;
  
  SWIG_check_num_args("getFrustum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFrustum",1,"vapor::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getFrustum",1,SWIGTYPE_p_vapor__Camera);
  }
  
  result = (vapor::Frustum *) &(arg1)->getFrustum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Frustum,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getFrustum__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  vapor::Frustum *result = 0 ;
  
  SWIG_check_num_args("getFrustum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getFrustum",1,"vapor::Camera const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getFrustum",1,SWIGTYPE_p_vapor__Camera);
  }
  
  result = (vapor::Frustum *) &((vapor::Camera const *)arg1)->getFrustum();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Frustum,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getFrustum(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Camera_getFrustum__SWIG_0(L);
    }
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_Camera_getFrustum__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_getFrustum'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getFrustum(vapor::Camera *)\n"
    "    getFrustum(vapor::Camera const *)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_getRay__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  vapor::Vector3 *arg4 = (vapor::Vector3 *) 0 ;
  vapor::Ray result;
  
  SWIG_check_num_args("getRay",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRay",1,"vapor::Camera const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getRay",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getRay",3,"float");
  if(!SWIG_isptrtype(L,4)) SWIG_fail_arg("getRay",4,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getRay",1,SWIGTYPE_p_vapor__Camera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("Camera_getRay",4,SWIGTYPE_p_vapor__Vector3);
  }
  
  result = ((vapor::Camera const *)arg1)->getRay(arg2,arg3,arg4);
  {
    vapor::Ray * resultptr = new vapor::Ray((const vapor::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getRay__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  vapor::Ray result;
  
  SWIG_check_num_args("getRay",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRay",1,"vapor::Camera const *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getRay",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getRay",3,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getRay",1,SWIGTYPE_p_vapor__Camera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  result = ((vapor::Camera const *)arg1)->getRay(arg2,arg3);
  {
    vapor::Ray * resultptr = new vapor::Ray((const vapor::Ray &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Ray,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_getRay(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          return _wrap_Camera_getRay__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Camera, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isnumber(L,argv[1]);
      }
      if (_v) {
        {
          _v = lua_isnumber(L,argv[2]);
        }
        if (_v) {
          {
            void *ptr;
            if (SWIG_isptrtype(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_vapor__Vector3, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Camera_getRay__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Camera_getRay'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getRay(vapor::Camera const *,float,float,vapor::Vector3 *)\n"
    "    getRay(vapor::Camera const *,float,float)\n");
  lua_error(L);return 0;
}


static int _wrap_Camera_getVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  float arg2 ;
  float arg3 ;
  float arg4 ;
  float arg5 ;
  vapor::Frustum result;
  
  SWIG_check_num_args("getVolume",5,5)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getVolume",1,"vapor::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getVolume",2,"float");
  if(!lua_isnumber(L,3)) SWIG_fail_arg("getVolume",3,"float");
  if(!lua_isnumber(L,4)) SWIG_fail_arg("getVolume",4,"float");
  if(!lua_isnumber(L,5)) SWIG_fail_arg("getVolume",5,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_getVolume",1,SWIGTYPE_p_vapor__Camera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  arg3 = (float)lua_tonumber(L, 3);
  arg4 = (float)lua_tonumber(L, 4);
  arg5 = (float)lua_tonumber(L, 5);
  result = (arg1)->getVolume(arg2,arg3,arg4,arg5);
  {
    vapor::Frustum * resultptr = new vapor::Frustum((const vapor::Frustum &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__Frustum,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Camera *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_update",1,SWIGTYPE_p_vapor__Camera);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Camera_updateFrustum(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Camera *arg1 = (vapor::Camera *) 0 ;
  
  SWIG_check_num_args("updateFrustum",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateFrustum",1,"vapor::Camera *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Camera,0))){
    SWIG_fail_ptr("Camera_updateFrustum",1,SWIGTYPE_p_vapor__Camera);
  }
  
  (arg1)->updateFrustum();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Camera(void *obj) {
vapor::Camera *arg1 = (vapor::Camera *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Camera_methods[] = {
    {"render", _wrap_Camera_render}, 
    {"cull", _wrap_Camera_cull}, 
    {"getLookAtVector", _wrap_Camera_getLookAtVector}, 
    {"getViewMatrix", _wrap_Camera_getViewMatrix}, 
    {"getView", _wrap_Camera_getView}, 
    {"setView", _wrap_Camera_setView}, 
    {"getFrustum", _wrap_Camera_getFrustum}, 
    {"getRay", _wrap_Camera_getRay}, 
    {"getVolume", _wrap_Camera_getVolume}, 
    {"update", _wrap_Camera_update}, 
    {"updateFrustum", _wrap_Camera_updateFrustum}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Camera_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Camera_bases[] = {0,0};
static const char *swig_vapor_Camera_base_names[] = {"vapor::Component *",0};
static swig_lua_class _wrap_class_vapor_Camera = { "Camera", &SWIGTYPE_p_vapor__Camera,_wrap_new_Camera, swig_delete_Camera, swig_vapor_Camera_methods, swig_vapor_Camera_attributes, swig_vapor_Camera_bases, swig_vapor_Camera_base_names };

static int _wrap_new_Geometry__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *result = 0 ;
  
  SWIG_check_num_args("vapor::Geometry",0,0)
  result = (vapor::Geometry *)new vapor::Geometry();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Geometry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Geometry__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RenderablePtr *arg1 = 0 ;
  vapor::Geometry *result = 0 ;
  
  SWIG_check_num_args("vapor::Geometry",1,1)
  if(!lua_isuserdata(L,1)) SWIG_fail_arg("vapor::Geometry",1,"vapor::RenderablePtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,0))){
    SWIG_fail_ptr("new_Geometry",1,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t);
  }
  
  result = (vapor::Geometry *)new vapor::Geometry((vapor::RenderablePtr const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Geometry,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Geometry(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Geometry__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      void *ptr;
      if (lua_isuserdata(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      return _wrap_new_Geometry__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Geometry'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Geometry()\n"
    "    vapor::Geometry(vapor::RenderablePtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Geometry_addRenderable(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  vapor::RenderablePtr *arg2 = 0 ;
  
  SWIG_check_num_args("addRenderable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addRenderable",1,"vapor::Geometry *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addRenderable",2,"vapor::RenderablePtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_addRenderable",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,0))){
    SWIG_fail_ptr("Geometry_addRenderable",2,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t);
  }
  
  (arg1)->addRenderable((vapor::RenderablePtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getRenderables(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  SwigValueWrapper< std::vector< vapor::RefPtr< vapor::Renderable > > > result;
  
  SWIG_check_num_args("getRenderables",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getRenderables",1,"vapor::Geometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_getRenderables",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  result = (arg1)->getRenderables();
  {
    vapor::RenderableVector * resultptr = new vapor::RenderableVector((const vapor::RenderableVector &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_appendRenderables(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  vapor::RenderQueue *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vapor::Transform > > arg3 ;
  vapor::TransformPtr *argp3 ;
  
  SWIG_check_num_args("appendRenderables",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("appendRenderables",1,"vapor::Geometry *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("appendRenderables",2,"vapor::RenderQueue &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("appendRenderables",3,"vapor::TransformPtr");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_appendRenderables",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RenderQueue,0))){
    SWIG_fail_ptr("Geometry_appendRenderables",2,SWIGTYPE_p_vapor__RenderQueue);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&argp3,SWIGTYPE_p_std__shared_ptrT_vapor__Transform_t,0))){
    SWIG_fail_ptr("Geometry_appendRenderables",3,SWIGTYPE_p_std__shared_ptrT_vapor__Transform_t);
  }
  arg3 = *argp3;
  
  (arg1)->appendRenderables(*arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_updateBounds(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  
  SWIG_check_num_args("updateBounds",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("updateBounds",1,"vapor::Geometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_updateBounds",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  (arg1)->updateBounds();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Geometry *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_update",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getBoundingVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  vapor::BoundingBox *result = 0 ;
  
  SWIG_check_num_args("getBoundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getBoundingVolume",1,"vapor::Geometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_getBoundingVolume",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  result = (vapor::BoundingBox *) &((vapor::Geometry const *)arg1)->getBoundingVolume();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__BoundingBox,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_getWorldBoundingVolume(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  vapor::BoundingBox result;
  
  SWIG_check_num_args("getWorldBoundingVolume",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getWorldBoundingVolume",1,"vapor::Geometry const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_getWorldBoundingVolume",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  result = ((vapor::Geometry const *)arg1)->getWorldBoundingVolume();
  {
    vapor::BoundingBox * resultptr = new vapor::BoundingBox((const vapor::BoundingBox &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_vapor__BoundingBox,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Geometry_markDirty(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Geometry *arg1 = (vapor::Geometry *) 0 ;
  
  SWIG_check_num_args("markDirty",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("markDirty",1,"vapor::Geometry *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Geometry,0))){
    SWIG_fail_ptr("Geometry_markDirty",1,SWIGTYPE_p_vapor__Geometry);
  }
  
  (arg1)->markDirty();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Geometry(void *obj) {
vapor::Geometry *arg1 = (vapor::Geometry *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Geometry_methods[] = {
    {"addRenderable", _wrap_Geometry_addRenderable}, 
    {"getRenderables", _wrap_Geometry_getRenderables}, 
    {"appendRenderables", _wrap_Geometry_appendRenderables}, 
    {"updateBounds", _wrap_Geometry_updateBounds}, 
    {"update", _wrap_Geometry_update}, 
    {"getBoundingVolume", _wrap_Geometry_getBoundingVolume}, 
    {"getWorldBoundingVolume", _wrap_Geometry_getWorldBoundingVolume}, 
    {"markDirty", _wrap_Geometry_markDirty}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Geometry_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Geometry_bases[] = {0,0};
static const char *swig_vapor_Geometry_base_names[] = {"vapor::Component *",0};
static swig_lua_class _wrap_class_vapor_Geometry = { "Geometry", &SWIGTYPE_p_vapor__Geometry,_wrap_new_Geometry, swig_delete_Geometry, swig_vapor_Geometry_methods, swig_vapor_Geometry_attributes, swig_vapor_Geometry_bases, swig_vapor_Geometry_base_names };

static int _wrap_new_LightType(lua_State* L) {
  int SWIG_arg = 0;
  vapor::LightType *result = 0 ;
  
  SWIG_check_num_args("vapor::LightType::LightType",0,0)
  result = (vapor::LightType *)new vapor::LightType();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__LightType,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_LightType(void *obj) {
vapor::LightType *arg1 = (vapor::LightType *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_LightType_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_LightType_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_LightType_bases[] = {0};
static const char *swig_vapor_LightType_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_LightType = { "LightType", &SWIGTYPE_p_vapor__LightType,_wrap_new_LightType, swig_delete_LightType, swig_vapor_LightType_methods, swig_vapor_LightType_attributes, swig_vapor_LightType_bases, swig_vapor_LightType_base_names };

static int _wrap_new_Light__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::LightType::Enum arg1 ;
  vapor::Light *result = 0 ;
  
  SWIG_check_num_args("vapor::Light",1,1)
  if(!lua_isnumber(L,1)) SWIG_fail_arg("vapor::Light",1,"vapor::LightType::Enum");
  arg1 = (vapor::LightType::Enum)(int)lua_tonumber(L, 1);
  result = (vapor::Light *)new vapor::Light(arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *result = 0 ;
  
  SWIG_check_num_args("vapor::Light",0,0)
  result = (vapor::Light *)new vapor::Light();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Light,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Light(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Light__SWIG_1(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isnumber(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Light__SWIG_0(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Light'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Light(vapor::LightType::Enum)\n"
    "    vapor::Light()\n");
  lua_error(L);return 0;
}


static int _wrap_Light_getLightType(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::LightType::Enum result;
  
  SWIG_check_num_args("getLightType",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getLightType",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getLightType",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (vapor::LightType::Enum)((vapor::Light const *)arg1)->getLightType();
  lua_pushnumber(L, (lua_Number)(int)(result)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setLightType(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::LightType::Enum arg2 ;
  
  SWIG_check_num_args("setLightType",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setLightType",1,"vapor::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setLightType",2,"vapor::LightType::Enum");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setLightType",1,SWIGTYPE_p_vapor__Light);
  }
  
  arg2 = (vapor::LightType::Enum)(int)lua_tonumber(L, 2);
  (arg1)->setLightType(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getActive(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  bool result;
  
  SWIG_check_num_args("getActive",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getActive",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getActive",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (bool)((vapor::Light const *)arg1)->getActive();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setActive(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setActive",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setActive",1,"vapor::Light *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setActive",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setActive",1,SWIGTYPE_p_vapor__Light);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setActive(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getCastsShadows(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  bool result;
  
  SWIG_check_num_args("getCastsShadows",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCastsShadows",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getCastsShadows",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (bool)((vapor::Light const *)arg1)->getCastsShadows();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setCastsShadows(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setCastsShadows",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCastsShadows",1,"vapor::Light *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setCastsShadows",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setCastsShadows",1,SWIGTYPE_p_vapor__Light);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setCastsShadows(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("getDiffuseColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getDiffuseColor",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getDiffuseColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (vapor::Color *) &((vapor::Light const *)arg1)->getDiffuseColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setDiffuseColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *arg2 = 0 ;
  
  SWIG_check_num_args("setDiffuseColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setDiffuseColor",1,"vapor::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setDiffuseColor",2,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setDiffuseColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Light_setDiffuseColor",2,SWIGTYPE_p_vapor__Color);
  }
  
  (arg1)->setDiffuseColor((vapor::Color const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getSpecularColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("getSpecularColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getSpecularColor",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getSpecularColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (vapor::Color *) &((vapor::Light const *)arg1)->getSpecularColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setSpecularColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *arg2 = 0 ;
  
  SWIG_check_num_args("setSpecularColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setSpecularColor",1,"vapor::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setSpecularColor",2,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setSpecularColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Light_setSpecularColor",2,SWIGTYPE_p_vapor__Color);
  }
  
  (arg1)->setSpecularColor((vapor::Color const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getEmissiveColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("getEmissiveColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEmissiveColor",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getEmissiveColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (vapor::Color *) &((vapor::Light const *)arg1)->getEmissiveColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setEmissiveColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *arg2 = 0 ;
  
  SWIG_check_num_args("setEmissiveColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEmissiveColor",1,"vapor::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setEmissiveColor",2,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setEmissiveColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Light_setEmissiveColor",2,SWIGTYPE_p_vapor__Color);
  }
  
  (arg1)->setEmissiveColor((vapor::Color const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *result = 0 ;
  
  SWIG_check_num_args("getAmbientColor",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getAmbientColor",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getAmbientColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (vapor::Color *) &((vapor::Light const *)arg1)->getAmbientColor();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Color,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setAmbientColor(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  vapor::Color *arg2 = 0 ;
  
  SWIG_check_num_args("setAmbientColor",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setAmbientColor",1,"vapor::Light *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("setAmbientColor",2,"vapor::Color const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setAmbientColor",1,SWIGTYPE_p_vapor__Light);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Color,0))){
    SWIG_fail_ptr("Light_setAmbientColor",2,SWIGTYPE_p_vapor__Color);
  }
  
  (arg1)->setAmbientColor((vapor::Color const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_getCutOffRadius(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  float result;
  
  SWIG_check_num_args("getCutOffRadius",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getCutOffRadius",1,"vapor::Light const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_getCutOffRadius",1,SWIGTYPE_p_vapor__Light);
  }
  
  result = (float)((vapor::Light const *)arg1)->getCutOffRadius();
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_setCutOffRadius(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("setCutOffRadius",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setCutOffRadius",1,"vapor::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setCutOffRadius",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_setCutOffRadius",1,SWIGTYPE_p_vapor__Light);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->setCutOffRadius(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Light_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Light *arg1 = (vapor::Light *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Light *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Light,0))){
    SWIG_fail_ptr("Light_update",1,SWIGTYPE_p_vapor__Light);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Light(void *obj) {
vapor::Light *arg1 = (vapor::Light *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Light_methods[] = {
    {"getLightType", _wrap_Light_getLightType}, 
    {"setLightType", _wrap_Light_setLightType}, 
    {"getActive", _wrap_Light_getActive}, 
    {"setActive", _wrap_Light_setActive}, 
    {"getCastsShadows", _wrap_Light_getCastsShadows}, 
    {"setCastsShadows", _wrap_Light_setCastsShadows}, 
    {"getDiffuseColor", _wrap_Light_getDiffuseColor}, 
    {"setDiffuseColor", _wrap_Light_setDiffuseColor}, 
    {"getSpecularColor", _wrap_Light_getSpecularColor}, 
    {"setSpecularColor", _wrap_Light_setSpecularColor}, 
    {"getEmissiveColor", _wrap_Light_getEmissiveColor}, 
    {"setEmissiveColor", _wrap_Light_setEmissiveColor}, 
    {"getAmbientColor", _wrap_Light_getAmbientColor}, 
    {"setAmbientColor", _wrap_Light_setAmbientColor}, 
    {"getCutOffRadius", _wrap_Light_getCutOffRadius}, 
    {"setCutOffRadius", _wrap_Light_setCutOffRadius}, 
    {"update", _wrap_Light_update}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Light_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Light_bases[] = {0,0};
static const char *swig_vapor_Light_base_names[] = {"vapor::Component *",0};
static swig_lua_class _wrap_class_vapor_Light = { "Light", &SWIGTYPE_p_vapor__Light,_wrap_new_Light, swig_delete_Light, swig_vapor_Light_methods, swig_vapor_Light_attributes, swig_vapor_Light_bases, swig_vapor_Light_base_names };

static int _wrap_Controller_getEnabled(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Controller *arg1 = (vapor::Controller *) 0 ;
  bool result;
  
  SWIG_check_num_args("getEnabled",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEnabled",1,"vapor::Controller const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Controller,0))){
    SWIG_fail_ptr("Controller_getEnabled",1,SWIGTYPE_p_vapor__Controller);
  }
  
  result = (bool)((vapor::Controller const *)arg1)->getEnabled();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_setEnabled(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Controller *arg1 = (vapor::Controller *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setEnabled",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setEnabled",1,"vapor::Controller *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setEnabled",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Controller,0))){
    SWIG_fail_ptr("Controller_setEnabled",1,SWIGTYPE_p_vapor__Controller);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setEnabled(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Controller *arg1 = (vapor::Controller *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Controller *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Controller,0))){
    SWIG_fail_ptr("Controller_update",1,SWIGTYPE_p_vapor__Controller);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Controller__update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Controller *arg1 = (vapor::Controller *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("_update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_update",1,"vapor::Controller *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("_update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Controller,0))){
    SWIG_fail_ptr("Controller__update",1,SWIGTYPE_p_vapor__Controller);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->_update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Controller(void *obj) {
vapor::Controller *arg1 = (vapor::Controller *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Controller_methods[] = {
    {"getEnabled", _wrap_Controller_getEnabled}, 
    {"setEnabled", _wrap_Controller_setEnabled}, 
    {"update", _wrap_Controller_update}, 
    {"_update", _wrap_Controller__update}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Controller_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Controller_bases[] = {0,0};
static const char *swig_vapor_Controller_base_names[] = {"vapor::Component *",0};
static swig_lua_class _wrap_class_vapor_Controller = { "Controller", &SWIGTYPE_p_vapor__Controller,0, swig_delete_Controller, swig_vapor_Controller_methods, swig_vapor_Controller_attributes, swig_vapor_Controller_bases, swig_vapor_Controller_base_names };

static int _wrap_new_CharacterController(lua_State* L) {
  int SWIG_arg = 0;
  vapor::CharacterController *result = 0 ;
  
  SWIG_check_num_args("vapor::CharacterController",0,0)
  result = (vapor::CharacterController *)new vapor::CharacterController();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__CharacterController,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_CharacterController__update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::CharacterController *arg1 = (vapor::CharacterController *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("_update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("_update",1,"vapor::CharacterController *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("_update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__CharacterController,0))){
    SWIG_fail_ptr("CharacterController__update",1,SWIGTYPE_p_vapor__CharacterController);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->_update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_CharacterController(void *obj) {
vapor::CharacterController *arg1 = (vapor::CharacterController *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_CharacterController_methods[] = {
    {"_update", _wrap_CharacterController__update}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_CharacterController_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_CharacterController_bases[] = {0,0};
static const char *swig_vapor_CharacterController_base_names[] = {"vapor::Controller *",0};
static swig_lua_class _wrap_class_vapor_CharacterController = { "CharacterController", &SWIGTYPE_p_vapor__CharacterController,_wrap_new_CharacterController, swig_delete_CharacterController, swig_vapor_CharacterController_methods, swig_vapor_CharacterController_attributes, swig_vapor_CharacterController_bases, swig_vapor_CharacterController_base_names };

static int _wrap_new_Entity__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *result = 0 ;
  
  SWIG_check_num_args("vapor::Entity",0,0)
  result = (vapor::Entity *)new vapor::Entity();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Entity__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  vapor::Entity *result = 0 ;
  
  SWIG_check_num_args("vapor::Entity",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("vapor::Entity",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (vapor::Entity *)new vapor::Entity((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Entity,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Entity(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Entity__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Entity__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Entity'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Entity()\n"
    "    vapor::Entity(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_getName(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  std::string *result = 0 ;
  
  SWIG_check_num_args("getName",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getName",1,"vapor::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getName",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (std::string *) &((vapor::Entity const *)arg1)->getName();
  lua_pushlstring(L,result->data(),result->size()); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setName(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  
  SWIG_check_num_args("setName",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setName",1,"vapor::Entity *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("setName",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_setName",1,SWIGTYPE_p_vapor__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  (arg1)->setName((std::string const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_isVisible(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  bool result;
  
  SWIG_check_num_args("isVisible",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("isVisible",1,"vapor::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_isVisible",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (bool)((vapor::Entity const *)arg1)->isVisible();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setVisible(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  bool arg2 ;
  
  SWIG_check_num_args("setVisible",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setVisible",1,"vapor::Entity *");
  if(!lua_isboolean(L,2)) SWIG_fail_arg("setVisible",2,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_setVisible",1,SWIGTYPE_p_vapor__Entity);
  }
  
  arg2 = (lua_toboolean(L, 2)!=0);
  (arg1)->setVisible(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getParent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  vapor::Entity *result = 0 ;
  
  SWIG_check_num_args("getParent",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getParent",1,"vapor::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getParent",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (vapor::Entity *)((vapor::Entity const *)arg1)->getParent();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Entity,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setParent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  vapor::Entity *arg2 = (vapor::Entity *) 0 ;
  
  SWIG_check_num_args("setParent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setParent",1,"vapor::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("setParent",2,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_setParent",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_setParent",2,SWIGTYPE_p_vapor__Entity);
  }
  
  (arg1)->setParent(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getTag(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  int arg2 ;
  bool result;
  
  SWIG_check_num_args("getTag",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTag",1,"vapor::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("getTag",2,"int");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getTag",1,SWIGTYPE_p_vapor__Entity);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  result = (bool)(arg1)->getTag(arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_setTag(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  int arg2 ;
  bool arg3 ;
  
  SWIG_check_num_args("setTag",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("setTag",1,"vapor::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("setTag",2,"int");
  if(!lua_isboolean(L,3)) SWIG_fail_arg("setTag",3,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_setTag",1,SWIGTYPE_p_vapor__Entity);
  }
  
  arg2 = (int)lua_tonumber(L, 2);
  arg3 = (lua_toboolean(L, 3)!=0);
  (arg1)->setTag(arg2,arg3);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_addComponent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  vapor::ComponentPtr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("addComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addComponent",1,"vapor::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("addComponent",2,"vapor::ComponentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_addComponent",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t,0))){
    SWIG_fail_ptr("Entity_addComponent",2,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t);
  }
  
  result = (bool)(arg1)->addComponent((vapor::ComponentPtr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_removeComponent(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  vapor::ComponentPtr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("removeComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("removeComponent",1,"vapor::Entity *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("removeComponent",2,"vapor::ComponentPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_removeComponent",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t,0))){
    SWIG_fail_ptr("Entity_removeComponent",2,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t);
  }
  
  result = (bool)(arg1)->removeComponent((vapor::ComponentPtr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getComponent__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::shared_ptr< vapor::Component > > result;
  
  SWIG_check_num_args("getComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponent",1,"vapor::Entity const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("getComponent",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getComponent",1,SWIGTYPE_p_vapor__Entity);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((vapor::Entity const *)arg1)->getComponent((std::string const &)*arg2);
  {
    vapor::ComponentPtr * resultptr = new vapor::ComponentPtr((const vapor::ComponentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getComponent__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  Type *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vapor::Component > > result;
  
  SWIG_check_num_args("getComponent",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponent",1,"vapor::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getComponent",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getComponent",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Entity_getComponent",2,SWIGTYPE_p_Type);
  }
  
  result = ((vapor::Entity const *)arg1)->getComponent((Type const &)*arg2);
  {
    vapor::ComponentPtr * resultptr = new vapor::ComponentPtr((const vapor::ComponentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getComponent(lua_State* L) {
  int argc;
  int argv[3]={
    1,2,3
  };
  
  argc = lua_gettop(L);
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_Type, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        return _wrap_Entity_getComponent__SWIG_1(L);
      }
    }
  }
  if (argc == 2) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Entity, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        _v = lua_isstring(L,argv[1]);
      }
      if (_v) {
        return _wrap_Entity_getComponent__SWIG_0(L);
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Entity_getComponent'\n"
    "  Possible C/C++ prototypes are:\n"
    "    getComponent(vapor::Entity const *,std::string const &)\n"
    "    getComponent(vapor::Entity const *,Type const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Entity_getComponentFromFamily(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  Type *arg2 = 0 ;
  SwigValueWrapper< std::shared_ptr< vapor::Component > > result;
  
  SWIG_check_num_args("getComponentFromFamily",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponentFromFamily",1,"vapor::Entity const *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("getComponentFromFamily",2,"Type const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getComponentFromFamily",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Type,0))){
    SWIG_fail_ptr("Entity_getComponentFromFamily",2,SWIGTYPE_p_Type);
  }
  
  result = ((vapor::Entity const *)arg1)->getComponentFromFamily((Type const &)*arg2);
  {
    vapor::ComponentPtr * resultptr = new vapor::ComponentPtr((const vapor::ComponentPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_vapor__Component_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_addTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  bool result;
  
  SWIG_check_num_args("addTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("addTransform",1,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_addTransform",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (bool)(arg1)->addTransform();
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getTransform(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  SwigValueWrapper< std::shared_ptr< vapor::Transform > > result;
  
  SWIG_check_num_args("getTransform",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getTransform",1,"vapor::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getTransform",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = ((vapor::Entity const *)arg1)->getTransform();
  {
    vapor::TransformPtr * resultptr = new vapor::TransformPtr((const vapor::TransformPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_vapor__Transform_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getComponents(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  vapor::ComponentMap *result = 0 ;
  
  SWIG_check_num_args("getComponents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getComponents",1,"vapor::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getComponents",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (vapor::ComponentMap *) &((vapor::Entity const *)arg1)->getComponents();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getGeometry(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  SwigValueWrapper< std::vector< std::shared_ptr< vapor::Geometry > > > result;
  
  SWIG_check_num_args("getGeometry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getGeometry",1,"vapor::Entity const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getGeometry",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = ((vapor::Entity const *)arg1)->getGeometry();
  {
    std::vector< vapor::GeometryPtr > * resultptr = new std::vector< vapor::GeometryPtr >((const std::vector< vapor::GeometryPtr > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_getShared(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  SwigValueWrapper< std::shared_ptr< vapor::Entity > > result;
  
  SWIG_check_num_args("getShared",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getShared",1,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_getShared",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (arg1)->getShared();
  {
    vapor::EntityPtr * resultptr = new vapor::EntityPtr((const vapor::EntityPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Entity *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_update",1,SWIGTYPE_p_vapor__Entity);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_fixUp(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  
  SWIG_check_num_args("fixUp",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("fixUp",1,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_fixUp",1,SWIGTYPE_p_vapor__Entity);
  }
  
  (arg1)->fixUp();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_sendEvents(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  
  SWIG_check_num_args("sendEvents",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("sendEvents",1,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_sendEvents",1,SWIGTYPE_p_vapor__Entity);
  }
  
  (arg1)->sendEvents();
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_onComponentAdded_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  Event1< vapor::ComponentPtr const & > *arg2 = (Event1< vapor::ComponentPtr const & > *) 0 ;
  
  SWIG_check_num_args("onComponentAdded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onComponentAdded",1,"vapor::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("onComponentAdded",2,"Event1< vapor::ComponentPtr const & > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_onComponentAdded_set",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t,0))){
    SWIG_fail_ptr("Entity_onComponentAdded_set",2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t);
  }
  
  if (arg1) (arg1)->onComponentAdded = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_onComponentAdded_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  Event1< vapor::ComponentPtr const & > *result = 0 ;
  
  SWIG_check_num_args("onComponentAdded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onComponentAdded",1,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_onComponentAdded_get",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (Event1< vapor::ComponentPtr const & > *)& ((arg1)->onComponentAdded);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_onComponentRemoved_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  Event1< vapor::ComponentPtr const & > *arg2 = (Event1< vapor::ComponentPtr const & > *) 0 ;
  
  SWIG_check_num_args("onComponentRemoved",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onComponentRemoved",1,"vapor::Entity *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("onComponentRemoved",2,"Event1< vapor::ComponentPtr const & > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_onComponentRemoved_set",1,SWIGTYPE_p_vapor__Entity);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t,0))){
    SWIG_fail_ptr("Entity_onComponentRemoved_set",2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t);
  }
  
  if (arg1) (arg1)->onComponentRemoved = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Entity_onComponentRemoved_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Entity *arg1 = (vapor::Entity *) 0 ;
  Event1< vapor::ComponentPtr const & > *result = 0 ;
  
  SWIG_check_num_args("onComponentRemoved",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onComponentRemoved",1,"vapor::Entity *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Entity,0))){
    SWIG_fail_ptr("Entity_onComponentRemoved_get",1,SWIGTYPE_p_vapor__Entity);
  }
  
  result = (Event1< vapor::ComponentPtr const & > *)& ((arg1)->onComponentRemoved);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Entity(void *obj) {
vapor::Entity *arg1 = (vapor::Entity *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Entity_methods[] = {
    {"getName", _wrap_Entity_getName}, 
    {"setName", _wrap_Entity_setName}, 
    {"isVisible", _wrap_Entity_isVisible}, 
    {"setVisible", _wrap_Entity_setVisible}, 
    {"getParent", _wrap_Entity_getParent}, 
    {"setParent", _wrap_Entity_setParent}, 
    {"getTag", _wrap_Entity_getTag}, 
    {"setTag", _wrap_Entity_setTag}, 
    {"addComponent", _wrap_Entity_addComponent}, 
    {"removeComponent", _wrap_Entity_removeComponent}, 
    {"getComponent", _wrap_Entity_getComponent}, 
    {"getComponentFromFamily", _wrap_Entity_getComponentFromFamily}, 
    {"addTransform", _wrap_Entity_addTransform}, 
    {"getTransform", _wrap_Entity_getTransform}, 
    {"getComponents", _wrap_Entity_getComponents}, 
    {"getGeometry", _wrap_Entity_getGeometry}, 
    {"getShared", _wrap_Entity_getShared}, 
    {"update", _wrap_Entity_update}, 
    {"fixUp", _wrap_Entity_fixUp}, 
    {"sendEvents", _wrap_Entity_sendEvents}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Entity_attributes[] = {
    { "onComponentAdded", _wrap_Entity_onComponentAdded_get, _wrap_Entity_onComponentAdded_set},
    { "onComponentRemoved", _wrap_Entity_onComponentRemoved_get, _wrap_Entity_onComponentRemoved_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Entity_bases[] = {0};
static const char *swig_vapor_Entity_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_Entity = { "Entity", &SWIGTYPE_p_vapor__Entity,_wrap_new_Entity, swig_delete_Entity, swig_vapor_Entity_methods, swig_vapor_Entity_attributes, swig_vapor_Entity_bases, swig_vapor_Entity_base_names };

static int _wrap_new_Group__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *result = 0 ;
  
  SWIG_check_num_args("vapor::Group",0,0)
  result = (vapor::Group *)new vapor::Group();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Group,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Group__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  std::string *arg1 = 0 ;
  std::string temp1 ;
  vapor::Group *result = 0 ;
  
  SWIG_check_num_args("vapor::Group",1,1)
  if(!lua_isstring(L,1)) SWIG_fail_arg("vapor::Group",1,"std::string const &");
  temp1.assign(lua_tostring(L,1),lua_strlen(L,1)); arg1=&temp1;
  result = (vapor::Group *)new vapor::Group((std::string const &)*arg1);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Group,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_Group(lua_State* L) {
  int argc;
  int argv[2]={
    1,2
  };
  
  argc = lua_gettop(L);
  if (argc == 0) {
    return _wrap_new_Group__SWIG_0(L);
  }
  if (argc == 1) {
    int _v;
    {
      _v = lua_isstring(L,argv[0]);
    }
    if (_v) {
      return _wrap_new_Group__SWIG_1(L);
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'new_Group'\n"
    "  Possible C/C++ prototypes are:\n"
    "    vapor::Group()\n"
    "    vapor::Group(std::string const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Group_add(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  vapor::EntityPtr *arg2 = 0 ;
  
  SWIG_check_num_args("add",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("add",1,"vapor::Group *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("add",2,"vapor::EntityPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_add",1,SWIGTYPE_p_vapor__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0))){
    SWIG_fail_ptr("Group_add",2,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t);
  }
  
  (arg1)->add((vapor::EntityPtr const &)*arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_remove(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  vapor::EntityPtr *arg2 = 0 ;
  bool result;
  
  SWIG_check_num_args("remove",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("remove",1,"vapor::Group *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("remove",2,"vapor::EntityPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_remove",1,SWIGTYPE_p_vapor__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0))){
    SWIG_fail_ptr("Group_remove",2,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t);
  }
  
  result = (bool)(arg1)->remove((vapor::EntityPtr const &)*arg2);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_findEntity(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  std::string *arg2 = 0 ;
  std::string temp2 ;
  SwigValueWrapper< std::shared_ptr< vapor::Entity > > result;
  
  SWIG_check_num_args("findEntity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("findEntity",1,"vapor::Group const *");
  if(!lua_isstring(L,2)) SWIG_fail_arg("findEntity",2,"std::string const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_findEntity",1,SWIGTYPE_p_vapor__Group);
  }
  
  temp2.assign(lua_tostring(L,2),lua_strlen(L,2)); arg2=&temp2;
  result = ((vapor::Group const *)arg1)->findEntity((std::string const &)*arg2);
  {
    vapor::EntityPtr * resultptr = new vapor::EntityPtr((const vapor::EntityPtr &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_getEntities(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  std::vector< vapor::EntityPtr > *result = 0 ;
  
  SWIG_check_num_args("getEntities",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("getEntities",1,"vapor::Group const *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_getEntities",1,SWIGTYPE_p_vapor__Group);
  }
  
  result = (std::vector< vapor::EntityPtr > *) &((vapor::Group const *)arg1)->getEntities();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Group *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_update",1,SWIGTYPE_p_vapor__Group);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_onEntityAdded_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  Event1< vapor::EntityPtr const & > *arg2 = (Event1< vapor::EntityPtr const & > *) 0 ;
  
  SWIG_check_num_args("onEntityAdded",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onEntityAdded",1,"vapor::Group *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("onEntityAdded",2,"Event1< vapor::EntityPtr const & > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_onEntityAdded_set",1,SWIGTYPE_p_vapor__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t,0))){
    SWIG_fail_ptr("Group_onEntityAdded_set",2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t);
  }
  
  if (arg1) (arg1)->onEntityAdded = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_onEntityAdded_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  Event1< vapor::EntityPtr const & > *result = 0 ;
  
  SWIG_check_num_args("onEntityAdded",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onEntityAdded",1,"vapor::Group *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_onEntityAdded_get",1,SWIGTYPE_p_vapor__Group);
  }
  
  result = (Event1< vapor::EntityPtr const & > *)& ((arg1)->onEntityAdded);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_onEntityRemoved_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  Event1< vapor::EntityPtr const & > *arg2 = (Event1< vapor::EntityPtr const & > *) 0 ;
  
  SWIG_check_num_args("onEntityRemoved",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onEntityRemoved",1,"vapor::Group *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("onEntityRemoved",2,"Event1< vapor::EntityPtr const & > *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_onEntityRemoved_set",1,SWIGTYPE_p_vapor__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t,0))){
    SWIG_fail_ptr("Group_onEntityRemoved_set",2,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t);
  }
  
  if (arg1) (arg1)->onEntityRemoved = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_onEntityRemoved_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  Event1< vapor::EntityPtr const & > *result = 0 ;
  
  SWIG_check_num_args("onEntityRemoved",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onEntityRemoved",1,"vapor::Group *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_onEntityRemoved_get",1,SWIGTYPE_p_vapor__Group);
  }
  
  result = (Event1< vapor::EntityPtr const & > *)& ((arg1)->onEntityRemoved);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_onEntityChanged_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  Event0< > arg2 ;
  Event0< > *argp2 ;
  
  SWIG_check_num_args("onEntityChanged",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onEntityChanged",1,"vapor::Group *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("onEntityChanged",2,"Event0< >");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_onEntityChanged_set",1,SWIGTYPE_p_vapor__Group);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&argp2,SWIGTYPE_p_Event0T_t,0))){
    SWIG_fail_ptr("Group_onEntityChanged_set",2,SWIGTYPE_p_Event0T_t);
  }
  arg2 = *argp2;
  
  if (arg1) (arg1)->onEntityChanged = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Group_onEntityChanged_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Group *arg1 = (vapor::Group *) 0 ;
  Event0< > result;
  
  SWIG_check_num_args("onEntityChanged",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("onEntityChanged",1,"vapor::Group *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Group,0))){
    SWIG_fail_ptr("Group_onEntityChanged_get",1,SWIGTYPE_p_vapor__Group);
  }
  
  result =  ((arg1)->onEntityChanged);
  {
    Event0< > * resultptr = new Event0< >((const Event0< > &) result);
    SWIG_NewPointerObj(L,(void *) resultptr,SWIGTYPE_p_Event0T_t,1); SWIG_arg++;
  }
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Group(void *obj) {
vapor::Group *arg1 = (vapor::Group *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Group_methods[] = {
    {"add", _wrap_Group_add}, 
    {"remove", _wrap_Group_remove}, 
    {"findEntity", _wrap_Group_findEntity}, 
    {"getEntities", _wrap_Group_getEntities}, 
    {"update", _wrap_Group_update}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Group_attributes[] = {
    { "onEntityAdded", _wrap_Group_onEntityAdded_get, _wrap_Group_onEntityAdded_set},
    { "onEntityRemoved", _wrap_Group_onEntityRemoved_get, _wrap_Group_onEntityRemoved_set},
    { "onEntityChanged", _wrap_Group_onEntityChanged_get, _wrap_Group_onEntityChanged_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_Group_bases[] = {0,0};
static const char *swig_vapor_Group_base_names[] = {"vapor::Entity *",0};
static swig_lua_class _wrap_class_vapor_Group = { "Group", &SWIGTYPE_p_vapor__Group,_wrap_new_Group, swig_delete_Group, swig_vapor_Group_methods, swig_vapor_Group_attributes, swig_vapor_Group_bases, swig_vapor_Group_base_names };

static int _wrap_RayQueryResult_entity_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayQueryResult *arg1 = (vapor::RayQueryResult *) 0 ;
  vapor::EntityPtr *arg2 = (vapor::EntityPtr *) 0 ;
  
  SWIG_check_num_args("entity",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("entity",1,"vapor::RayQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("entity",2,"vapor::EntityPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayQueryResult,0))){
    SWIG_fail_ptr("RayQueryResult_entity_set",1,SWIGTYPE_p_vapor__RayQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0))){
    SWIG_fail_ptr("RayQueryResult_entity_set",2,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t);
  }
  
  if (arg1) (arg1)->entity = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryResult_entity_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayQueryResult *arg1 = (vapor::RayQueryResult *) 0 ;
  vapor::EntityPtr *result = 0 ;
  
  SWIG_check_num_args("entity",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("entity",1,"vapor::RayQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayQueryResult,0))){
    SWIG_fail_ptr("RayQueryResult_entity_get",1,SWIGTYPE_p_vapor__RayQueryResult);
  }
  
  result = (vapor::EntityPtr *)& ((arg1)->entity);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryResult_distance_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayQueryResult *arg1 = (vapor::RayQueryResult *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("distance",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("distance",1,"vapor::RayQueryResult *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("distance",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayQueryResult,0))){
    SWIG_fail_ptr("RayQueryResult_distance_set",1,SWIGTYPE_p_vapor__RayQueryResult);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  if (arg1) (arg1)->distance = arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayQueryResult_distance_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayQueryResult *arg1 = (vapor::RayQueryResult *) 0 ;
  float result;
  
  SWIG_check_num_args("distance",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("distance",1,"vapor::RayQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayQueryResult,0))){
    SWIG_fail_ptr("RayQueryResult_distance_get",1,SWIGTYPE_p_vapor__RayQueryResult);
  }
  
  result = (float) ((arg1)->distance);
  lua_pushnumber(L, (lua_Number) result); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RayQueryResult(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayQueryResult *result = 0 ;
  
  SWIG_check_num_args("vapor::RayQueryResult::RayQueryResult",0,0)
  result = (vapor::RayQueryResult *)new vapor::RayQueryResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__RayQueryResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RayQueryResult(void *obj) {
vapor::RayQueryResult *arg1 = (vapor::RayQueryResult *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_RayQueryResult_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_RayQueryResult_attributes[] = {
    { "entity", _wrap_RayQueryResult_entity_get, _wrap_RayQueryResult_entity_set},
    { "distance", _wrap_RayQueryResult_distance_get, _wrap_RayQueryResult_distance_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_RayQueryResult_bases[] = {0};
static const char *swig_vapor_RayQueryResult_base_names[] = {0};
static swig_lua_class _wrap_class_vapor_RayQueryResult = { "RayQueryResult", &SWIGTYPE_p_vapor__RayQueryResult,_wrap_new_RayQueryResult, swig_delete_RayQueryResult, swig_vapor_RayQueryResult_methods, swig_vapor_RayQueryResult_attributes, swig_vapor_RayQueryResult_bases, swig_vapor_RayQueryResult_base_names };

static int _wrap_RayTriangleQueryResult_geometry_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::GeometryPtr *arg2 = (vapor::GeometryPtr *) 0 ;
  
  SWIG_check_num_args("geometry",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("geometry",1,"vapor::RayTriangleQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("geometry",2,"vapor::GeometryPtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_geometry_set",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_std__shared_ptrT_vapor__Geometry_t,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_geometry_set",2,SWIGTYPE_p_std__shared_ptrT_vapor__Geometry_t);
  }
  
  if (arg1) (arg1)->geometry = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_geometry_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::GeometryPtr *result = 0 ;
  
  SWIG_check_num_args("geometry",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("geometry",1,"vapor::RayTriangleQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_geometry_get",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (vapor::GeometryPtr *)& ((arg1)->geometry);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_std__shared_ptrT_vapor__Geometry_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_renderable_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::RenderablePtr *arg2 = (vapor::RenderablePtr *) 0 ;
  
  SWIG_check_num_args("renderable",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("renderable",1,"vapor::RayTriangleQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("renderable",2,"vapor::RenderablePtr *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_renderable_set",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_renderable_set",2,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t);
  }
  
  if (arg1) (arg1)->renderable = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_renderable_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::RenderablePtr *result = 0 ;
  
  SWIG_check_num_args("renderable",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("renderable",1,"vapor::RayTriangleQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_renderable_get",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (vapor::RenderablePtr *)& ((arg1)->renderable);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_intersection_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *arg2 = (vapor::Vector3 *) 0 ;
  
  SWIG_check_num_args("intersection",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersection",1,"vapor::RayTriangleQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("intersection",2,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_intersection_set",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_intersection_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  if (arg1) (arg1)->intersection = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_intersection_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("intersection",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersection",1,"vapor::RayTriangleQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_intersection_get",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (vapor::Vector3 *)& ((arg1)->intersection);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_intersectionUV_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *arg2 = (vapor::Vector3 *) 0 ;
  
  SWIG_check_num_args("intersectionUV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersectionUV",1,"vapor::RayTriangleQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("intersectionUV",2,"vapor::Vector3 *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_intersectionUV_set",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_intersectionUV_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  if (arg1) (arg1)->intersectionUV = *arg2;
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_intersectionUV_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("intersectionUV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("intersectionUV",1,"vapor::RayTriangleQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_intersectionUV_get",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (vapor::Vector3 *)& ((arg1)->intersectionUV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_trianglePosition_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *arg2 ;
  
  SWIG_check_num_args("trianglePosition",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("trianglePosition",1,"vapor::RayTriangleQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("trianglePosition",2,"vapor::Vector3 [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_trianglePosition_set",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_trianglePosition_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  {
    size_t ii;
    vapor::Vector3 *b = (vapor::Vector3 *) arg1->trianglePosition;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((vapor::Vector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_trianglePosition_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("trianglePosition",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("trianglePosition",1,"vapor::RayTriangleQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_trianglePosition_get",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (vapor::Vector3 *)(vapor::Vector3 *) ((arg1)->trianglePosition);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_triangleUV_set(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *arg2 ;
  
  SWIG_check_num_args("triangleUV",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangleUV",1,"vapor::RayTriangleQueryResult *");
  if(!SWIG_isptrtype(L,2)) SWIG_fail_arg("triangleUV",2,"vapor::Vector3 [3]");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_triangleUV_set",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Vector3,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_triangleUV_set",2,SWIGTYPE_p_vapor__Vector3);
  }
  
  {
    size_t ii;
    vapor::Vector3 *b = (vapor::Vector3 *) arg1->triangleUV;
    for (ii = 0; ii < (size_t)3; ii++) b[ii] = *((vapor::Vector3 *) arg2 + ii);
  }
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_RayTriangleQueryResult_triangleUV_get(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) 0 ;
  vapor::Vector3 *result = 0 ;
  
  SWIG_check_num_args("triangleUV",1,1)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("triangleUV",1,"vapor::RayTriangleQueryResult *");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("RayTriangleQueryResult_triangleUV_get",1,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (vapor::Vector3 *)(vapor::Vector3 *) ((arg1)->triangleUV);
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Vector3,0); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_new_RayTriangleQueryResult(lua_State* L) {
  int SWIG_arg = 0;
  vapor::RayTriangleQueryResult *result = 0 ;
  
  SWIG_check_num_args("vapor::RayTriangleQueryResult::RayTriangleQueryResult",0,0)
  result = (vapor::RayTriangleQueryResult *)new vapor::RayTriangleQueryResult();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__RayTriangleQueryResult,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_RayTriangleQueryResult(void *obj) {
vapor::RayTriangleQueryResult *arg1 = (vapor::RayTriangleQueryResult *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_RayTriangleQueryResult_methods[] = {
    {0,0}
};
static swig_lua_attribute swig_vapor_RayTriangleQueryResult_attributes[] = {
    { "geometry", _wrap_RayTriangleQueryResult_geometry_get, _wrap_RayTriangleQueryResult_geometry_set},
    { "renderable", _wrap_RayTriangleQueryResult_renderable_get, _wrap_RayTriangleQueryResult_renderable_set},
    { "intersection", _wrap_RayTriangleQueryResult_intersection_get, _wrap_RayTriangleQueryResult_intersection_set},
    { "intersectionUV", _wrap_RayTriangleQueryResult_intersectionUV_get, _wrap_RayTriangleQueryResult_intersectionUV_set},
    { "trianglePosition", _wrap_RayTriangleQueryResult_trianglePosition_get, _wrap_RayTriangleQueryResult_trianglePosition_set},
    { "triangleUV", _wrap_RayTriangleQueryResult_triangleUV_get, _wrap_RayTriangleQueryResult_triangleUV_set},
    {0,0,0}
};
static swig_lua_class *swig_vapor_RayTriangleQueryResult_bases[] = {0,0};
static const char *swig_vapor_RayTriangleQueryResult_base_names[] = {"vapor::RayQueryResult *",0};
static swig_lua_class _wrap_class_vapor_RayTriangleQueryResult = { "RayTriangleQueryResult", &SWIGTYPE_p_vapor__RayTriangleQueryResult,_wrap_new_RayTriangleQueryResult, swig_delete_RayTriangleQueryResult, swig_vapor_RayTriangleQueryResult_methods, swig_vapor_RayTriangleQueryResult_attributes, swig_vapor_RayTriangleQueryResult_bases, swig_vapor_RayTriangleQueryResult_base_names };

static int _wrap_new_Scene(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *result = 0 ;
  
  SWIG_check_num_args("vapor::Scene",0,0)
  result = (vapor::Scene *)new vapor::Scene();
  SWIG_NewPointerObj(L,result,SWIGTYPE_p_vapor__Scene,1); SWIG_arg++; 
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_update(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  float arg2 ;
  
  SWIG_check_num_args("update",2,2)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("update",1,"vapor::Scene *");
  if(!lua_isnumber(L,2)) SWIG_fail_arg("update",2,"float");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_update",1,SWIGTYPE_p_vapor__Scene);
  }
  
  arg2 = (float)lua_tonumber(L, 2);
  (arg1)->update(arg2);
  
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayBoxQuery__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Ray *arg2 = 0 ;
  vapor::RayQueryResult *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("doRayBoxQuery",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayBoxQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayBoxQuery",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayBoxQuery",3,"vapor::RayQueryResult &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_vapor__RayQueryResult,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",3,SWIGTYPE_p_vapor__RayQueryResult);
  }
  
  result = (bool)(arg1)->doRayBoxQuery((vapor::Ray const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayBoxQuery__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Ray *arg2 = 0 ;
  vapor::RayQueryList *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("doRayBoxQuery",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayBoxQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayBoxQuery",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayBoxQuery",3,"vapor::RayQueryList &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("doRayBoxQuery",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->doRayBoxQuery((vapor::Ray const &)*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayBoxQuery__SWIG_2(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Ray *arg2 = 0 ;
  vapor::RayQueryList *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("doRayBoxQuery",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayBoxQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayBoxQuery",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayBoxQuery",3,"vapor::RayQueryList &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t,0))){
    SWIG_fail_ptr("Scene_doRayBoxQuery",3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t);
  }
  
  result = (bool)(arg1)->doRayBoxQuery((vapor::Ray const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayBoxQuery(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_vapor__RayQueryResult, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_doRayBoxQuery__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_doRayBoxQuery__SWIG_2(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Scene_doRayBoxQuery__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Scene_doRayBoxQuery'\n"
    "  Possible C/C++ prototypes are:\n"
    "    doRayBoxQuery(vapor::Scene *,vapor::Ray const &,vapor::RayQueryResult &)\n"
    "    doRayBoxQuery(vapor::Scene *,vapor::Ray const &,vapor::RayQueryList &,bool)\n"
    "    doRayBoxQuery(vapor::Scene *,vapor::Ray const &,vapor::RayQueryList &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_doRayVolumeQuery__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Frustum *arg2 = 0 ;
  vapor::RayQueryList *arg3 = 0 ;
  bool arg4 ;
  bool result;
  
  SWIG_check_num_args("doRayVolumeQuery",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayVolumeQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayVolumeQuery",2,"vapor::Frustum const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayVolumeQuery",3,"vapor::RayQueryList &");
  if(!lua_isboolean(L,4)) SWIG_fail_arg("doRayVolumeQuery",4,"bool");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayVolumeQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Frustum,0))){
    SWIG_fail_ptr("Scene_doRayVolumeQuery",2,SWIGTYPE_p_vapor__Frustum);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t,0))){
    SWIG_fail_ptr("Scene_doRayVolumeQuery",3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t);
  }
  
  arg4 = (lua_toboolean(L, 4)!=0);
  result = (bool)(arg1)->doRayVolumeQuery((vapor::Frustum const &)*arg2,*arg3,arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayVolumeQuery__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Frustum *arg2 = 0 ;
  vapor::RayQueryList *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("doRayVolumeQuery",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayVolumeQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayVolumeQuery",2,"vapor::Frustum const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayVolumeQuery",3,"vapor::RayQueryList &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayVolumeQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Frustum,0))){
    SWIG_fail_ptr("Scene_doRayVolumeQuery",2,SWIGTYPE_p_vapor__Frustum);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t,0))){
    SWIG_fail_ptr("Scene_doRayVolumeQuery",3,SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t);
  }
  
  result = (bool)(arg1)->doRayVolumeQuery((vapor::Frustum const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayVolumeQuery(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Frustum, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_doRayVolumeQuery__SWIG_1(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Frustum, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_std__vectorT_vapor__RayQueryResult_t, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            _v = lua_isboolean(L,argv[3]);
          }
          if (_v) {
            return _wrap_Scene_doRayVolumeQuery__SWIG_0(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Scene_doRayVolumeQuery'\n"
    "  Possible C/C++ prototypes are:\n"
    "    doRayVolumeQuery(vapor::Scene *,vapor::Frustum const &,vapor::RayQueryList &,bool)\n"
    "    doRayVolumeQuery(vapor::Scene *,vapor::Frustum const &,vapor::RayQueryList &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_doRayTriangleQuery__SWIG_0(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Ray *arg2 = 0 ;
  vapor::RayTriangleQueryResult *arg3 = 0 ;
  bool result;
  
  SWIG_check_num_args("doRayTriangleQuery",3,3)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayTriangleQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayTriangleQuery",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayTriangleQuery",3,"vapor::RayTriangleQueryResult &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",3,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (bool)(arg1)->doRayTriangleQuery((vapor::Ray const &)*arg2,*arg3);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayTriangleQuery__SWIG_1(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Ray *arg2 = 0 ;
  vapor::RayTriangleQueryResult *arg3 = 0 ;
  vapor::EntityPtr *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("doRayTriangleQuery",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayTriangleQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayTriangleQuery",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayTriangleQuery",3,"vapor::RayTriangleQueryResult &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("doRayTriangleQuery",4,"vapor::EntityPtr const &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",3,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t,0))){
    SWIG_fail_ptr("Scene_doRayTriangleQuery",4,SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t);
  }
  
  result = (bool)(arg1)->doRayTriangleQuery((vapor::Ray const &)*arg2,*arg3,(vapor::EntityPtr const &)*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static int _wrap_Scene_doRayTriangleQuery(lua_State* L) {
  int argc;
  int argv[5]={
    1,2,3,4,5
  };
  
  argc = lua_gettop(L);
  if (argc == 3) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_vapor__RayTriangleQueryResult, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          return _wrap_Scene_doRayTriangleQuery__SWIG_0(L);
        }
      }
    }
  }
  if (argc == 4) {
    int _v;
    {
      void *ptr;
      if (SWIG_isptrtype(L,argv[0])==0 || SWIG_ConvertPtr(L,argv[0], (void **) &ptr, SWIGTYPE_p_vapor__Scene, 0)) {
        _v = 0;
      } else {
        _v = 1;
      }
    }
    if (_v) {
      {
        void *ptr;
        if (lua_isuserdata(L,argv[1])==0 || SWIG_ConvertPtr(L,argv[1], (void **) &ptr, SWIGTYPE_p_vapor__Ray, 0)) {
          _v = 0;
        } else {
          _v = 1;
        }
      }
      if (_v) {
        {
          void *ptr;
          if (lua_isuserdata(L,argv[2])==0 || SWIG_ConvertPtr(L,argv[2], (void **) &ptr, SWIGTYPE_p_vapor__RayTriangleQueryResult, 0)) {
            _v = 0;
          } else {
            _v = 1;
          }
        }
        if (_v) {
          {
            void *ptr;
            if (lua_isuserdata(L,argv[3])==0 || SWIG_ConvertPtr(L,argv[3], (void **) &ptr, SWIGTYPE_p_std__shared_ptrT_vapor__Entity_t, 0)) {
              _v = 0;
            } else {
              _v = 1;
            }
          }
          if (_v) {
            return _wrap_Scene_doRayTriangleQuery__SWIG_1(L);
          }
        }
      }
    }
  }
  
  lua_pushstring(L,"Wrong arguments for overloaded function 'Scene_doRayTriangleQuery'\n"
    "  Possible C/C++ prototypes are:\n"
    "    doRayTriangleQuery(vapor::Scene *,vapor::Ray const &,vapor::RayTriangleQueryResult &)\n"
    "    doRayTriangleQuery(vapor::Scene *,vapor::Ray const &,vapor::RayTriangleQueryResult &,vapor::EntityPtr const &)\n");
  lua_error(L);return 0;
}


static int _wrap_Scene_doRayRendQuery(lua_State* L) {
  int SWIG_arg = 0;
  vapor::Scene *arg1 = (vapor::Scene *) 0 ;
  vapor::Ray *arg2 = 0 ;
  vapor::RenderablePtr *arg3 = 0 ;
  vapor::RayTriangleQueryResult *arg4 = 0 ;
  bool result;
  
  SWIG_check_num_args("doRayRendQuery",4,4)
  if(!SWIG_isptrtype(L,1)) SWIG_fail_arg("doRayRendQuery",1,"vapor::Scene *");
  if(!lua_isuserdata(L,2)) SWIG_fail_arg("doRayRendQuery",2,"vapor::Ray const &");
  if(!lua_isuserdata(L,3)) SWIG_fail_arg("doRayRendQuery",3,"vapor::RenderablePtr const &");
  if(!lua_isuserdata(L,4)) SWIG_fail_arg("doRayRendQuery",4,"vapor::RayTriangleQueryResult &");
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,1,(void**)&arg1,SWIGTYPE_p_vapor__Scene,0))){
    SWIG_fail_ptr("Scene_doRayRendQuery",1,SWIGTYPE_p_vapor__Scene);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,2,(void**)&arg2,SWIGTYPE_p_vapor__Ray,0))){
    SWIG_fail_ptr("Scene_doRayRendQuery",2,SWIGTYPE_p_vapor__Ray);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,3,(void**)&arg3,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t,0))){
    SWIG_fail_ptr("Scene_doRayRendQuery",3,SWIGTYPE_p_vapor__RefPtrT_vapor__Renderable_t);
  }
  
  
  if (!SWIG_IsOK(SWIG_ConvertPtr(L,4,(void**)&arg4,SWIGTYPE_p_vapor__RayTriangleQueryResult,0))){
    SWIG_fail_ptr("Scene_doRayRendQuery",4,SWIGTYPE_p_vapor__RayTriangleQueryResult);
  }
  
  result = (bool)(arg1)->doRayRendQuery((vapor::Ray const &)*arg2,(vapor::RenderablePtr const &)*arg3,*arg4);
  lua_pushboolean(L,(int)(result!=0)); SWIG_arg++;
  return SWIG_arg;
  
  if(0) SWIG_fail;
  
fail:
  lua_error(L);
  return SWIG_arg;
}


static void swig_delete_Scene(void *obj) {
vapor::Scene *arg1 = (vapor::Scene *) obj;
delete arg1;
}
static swig_lua_method swig_vapor_Scene_methods[] = {
    {"update", _wrap_Scene_update}, 
    {"doRayBoxQuery", _wrap_Scene_doRayBoxQuery}, 
    {"doRayVolumeQuery", _wrap_Scene_doRayVolumeQuery}, 
    {"doRayTriangleQuery", _wrap_Scene_doRayTriangleQuery}, 
    {"doRayRendQuery", _wrap_Scene_doRayRendQuery}, 
    {0,0}
};
static swig_lua_attribute swig_vapor_Scene_attributes[] = {
    {0,0,0}
};
static swig_lua_class *swig_vapor_Scene_bases[] = {0,0};
static const char *swig_vapor_Scene_base_names[] = {"vapor::Group *",0};
static swig_lua_class _wrap_class_vapor_Scene = { "Scene", &SWIGTYPE_p_vapor__Scene,_wrap_new_Scene, swig_delete_Scene, swig_vapor_Scene_methods, swig_vapor_Scene_attributes, swig_vapor_Scene_bases, swig_vapor_Scene_base_names };

#ifdef __cplusplus
}
#endif

static const struct luaL_reg swig_commands[] = {
    { "LogDebug", _wrap_LogDebug},
    { "LogInfo", _wrap_LogInfo},
    { "LogWarn", _wrap_LogWarn},
    { "LogError", _wrap_LogError},
    { "Matrix4x3_lerp", _wrap_Matrix4x3_lerp},
    { "Matrix4x3_createTranslation", _wrap_Matrix4x3_createTranslation},
    { "Matrix4x3_createRotation", _wrap_Matrix4x3_createRotation},
    { "Matrix4x3_createScale", _wrap_Matrix4x3_createScale},
    { "Matrix4x3_createFromQuaternion", _wrap_Matrix4x3_createFromQuaternion},
    { "Matrix4x3_rotateX", _wrap_Matrix4x3_rotateX},
    { "Matrix4x3_rotateY", _wrap_Matrix4x3_rotateY},
    { "Matrix4x3_rotateZ", _wrap_Matrix4x3_rotateZ},
    {0,0}
};

static swig_lua_var_info swig_variables[] = {
    { "Color_White", _wrap_Color_White_get, SWIG_Lua_set_immutable },
    { "Color_Black", _wrap_Color_Black_get, SWIG_Lua_set_immutable },
    { "Color_LightGrey", _wrap_Color_LightGrey_get, SWIG_Lua_set_immutable },
    { "Color_Red", _wrap_Color_Red_get, SWIG_Lua_set_immutable },
    { "Color_Green", _wrap_Color_Green_get, SWIG_Lua_set_immutable },
    { "Color_Blue", _wrap_Color_Blue_get, SWIG_Lua_set_immutable },
    { "Color_NavyBlue", _wrap_Color_NavyBlue_get, SWIG_Lua_set_immutable },
    { "Color_SkyBlue", _wrap_Color_SkyBlue_get, SWIG_Lua_set_immutable },
    { "Color_Yellow", _wrap_Color_Yellow_get, SWIG_Lua_set_immutable },
    { "Quaternion_Identity", _wrap_Quaternion_Identity_get, SWIG_Lua_set_immutable },
    { "Matrix4x3_Identity", _wrap_Matrix4x3_Identity_get, SWIG_Lua_set_immutable },
    {0,0,0}
};

static swig_lua_const_info swig_constants[] = {
{ SWIG_LUA_INT,     (char *)"Keys_A", (long) vapor::Keys::A, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_B", (long) vapor::Keys::B, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_C", (long) vapor::Keys::C, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_D", (long) vapor::Keys::D, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_E", (long) vapor::Keys::E, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F", (long) vapor::Keys::F, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_G", (long) vapor::Keys::G, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_H", (long) vapor::Keys::H, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_I", (long) vapor::Keys::I, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_J", (long) vapor::Keys::J, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_K", (long) vapor::Keys::K, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_L", (long) vapor::Keys::L, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_M", (long) vapor::Keys::M, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_N", (long) vapor::Keys::N, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_O", (long) vapor::Keys::O, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_P", (long) vapor::Keys::P, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Q", (long) vapor::Keys::Q, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_R", (long) vapor::Keys::R, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_S", (long) vapor::Keys::S, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_T", (long) vapor::Keys::T, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_U", (long) vapor::Keys::U, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_V", (long) vapor::Keys::V, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_W", (long) vapor::Keys::W, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_X", (long) vapor::Keys::X, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Y", (long) vapor::Keys::Y, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Z", (long) vapor::Keys::Z, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num0", (long) vapor::Keys::Num0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num1", (long) vapor::Keys::Num1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num2", (long) vapor::Keys::Num2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num3", (long) vapor::Keys::Num3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num4", (long) vapor::Keys::Num4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num5", (long) vapor::Keys::Num5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num6", (long) vapor::Keys::Num6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num7", (long) vapor::Keys::Num7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num8", (long) vapor::Keys::Num8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Num9", (long) vapor::Keys::Num9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Escape", (long) vapor::Keys::Escape, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_LControl", (long) vapor::Keys::LControl, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_LShift", (long) vapor::Keys::LShift, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_LAlt", (long) vapor::Keys::LAlt, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_LSuper", (long) vapor::Keys::LSuper, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_RControl", (long) vapor::Keys::RControl, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_RShift", (long) vapor::Keys::RShift, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_RAlt", (long) vapor::Keys::RAlt, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_RSuper", (long) vapor::Keys::RSuper, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Menu", (long) vapor::Keys::Menu, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_LBracket", (long) vapor::Keys::LBracket, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_RBracket", (long) vapor::Keys::RBracket, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_SemiColon", (long) vapor::Keys::SemiColon, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Comma", (long) vapor::Keys::Comma, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Period", (long) vapor::Keys::Period, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Quote", (long) vapor::Keys::Quote, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Slash", (long) vapor::Keys::Slash, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_BackSlash", (long) vapor::Keys::BackSlash, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Tilde", (long) vapor::Keys::Tilde, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Equal", (long) vapor::Keys::Equal, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Dash", (long) vapor::Keys::Dash, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Space", (long) vapor::Keys::Space, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Return", (long) vapor::Keys::Return, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Back", (long) vapor::Keys::Back, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Tab", (long) vapor::Keys::Tab, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_PageUp", (long) vapor::Keys::PageUp, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_PageDown", (long) vapor::Keys::PageDown, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_End", (long) vapor::Keys::End, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Home", (long) vapor::Keys::Home, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Insert", (long) vapor::Keys::Insert, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Delete", (long) vapor::Keys::Delete, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Add", (long) vapor::Keys::Add, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Subtract", (long) vapor::Keys::Subtract, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Multiply", (long) vapor::Keys::Multiply, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Divide", (long) vapor::Keys::Divide, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Left", (long) vapor::Keys::Left, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Right", (long) vapor::Keys::Right, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Up", (long) vapor::Keys::Up, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Down", (long) vapor::Keys::Down, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad0", (long) vapor::Keys::Numpad0, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad1", (long) vapor::Keys::Numpad1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad2", (long) vapor::Keys::Numpad2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad3", (long) vapor::Keys::Numpad3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad4", (long) vapor::Keys::Numpad4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad5", (long) vapor::Keys::Numpad5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad6", (long) vapor::Keys::Numpad6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad7", (long) vapor::Keys::Numpad7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad8", (long) vapor::Keys::Numpad8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Numpad9", (long) vapor::Keys::Numpad9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F1", (long) vapor::Keys::F1, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F2", (long) vapor::Keys::F2, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F3", (long) vapor::Keys::F3, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F4", (long) vapor::Keys::F4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F5", (long) vapor::Keys::F5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F6", (long) vapor::Keys::F6, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F7", (long) vapor::Keys::F7, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F8", (long) vapor::Keys::F8, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F9", (long) vapor::Keys::F9, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F10", (long) vapor::Keys::F10, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F11", (long) vapor::Keys::F11, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F12", (long) vapor::Keys::F12, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F13", (long) vapor::Keys::F13, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F14", (long) vapor::Keys::F14, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_F15", (long) vapor::Keys::F15, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"Keys_Pause", (long) vapor::Keys::Pause, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyboardEventType_KeyPressed", (long) vapor::KeyboardEventType::KeyPressed, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"KeyboardEventType_KeyReleased", (long) vapor::KeyboardEventType::KeyReleased, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseButton_Left", (long) vapor::MouseButton::Left, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseButton_Right", (long) vapor::MouseButton::Right, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseButton_Middle", (long) vapor::MouseButton::Middle, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseButton_Mouse4", (long) vapor::MouseButton::Mouse4, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseButton_Mouse5", (long) vapor::MouseButton::Mouse5, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MouseWheelMove", (long) vapor::MouseEventType::MouseWheelMove, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MouseMove", (long) vapor::MouseEventType::MouseMove, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MouseDrag", (long) vapor::MouseEventType::MouseDrag, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MousePress", (long) vapor::MouseEventType::MousePress, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MouseRelease", (long) vapor::MouseEventType::MouseRelease, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MouseEnter", (long) vapor::MouseEventType::MouseEnter, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"MouseEventType_MouseExit", (long) vapor::MouseEventType::MouseExit, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LightType_Directional", (long) vapor::LightType::Directional, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LightType_Point", (long) vapor::LightType::Point, 0, 0, 0},
{ SWIG_LUA_INT,     (char *)"LightType_Spot", (long) vapor::LightType::Spot, 0, 0, 0},
    {0,0,0,0,0,0}
};

/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (BEGIN) -------- */

static void *_p_vapor__ResourceTo_p_vapor__ReferenceCounted(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::ReferenceCounted *)  ((vapor::Resource *) x));
}
static void *_p_vapor__MeshTo_p_vapor__ReferenceCounted(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::ReferenceCounted *) (vapor::Resource *) ((vapor::Mesh *) x));
}
static void *_p_vapor__GroupTo_p_vapor__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Entity *)  ((vapor::Group *) x));
}
static void *_p_vapor__SceneTo_p_vapor__Entity(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Entity *) (vapor::Group *) ((vapor::Scene *) x));
}
static void *_p_vapor__ControllerTo_p_vapor__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Component *)  ((vapor::Controller *) x));
}
static void *_p_vapor__CharacterControllerTo_p_vapor__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Component *) (vapor::Controller *) ((vapor::CharacterController *) x));
}
static void *_p_vapor__LightTo_p_vapor__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Component *)  ((vapor::Light *) x));
}
static void *_p_vapor__GeometryTo_p_vapor__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Component *)  ((vapor::Geometry *) x));
}
static void *_p_vapor__TransformTo_p_vapor__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Component *)  ((vapor::Transform *) x));
}
static void *_p_vapor__CameraTo_p_vapor__Component(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Component *)  ((vapor::Camera *) x));
}
static void *_p_vapor__MouseEventTo_p_vapor__InputEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::InputEvent *)  ((vapor::MouseEvent *) x));
}
static void *_p_vapor__MouseWheelEventTo_p_vapor__InputEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::InputEvent *) (vapor::MouseEvent *) ((vapor::MouseWheelEvent *) x));
}
static void *_p_vapor__MouseMoveEventTo_p_vapor__InputEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::InputEvent *) (vapor::MouseEvent *) ((vapor::MouseMoveEvent *) x));
}
static void *_p_vapor__MouseDragEventTo_p_vapor__InputEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::InputEvent *) (vapor::MouseEvent *) ((vapor::MouseDragEvent *) x));
}
static void *_p_vapor__MouseButtonEventTo_p_vapor__InputEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::InputEvent *) (vapor::MouseEvent *) ((vapor::MouseButtonEvent *) x));
}
static void *_p_vapor__KeyEventTo_p_vapor__InputEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::InputEvent *)  ((vapor::KeyEvent *) x));
}
static void *_p_vapor__SceneTo_p_vapor__Group(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Group *)  ((vapor::Scene *) x));
}
static void *_p_vapor__MeshTo_p_vapor__Resource(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Resource *)  ((vapor::Mesh *) x));
}
static void *_p_vapor__RayTriangleQueryResultTo_p_vapor__RayQueryResult(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::RayQueryResult *)  ((vapor::RayTriangleQueryResult *) x));
}
static void *_p_vapor__MouseWheelEventTo_p_vapor__MouseEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::MouseEvent *)  ((vapor::MouseWheelEvent *) x));
}
static void *_p_vapor__MouseMoveEventTo_p_vapor__MouseEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::MouseEvent *)  ((vapor::MouseMoveEvent *) x));
}
static void *_p_vapor__MouseDragEventTo_p_vapor__MouseEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::MouseEvent *)  ((vapor::MouseDragEvent *) x));
}
static void *_p_vapor__MouseButtonEventTo_p_vapor__MouseEvent(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::MouseEvent *)  ((vapor::MouseButtonEvent *) x));
}
static void *_p_vapor__CharacterControllerTo_p_vapor__Controller(void *x, int *SWIGUNUSEDPARM(newmemory)) {
    return (void *)((vapor::Controller *)  ((vapor::CharacterController *) x));
}
static swig_type_info _swigt__p_Event0T_t = {"_p_Event0T_t", "Event0< > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t = {"_p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t", "Event1< vapor::ComponentPtr const & > *|Event1< std::shared_ptr< vapor::Component > const & > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t = {"_p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t", "Event1< std::shared_ptr< vapor::Entity > const & > *|Event1< vapor::EntityPtr const & > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_SkeletonPtr = {"_p_SkeletonPtr", "SkeletonPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_Type = {"_p_Type", "Type *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_a_3__vapor__Vector3 = {"_p_a_3__vapor__Vector3", "vapor::Vector3 (*)[3]", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_char = {"_p_char", "char *|int8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_float = {"_p_float", "float *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_long = {"_p_long", "int32 *|sint32 *|vapor::Atomic *|long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_short = {"_p_short", "sint16 *|int16 *|short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_signed_char = {"_p_signed_char", "signed char *|sint8 *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t = {"_p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t", "vapor::ComponentMap *|std::map< Class const *,std::shared_ptr< vapor::Component > > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t = {"_p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t", "std::pair< Class const *,std::shared_ptr< vapor::Component > > *|vapor::ComponentMapPair *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Camera_t = {"_p_std__shared_ptrT_vapor__Camera_t", "std::shared_ptr< vapor::Camera > *|vapor::CameraPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__CharacterController_t = {"_p_std__shared_ptrT_vapor__CharacterController_t", "std::shared_ptr< vapor::CharacterController > *|vapor::CharacterControllerPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Component_t = {"_p_std__shared_ptrT_vapor__Component_t", "vapor::ComponentPtr *|std::shared_ptr< vapor::Component > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Controller_t = {"_p_std__shared_ptrT_vapor__Controller_t", "std::shared_ptr< vapor::Controller > *|vapor::ControllerPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Entity_t = {"_p_std__shared_ptrT_vapor__Entity_t", "std::shared_ptr< vapor::Entity > *|vapor::EntityPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Geometry_t = {"_p_std__shared_ptrT_vapor__Geometry_t", "std::shared_ptr< vapor::Geometry > *|vapor::GeometryPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Group_t = {"_p_std__shared_ptrT_vapor__Group_t", "std::shared_ptr< vapor::Group > *|vapor::GroupPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Light_t = {"_p_std__shared_ptrT_vapor__Light_t", "vapor::LightPtr *|std::shared_ptr< vapor::Light > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Model_t = {"_p_std__shared_ptrT_vapor__Model_t", "vapor::ModelPtr *|std::shared_ptr< vapor::Model > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Scene_t = {"_p_std__shared_ptrT_vapor__Scene_t", "std::shared_ptr< vapor::Scene > *|vapor::ScenePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__shared_ptrT_vapor__Transform_t = {"_p_std__shared_ptrT_vapor__Transform_t", "std::shared_ptr< vapor::Transform > *|vapor::TransformPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__string = {"_p_std__string", "vapor::Path *|std::string *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_float_t = {"_p_std__vectorT_float_t", "std::vector< float > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t = {"_p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t", "std::vector< std::shared_ptr< vapor::Entity > > *|std::vector< vapor::EntityPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t = {"_p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t", "std::vector< std::shared_ptr< vapor::Geometry > > *|std::vector< vapor::GeometryPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_unsigned_short_t = {"_p_std__vectorT_unsigned_short_t", "std::vector< unsigned short > *|std::vector< uint16 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vapor__MeshGroup_t = {"_p_std__vectorT_vapor__MeshGroup_t", "std::vector< vapor::MeshGroup > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vapor__RayQueryResult_t = {"_p_std__vectorT_vapor__RayQueryResult_t", "std::vector< vapor::RayQueryResult > *|vapor::RayQueryList *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t = {"_p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t", "std::vector< vapor::RefPtr< vapor::Animation > > *|std::vector< vapor::AnimationPtr > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t = {"_p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t", "std::vector< vapor::RefPtr< vapor::Renderable > > *|vapor::RenderableVector *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__vectorT_vapor__Vector3_t = {"_p_std__vectorT_vapor__Vector3_t", "std::vector< vapor::Vector3 > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_vapor__Camera_t = {"_p_std__weak_ptrT_vapor__Camera_t", "std::weak_ptr< vapor::Camera > *|vapor::CameraWeakPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_vapor__CharacterController_t = {"_p_std__weak_ptrT_vapor__CharacterController_t", "std::weak_ptr< vapor::CharacterController > *|vapor::CharacterControllerWeakPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_vapor__Component_t = {"_p_std__weak_ptrT_vapor__Component_t", "vapor::ComponentWeakPtr *|std::weak_ptr< vapor::Component > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_vapor__Entity_t = {"_p_std__weak_ptrT_vapor__Entity_t", "vapor::EntityWeakPtr *|std::weak_ptr< vapor::Entity > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_vapor__Geometry_t = {"_p_std__weak_ptrT_vapor__Geometry_t", "std::weak_ptr< vapor::Geometry > *|vapor::GeometryWeakPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_std__weak_ptrT_vapor__Scene_t = {"_p_std__weak_ptrT_vapor__Scene_t", "std::weak_ptr< vapor::Scene > *|vapor::SceneWeakPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_char = {"_p_unsigned_char", "unsigned char *|uint8 *|byte *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_long = {"_p_unsigned_long", "uint32 *|uint *|unsigned long *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_unsigned_short = {"_p_unsigned_short", "uint16 *|unsigned short *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__BoundingBox = {"_p_vapor__BoundingBox", "vapor::BoundingBox *", 0, 0, (void*)&_wrap_class_vapor_BoundingBox, 0};
static swig_type_info _swigt__p_vapor__Camera = {"_p_vapor__Camera", "vapor::Camera *", 0, 0, (void*)&_wrap_class_vapor_Camera, 0};
static swig_type_info _swigt__p_vapor__CharacterController = {"_p_vapor__CharacterController", "vapor::CharacterController *", 0, 0, (void*)&_wrap_class_vapor_CharacterController, 0};
static swig_type_info _swigt__p_vapor__Color = {"_p_vapor__Color", "vapor::Color *", 0, 0, (void*)&_wrap_class_vapor_Color, 0};
static swig_type_info _swigt__p_vapor__Component = {"_p_vapor__Component", "vapor::Component *", 0, 0, (void*)&_wrap_class_vapor_Component, 0};
static swig_type_info _swigt__p_vapor__Controller = {"_p_vapor__Controller", "vapor::Controller *", 0, 0, (void*)&_wrap_class_vapor_Controller, 0};
static swig_type_info _swigt__p_vapor__Entity = {"_p_vapor__Entity", "vapor::Entity *", 0, 0, (void*)&_wrap_class_vapor_Entity, 0};
static swig_type_info _swigt__p_vapor__EulerAngles = {"_p_vapor__EulerAngles", "vapor::EulerAngles *", 0, 0, (void*)&_wrap_class_vapor_EulerAngles, 0};
static swig_type_info _swigt__p_vapor__Frustum = {"_p_vapor__Frustum", "vapor::Frustum *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__Geometry = {"_p_vapor__Geometry", "vapor::Geometry *", 0, 0, (void*)&_wrap_class_vapor_Geometry, 0};
static swig_type_info _swigt__p_vapor__Group = {"_p_vapor__Group", "vapor::Group *", 0, 0, (void*)&_wrap_class_vapor_Group, 0};
static swig_type_info _swigt__p_vapor__InputEvent = {"_p_vapor__InputEvent", "vapor::InputEvent *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__KeyEvent = {"_p_vapor__KeyEvent", "vapor::KeyEvent *", 0, 0, (void*)&_wrap_class_vapor_KeyEvent, 0};
static swig_type_info _swigt__p_vapor__KeyboardEventType = {"_p_vapor__KeyboardEventType", "vapor::KeyboardEventType *", 0, 0, (void*)&_wrap_class_vapor_KeyboardEventType, 0};
static swig_type_info _swigt__p_vapor__Keys = {"_p_vapor__Keys", "vapor::Keys *", 0, 0, (void*)&_wrap_class_vapor_Keys, 0};
static swig_type_info _swigt__p_vapor__Light = {"_p_vapor__Light", "vapor::Light *", 0, 0, (void*)&_wrap_class_vapor_Light, 0};
static swig_type_info _swigt__p_vapor__LightType = {"_p_vapor__LightType", "vapor::LightType *", 0, 0, (void*)&_wrap_class_vapor_LightType, 0};
static swig_type_info _swigt__p_vapor__Matrix4x3 = {"_p_vapor__Matrix4x3", "vapor::Matrix4x3 *", 0, 0, (void*)&_wrap_class_vapor_Matrix4x3, 0};
static swig_type_info _swigt__p_vapor__Mesh = {"_p_vapor__Mesh", "vapor::Mesh *", 0, 0, (void*)&_wrap_class_vapor_Mesh, 0};
static swig_type_info _swigt__p_vapor__MeshGroup = {"_p_vapor__MeshGroup", "vapor::MeshGroup *", 0, 0, (void*)&_wrap_class_vapor_MeshGroup, 0};
static swig_type_info _swigt__p_vapor__MeshMaterial = {"_p_vapor__MeshMaterial", "vapor::MeshMaterial *", 0, 0, (void*)&_wrap_class_vapor_MeshMaterial, 0};
static swig_type_info _swigt__p_vapor__Model = {"_p_vapor__Model", "vapor::Model *", 0, 0, (void*)&_wrap_class_vapor_Model, 0};
static swig_type_info _swigt__p_vapor__MouseButton = {"_p_vapor__MouseButton", "vapor::MouseButton *", 0, 0, (void*)&_wrap_class_vapor_MouseButton, 0};
static swig_type_info _swigt__p_vapor__MouseButtonEvent = {"_p_vapor__MouseButtonEvent", "vapor::MouseButtonEvent *", 0, 0, (void*)&_wrap_class_vapor_MouseButtonEvent, 0};
static swig_type_info _swigt__p_vapor__MouseDragEvent = {"_p_vapor__MouseDragEvent", "vapor::MouseDragEvent *", 0, 0, (void*)&_wrap_class_vapor_MouseDragEvent, 0};
static swig_type_info _swigt__p_vapor__MouseEvent = {"_p_vapor__MouseEvent", "vapor::MouseEvent *", 0, 0, (void*)&_wrap_class_vapor_MouseEvent, 0};
static swig_type_info _swigt__p_vapor__MouseEventType = {"_p_vapor__MouseEventType", "vapor::MouseEventType *", 0, 0, (void*)&_wrap_class_vapor_MouseEventType, 0};
static swig_type_info _swigt__p_vapor__MouseInfo = {"_p_vapor__MouseInfo", "vapor::MouseInfo *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__MouseMoveEvent = {"_p_vapor__MouseMoveEvent", "vapor::MouseMoveEvent *", 0, 0, (void*)&_wrap_class_vapor_MouseMoveEvent, 0};
static swig_type_info _swigt__p_vapor__MouseWheelEvent = {"_p_vapor__MouseWheelEvent", "vapor::MouseWheelEvent *", 0, 0, (void*)&_wrap_class_vapor_MouseWheelEvent, 0};
static swig_type_info _swigt__p_vapor__Quaternion = {"_p_vapor__Quaternion", "vapor::Quaternion *", 0, 0, (void*)&_wrap_class_vapor_Quaternion, 0};
static swig_type_info _swigt__p_vapor__Ray = {"_p_vapor__Ray", "vapor::Ray *", 0, 0, (void*)&_wrap_class_vapor_Ray, 0};
static swig_type_info _swigt__p_vapor__RayQueryResult = {"_p_vapor__RayQueryResult", "vapor::RayQueryResult *", 0, 0, (void*)&_wrap_class_vapor_RayQueryResult, 0};
static swig_type_info _swigt__p_vapor__RayTriangleQueryResult = {"_p_vapor__RayTriangleQueryResult", "vapor::RayTriangleQueryResult *", 0, 0, (void*)&_wrap_class_vapor_RayTriangleQueryResult, 0};
static swig_type_info _swigt__p_vapor__RefPtrT_vapor__Animation_t = {"_p_vapor__RefPtrT_vapor__Animation_t", "vapor::AnimationPtr *|vapor::RefPtr< vapor::Animation > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RefPtrT_vapor__Attachment_t = {"_p_vapor__RefPtrT_vapor__Attachment_t", "vapor::AttachmentPtr *|vapor::RefPtr< vapor::Attachment > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RefPtrT_vapor__Bone_t = {"_p_vapor__RefPtrT_vapor__Bone_t", "vapor::RefPtr< vapor::Bone > *|vapor::BonePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RefPtrT_vapor__Mesh_t = {"_p_vapor__RefPtrT_vapor__Mesh_t", "vapor::RefPtr< vapor::Mesh > *|vapor::MeshPtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RefPtrT_vapor__Renderable_t = {"_p_vapor__RefPtrT_vapor__Renderable_t", "vapor::RenderablePtr *|vapor::RefPtr< vapor::Renderable > *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RefPtrT_vapor__Resource_t = {"_p_vapor__RefPtrT_vapor__Resource_t", "vapor::RefPtr< vapor::Resource > *|vapor::ResourcePtr *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__ReferenceCounted = {"_p_vapor__ReferenceCounted", "vapor::ReferenceCounted *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RenderBlock = {"_p_vapor__RenderBlock", "vapor::RenderBlock *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RenderQueue = {"_p_vapor__RenderQueue", "vapor::RenderQueue *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__RenderView = {"_p_vapor__RenderView", "vapor::RenderView *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__Resource = {"_p_vapor__Resource", "vapor::Resource *", 0, 0, (void*)0, 0};
static swig_type_info _swigt__p_vapor__Scene = {"_p_vapor__Scene", "vapor::Scene *", 0, 0, (void*)&_wrap_class_vapor_Scene, 0};
static swig_type_info _swigt__p_vapor__Transform = {"_p_vapor__Transform", "vapor::Transform *", 0, 0, (void*)&_wrap_class_vapor_Transform, 0};
static swig_type_info _swigt__p_vapor__Vector3 = {"_p_vapor__Vector3", "vapor::Vector3 *", 0, 0, (void*)0, 0};

static swig_type_info *swig_type_initial[] = {
  &_swigt__p_Event0T_t,
  &_swigt__p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t,
  &_swigt__p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t,
  &_swigt__p_SkeletonPtr,
  &_swigt__p_Type,
  &_swigt__p_a_3__vapor__Vector3,
  &_swigt__p_char,
  &_swigt__p_float,
  &_swigt__p_long,
  &_swigt__p_short,
  &_swigt__p_signed_char,
  &_swigt__p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t,
  &_swigt__p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t,
  &_swigt__p_std__shared_ptrT_vapor__Camera_t,
  &_swigt__p_std__shared_ptrT_vapor__CharacterController_t,
  &_swigt__p_std__shared_ptrT_vapor__Component_t,
  &_swigt__p_std__shared_ptrT_vapor__Controller_t,
  &_swigt__p_std__shared_ptrT_vapor__Entity_t,
  &_swigt__p_std__shared_ptrT_vapor__Geometry_t,
  &_swigt__p_std__shared_ptrT_vapor__Group_t,
  &_swigt__p_std__shared_ptrT_vapor__Light_t,
  &_swigt__p_std__shared_ptrT_vapor__Model_t,
  &_swigt__p_std__shared_ptrT_vapor__Scene_t,
  &_swigt__p_std__shared_ptrT_vapor__Transform_t,
  &_swigt__p_std__string,
  &_swigt__p_std__vectorT_float_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t,
  &_swigt__p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t,
  &_swigt__p_std__vectorT_unsigned_short_t,
  &_swigt__p_std__vectorT_vapor__MeshGroup_t,
  &_swigt__p_std__vectorT_vapor__RayQueryResult_t,
  &_swigt__p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t,
  &_swigt__p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t,
  &_swigt__p_std__vectorT_vapor__Vector3_t,
  &_swigt__p_std__weak_ptrT_vapor__Camera_t,
  &_swigt__p_std__weak_ptrT_vapor__CharacterController_t,
  &_swigt__p_std__weak_ptrT_vapor__Component_t,
  &_swigt__p_std__weak_ptrT_vapor__Entity_t,
  &_swigt__p_std__weak_ptrT_vapor__Geometry_t,
  &_swigt__p_std__weak_ptrT_vapor__Scene_t,
  &_swigt__p_unsigned_char,
  &_swigt__p_unsigned_long,
  &_swigt__p_unsigned_short,
  &_swigt__p_vapor__BoundingBox,
  &_swigt__p_vapor__Camera,
  &_swigt__p_vapor__CharacterController,
  &_swigt__p_vapor__Color,
  &_swigt__p_vapor__Component,
  &_swigt__p_vapor__Controller,
  &_swigt__p_vapor__Entity,
  &_swigt__p_vapor__EulerAngles,
  &_swigt__p_vapor__Frustum,
  &_swigt__p_vapor__Geometry,
  &_swigt__p_vapor__Group,
  &_swigt__p_vapor__InputEvent,
  &_swigt__p_vapor__KeyEvent,
  &_swigt__p_vapor__KeyboardEventType,
  &_swigt__p_vapor__Keys,
  &_swigt__p_vapor__Light,
  &_swigt__p_vapor__LightType,
  &_swigt__p_vapor__Matrix4x3,
  &_swigt__p_vapor__Mesh,
  &_swigt__p_vapor__MeshGroup,
  &_swigt__p_vapor__MeshMaterial,
  &_swigt__p_vapor__Model,
  &_swigt__p_vapor__MouseButton,
  &_swigt__p_vapor__MouseButtonEvent,
  &_swigt__p_vapor__MouseDragEvent,
  &_swigt__p_vapor__MouseEvent,
  &_swigt__p_vapor__MouseEventType,
  &_swigt__p_vapor__MouseInfo,
  &_swigt__p_vapor__MouseMoveEvent,
  &_swigt__p_vapor__MouseWheelEvent,
  &_swigt__p_vapor__Quaternion,
  &_swigt__p_vapor__Ray,
  &_swigt__p_vapor__RayQueryResult,
  &_swigt__p_vapor__RayTriangleQueryResult,
  &_swigt__p_vapor__RefPtrT_vapor__Animation_t,
  &_swigt__p_vapor__RefPtrT_vapor__Attachment_t,
  &_swigt__p_vapor__RefPtrT_vapor__Bone_t,
  &_swigt__p_vapor__RefPtrT_vapor__Mesh_t,
  &_swigt__p_vapor__RefPtrT_vapor__Renderable_t,
  &_swigt__p_vapor__RefPtrT_vapor__Resource_t,
  &_swigt__p_vapor__ReferenceCounted,
  &_swigt__p_vapor__RenderBlock,
  &_swigt__p_vapor__RenderQueue,
  &_swigt__p_vapor__RenderView,
  &_swigt__p_vapor__Resource,
  &_swigt__p_vapor__Scene,
  &_swigt__p_vapor__Transform,
  &_swigt__p_vapor__Vector3,
};

static swig_cast_info _swigc__p_Event0T_t[] = {  {&_swigt__p_Event0T_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t[] = {  {&_swigt__p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t[] = {  {&_swigt__p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_SkeletonPtr[] = {  {&_swigt__p_SkeletonPtr, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_Type[] = {  {&_swigt__p_Type, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_a_3__vapor__Vector3[] = {  {&_swigt__p_a_3__vapor__Vector3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_char[] = {  {&_swigt__p_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_float[] = {  {&_swigt__p_float, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_long[] = {  {&_swigt__p_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_short[] = {  {&_swigt__p_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_signed_char[] = {  {&_swigt__p_signed_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t[] = {  {&_swigt__p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t[] = {  {&_swigt__p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Camera_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Camera_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__CharacterController_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__CharacterController_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Component_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Component_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Controller_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Controller_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Entity_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Entity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Geometry_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Geometry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Group_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Group_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Light_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Light_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Model_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Model_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Scene_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Scene_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__shared_ptrT_vapor__Transform_t[] = {  {&_swigt__p_std__shared_ptrT_vapor__Transform_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__string[] = {  {&_swigt__p_std__string, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_float_t[] = {  {&_swigt__p_std__vectorT_float_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t[] = {  {&_swigt__p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_unsigned_short_t[] = {  {&_swigt__p_std__vectorT_unsigned_short_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vapor__MeshGroup_t[] = {  {&_swigt__p_std__vectorT_vapor__MeshGroup_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vapor__RayQueryResult_t[] = {  {&_swigt__p_std__vectorT_vapor__RayQueryResult_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t[] = {  {&_swigt__p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t[] = {  {&_swigt__p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__vectorT_vapor__Vector3_t[] = {  {&_swigt__p_std__vectorT_vapor__Vector3_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_vapor__Camera_t[] = {  {&_swigt__p_std__weak_ptrT_vapor__Camera_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_vapor__CharacterController_t[] = {  {&_swigt__p_std__weak_ptrT_vapor__CharacterController_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_vapor__Component_t[] = {  {&_swigt__p_std__weak_ptrT_vapor__Component_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_vapor__Entity_t[] = {  {&_swigt__p_std__weak_ptrT_vapor__Entity_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_vapor__Geometry_t[] = {  {&_swigt__p_std__weak_ptrT_vapor__Geometry_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_std__weak_ptrT_vapor__Scene_t[] = {  {&_swigt__p_std__weak_ptrT_vapor__Scene_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_char[] = {  {&_swigt__p_unsigned_char, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_long[] = {  {&_swigt__p_unsigned_long, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_unsigned_short[] = {  {&_swigt__p_unsigned_short, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__BoundingBox[] = {  {&_swigt__p_vapor__BoundingBox, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Camera[] = {  {&_swigt__p_vapor__Camera, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__CharacterController[] = {  {&_swigt__p_vapor__CharacterController, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Color[] = {  {&_swigt__p_vapor__Color, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Component[] = {  {&_swigt__p_vapor__Component, 0, 0, 0},  {&_swigt__p_vapor__Controller, _p_vapor__ControllerTo_p_vapor__Component, 0, 0},  {&_swigt__p_vapor__CharacterController, _p_vapor__CharacterControllerTo_p_vapor__Component, 0, 0},  {&_swigt__p_vapor__Light, _p_vapor__LightTo_p_vapor__Component, 0, 0},  {&_swigt__p_vapor__Geometry, _p_vapor__GeometryTo_p_vapor__Component, 0, 0},  {&_swigt__p_vapor__Transform, _p_vapor__TransformTo_p_vapor__Component, 0, 0},  {&_swigt__p_vapor__Camera, _p_vapor__CameraTo_p_vapor__Component, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Controller[] = {  {&_swigt__p_vapor__Controller, 0, 0, 0},  {&_swigt__p_vapor__CharacterController, _p_vapor__CharacterControllerTo_p_vapor__Controller, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Entity[] = {  {&_swigt__p_vapor__Group, _p_vapor__GroupTo_p_vapor__Entity, 0, 0},  {&_swigt__p_vapor__Scene, _p_vapor__SceneTo_p_vapor__Entity, 0, 0},  {&_swigt__p_vapor__Entity, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__EulerAngles[] = {  {&_swigt__p_vapor__EulerAngles, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Frustum[] = {  {&_swigt__p_vapor__Frustum, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Geometry[] = {  {&_swigt__p_vapor__Geometry, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Group[] = {  {&_swigt__p_vapor__Group, 0, 0, 0},  {&_swigt__p_vapor__Scene, _p_vapor__SceneTo_p_vapor__Group, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__InputEvent[] = {  {&_swigt__p_vapor__MouseEvent, _p_vapor__MouseEventTo_p_vapor__InputEvent, 0, 0},  {&_swigt__p_vapor__MouseWheelEvent, _p_vapor__MouseWheelEventTo_p_vapor__InputEvent, 0, 0},  {&_swigt__p_vapor__MouseMoveEvent, _p_vapor__MouseMoveEventTo_p_vapor__InputEvent, 0, 0},  {&_swigt__p_vapor__InputEvent, 0, 0, 0},  {&_swigt__p_vapor__MouseDragEvent, _p_vapor__MouseDragEventTo_p_vapor__InputEvent, 0, 0},  {&_swigt__p_vapor__MouseButtonEvent, _p_vapor__MouseButtonEventTo_p_vapor__InputEvent, 0, 0},  {&_swigt__p_vapor__KeyEvent, _p_vapor__KeyEventTo_p_vapor__InputEvent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__KeyEvent[] = {  {&_swigt__p_vapor__KeyEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__KeyboardEventType[] = {  {&_swigt__p_vapor__KeyboardEventType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Keys[] = {  {&_swigt__p_vapor__Keys, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Light[] = {  {&_swigt__p_vapor__Light, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__LightType[] = {  {&_swigt__p_vapor__LightType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Matrix4x3[] = {  {&_swigt__p_vapor__Matrix4x3, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Mesh[] = {  {&_swigt__p_vapor__Mesh, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MeshGroup[] = {  {&_swigt__p_vapor__MeshGroup, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MeshMaterial[] = {  {&_swigt__p_vapor__MeshMaterial, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Model[] = {  {&_swigt__p_vapor__Model, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseButton[] = {  {&_swigt__p_vapor__MouseButton, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseButtonEvent[] = {  {&_swigt__p_vapor__MouseButtonEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseDragEvent[] = {  {&_swigt__p_vapor__MouseDragEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseEvent[] = {  {&_swigt__p_vapor__MouseEvent, 0, 0, 0},  {&_swigt__p_vapor__MouseWheelEvent, _p_vapor__MouseWheelEventTo_p_vapor__MouseEvent, 0, 0},  {&_swigt__p_vapor__MouseMoveEvent, _p_vapor__MouseMoveEventTo_p_vapor__MouseEvent, 0, 0},  {&_swigt__p_vapor__MouseDragEvent, _p_vapor__MouseDragEventTo_p_vapor__MouseEvent, 0, 0},  {&_swigt__p_vapor__MouseButtonEvent, _p_vapor__MouseButtonEventTo_p_vapor__MouseEvent, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseEventType[] = {  {&_swigt__p_vapor__MouseEventType, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseInfo[] = {  {&_swigt__p_vapor__MouseInfo, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseMoveEvent[] = {  {&_swigt__p_vapor__MouseMoveEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__MouseWheelEvent[] = {  {&_swigt__p_vapor__MouseWheelEvent, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Quaternion[] = {  {&_swigt__p_vapor__Quaternion, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Ray[] = {  {&_swigt__p_vapor__Ray, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RayQueryResult[] = {  {&_swigt__p_vapor__RayQueryResult, 0, 0, 0},  {&_swigt__p_vapor__RayTriangleQueryResult, _p_vapor__RayTriangleQueryResultTo_p_vapor__RayQueryResult, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RayTriangleQueryResult[] = {  {&_swigt__p_vapor__RayTriangleQueryResult, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RefPtrT_vapor__Animation_t[] = {  {&_swigt__p_vapor__RefPtrT_vapor__Animation_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RefPtrT_vapor__Attachment_t[] = {  {&_swigt__p_vapor__RefPtrT_vapor__Attachment_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RefPtrT_vapor__Bone_t[] = {  {&_swigt__p_vapor__RefPtrT_vapor__Bone_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RefPtrT_vapor__Mesh_t[] = {  {&_swigt__p_vapor__RefPtrT_vapor__Mesh_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RefPtrT_vapor__Renderable_t[] = {  {&_swigt__p_vapor__RefPtrT_vapor__Renderable_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RefPtrT_vapor__Resource_t[] = {  {&_swigt__p_vapor__RefPtrT_vapor__Resource_t, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__ReferenceCounted[] = {  {&_swigt__p_vapor__ReferenceCounted, 0, 0, 0},  {&_swigt__p_vapor__Resource, _p_vapor__ResourceTo_p_vapor__ReferenceCounted, 0, 0},  {&_swigt__p_vapor__Mesh, _p_vapor__MeshTo_p_vapor__ReferenceCounted, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RenderBlock[] = {  {&_swigt__p_vapor__RenderBlock, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RenderQueue[] = {  {&_swigt__p_vapor__RenderQueue, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__RenderView[] = {  {&_swigt__p_vapor__RenderView, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Resource[] = {  {&_swigt__p_vapor__Resource, 0, 0, 0},  {&_swigt__p_vapor__Mesh, _p_vapor__MeshTo_p_vapor__Resource, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Scene[] = {  {&_swigt__p_vapor__Scene, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Transform[] = {  {&_swigt__p_vapor__Transform, 0, 0, 0},{0, 0, 0, 0}};
static swig_cast_info _swigc__p_vapor__Vector3[] = {  {&_swigt__p_vapor__Vector3, 0, 0, 0},{0, 0, 0, 0}};

static swig_cast_info *swig_cast_initial[] = {
  _swigc__p_Event0T_t,
  _swigc__p_Event1T_std__shared_ptrT_vapor__Component_t_const_R_t,
  _swigc__p_Event1T_std__shared_ptrT_vapor__Entity_t_const_R_t,
  _swigc__p_SkeletonPtr,
  _swigc__p_Type,
  _swigc__p_a_3__vapor__Vector3,
  _swigc__p_char,
  _swigc__p_float,
  _swigc__p_long,
  _swigc__p_short,
  _swigc__p_signed_char,
  _swigc__p_std__mapT_Class_const_p_std__shared_ptrT_vapor__Component_t_t,
  _swigc__p_std__pairT_Class_const_p_std__shared_ptrT_vapor__Component_t_t,
  _swigc__p_std__shared_ptrT_vapor__Camera_t,
  _swigc__p_std__shared_ptrT_vapor__CharacterController_t,
  _swigc__p_std__shared_ptrT_vapor__Component_t,
  _swigc__p_std__shared_ptrT_vapor__Controller_t,
  _swigc__p_std__shared_ptrT_vapor__Entity_t,
  _swigc__p_std__shared_ptrT_vapor__Geometry_t,
  _swigc__p_std__shared_ptrT_vapor__Group_t,
  _swigc__p_std__shared_ptrT_vapor__Light_t,
  _swigc__p_std__shared_ptrT_vapor__Model_t,
  _swigc__p_std__shared_ptrT_vapor__Scene_t,
  _swigc__p_std__shared_ptrT_vapor__Transform_t,
  _swigc__p_std__string,
  _swigc__p_std__vectorT_float_t,
  _swigc__p_std__vectorT_std__shared_ptrT_vapor__Entity_t_t,
  _swigc__p_std__vectorT_std__shared_ptrT_vapor__Geometry_t_t,
  _swigc__p_std__vectorT_unsigned_short_t,
  _swigc__p_std__vectorT_vapor__MeshGroup_t,
  _swigc__p_std__vectorT_vapor__RayQueryResult_t,
  _swigc__p_std__vectorT_vapor__RefPtrT_vapor__Animation_t_t,
  _swigc__p_std__vectorT_vapor__RefPtrT_vapor__Renderable_t_t,
  _swigc__p_std__vectorT_vapor__Vector3_t,
  _swigc__p_std__weak_ptrT_vapor__Camera_t,
  _swigc__p_std__weak_ptrT_vapor__CharacterController_t,
  _swigc__p_std__weak_ptrT_vapor__Component_t,
  _swigc__p_std__weak_ptrT_vapor__Entity_t,
  _swigc__p_std__weak_ptrT_vapor__Geometry_t,
  _swigc__p_std__weak_ptrT_vapor__Scene_t,
  _swigc__p_unsigned_char,
  _swigc__p_unsigned_long,
  _swigc__p_unsigned_short,
  _swigc__p_vapor__BoundingBox,
  _swigc__p_vapor__Camera,
  _swigc__p_vapor__CharacterController,
  _swigc__p_vapor__Color,
  _swigc__p_vapor__Component,
  _swigc__p_vapor__Controller,
  _swigc__p_vapor__Entity,
  _swigc__p_vapor__EulerAngles,
  _swigc__p_vapor__Frustum,
  _swigc__p_vapor__Geometry,
  _swigc__p_vapor__Group,
  _swigc__p_vapor__InputEvent,
  _swigc__p_vapor__KeyEvent,
  _swigc__p_vapor__KeyboardEventType,
  _swigc__p_vapor__Keys,
  _swigc__p_vapor__Light,
  _swigc__p_vapor__LightType,
  _swigc__p_vapor__Matrix4x3,
  _swigc__p_vapor__Mesh,
  _swigc__p_vapor__MeshGroup,
  _swigc__p_vapor__MeshMaterial,
  _swigc__p_vapor__Model,
  _swigc__p_vapor__MouseButton,
  _swigc__p_vapor__MouseButtonEvent,
  _swigc__p_vapor__MouseDragEvent,
  _swigc__p_vapor__MouseEvent,
  _swigc__p_vapor__MouseEventType,
  _swigc__p_vapor__MouseInfo,
  _swigc__p_vapor__MouseMoveEvent,
  _swigc__p_vapor__MouseWheelEvent,
  _swigc__p_vapor__Quaternion,
  _swigc__p_vapor__Ray,
  _swigc__p_vapor__RayQueryResult,
  _swigc__p_vapor__RayTriangleQueryResult,
  _swigc__p_vapor__RefPtrT_vapor__Animation_t,
  _swigc__p_vapor__RefPtrT_vapor__Attachment_t,
  _swigc__p_vapor__RefPtrT_vapor__Bone_t,
  _swigc__p_vapor__RefPtrT_vapor__Mesh_t,
  _swigc__p_vapor__RefPtrT_vapor__Renderable_t,
  _swigc__p_vapor__RefPtrT_vapor__Resource_t,
  _swigc__p_vapor__ReferenceCounted,
  _swigc__p_vapor__RenderBlock,
  _swigc__p_vapor__RenderQueue,
  _swigc__p_vapor__RenderView,
  _swigc__p_vapor__Resource,
  _swigc__p_vapor__Scene,
  _swigc__p_vapor__Transform,
  _swigc__p_vapor__Vector3,
};


/* -------- TYPE CONVERSION AND EQUIVALENCE RULES (END) -------- */

/* -----------------------------------------------------------------------------
 * Type initialization:
 * This problem is tough by the requirement that no dynamic 
 * memory is used. Also, since swig_type_info structures store pointers to 
 * swig_cast_info structures and swig_cast_info structures store pointers back
 * to swig_type_info structures, we need some lookup code at initialization. 
 * The idea is that swig generates all the structures that are needed. 
 * The runtime then collects these partially filled structures. 
 * The SWIG_InitializeModule function takes these initial arrays out of 
 * swig_module, and does all the lookup, filling in the swig_module.types
 * array with the correct data and linking the correct swig_cast_info
 * structures together.
 *
 * The generated swig_type_info structures are assigned staticly to an initial 
 * array. We just loop through that array, and handle each type individually.
 * First we lookup if this type has been already loaded, and if so, use the
 * loaded structure instead of the generated one. Then we have to fill in the
 * cast linked list. The cast data is initially stored in something like a
 * two-dimensional array. Each row corresponds to a type (there are the same
 * number of rows as there are in the swig_type_initial array). Each entry in
 * a column is one of the swig_cast_info structures for that type.
 * The cast_initial array is actually an array of arrays, because each row has
 * a variable number of columns. So to actually build the cast linked list,
 * we find the array of casts associated with the type, and loop through it 
 * adding the casts to the list. The one last trick we need to do is making
 * sure the type pointer in the swig_cast_info struct is correct.
 *
 * First off, we lookup the cast->type name to see if it is already loaded. 
 * There are three cases to handle:
 *  1) If the cast->type has already been loaded AND the type we are adding
 *     casting info to has not been loaded (it is in this module), THEN we
 *     replace the cast->type pointer with the type pointer that has already
 *     been loaded.
 *  2) If BOTH types (the one we are adding casting info to, and the 
 *     cast->type) are loaded, THEN the cast info has already been loaded by
 *     the previous module so we just ignore it.
 *  3) Finally, if cast->type has not already been loaded, then we add that
 *     swig_cast_info to the linked list (because the cast->type) pointer will
 *     be correct.
 * ----------------------------------------------------------------------------- */

#ifdef __cplusplus
extern "C" {
#if 0
} /* c-mode */
#endif
#endif

#if 0
#define SWIGRUNTIME_DEBUG
#endif


SWIGRUNTIME void
SWIG_InitializeModule(void *clientdata) {
  size_t i;
  swig_module_info *module_head, *iter;
  int found, init;

  clientdata = clientdata;

  /* check to see if the circular list has been setup, if not, set it up */
  if (swig_module.next==0) {
    /* Initialize the swig_module */
    swig_module.type_initial = swig_type_initial;
    swig_module.cast_initial = swig_cast_initial;
    swig_module.next = &swig_module;
    init = 1;
  } else {
    init = 0;
  }

  /* Try and load any already created modules */
  module_head = SWIG_GetModule(clientdata);
  if (!module_head) {
    /* This is the first module loaded for this interpreter */
    /* so set the swig module into the interpreter */
    SWIG_SetModule(clientdata, &swig_module);
    module_head = &swig_module;
  } else {
    /* the interpreter has loaded a SWIG module, but has it loaded this one? */
    found=0;
    iter=module_head;
    do {
      if (iter==&swig_module) {
        found=1;
        break;
      }
      iter=iter->next;
    } while (iter!= module_head);

    /* if the is found in the list, then all is done and we may leave */
    if (found) return;
    /* otherwise we must add out module into the list */
    swig_module.next = module_head->next;
    module_head->next = &swig_module;
  }

  /* When multiple interpeters are used, a module could have already been initialized in
     a different interpreter, but not yet have a pointer in this interpreter.
     In this case, we do not want to continue adding types... everything should be
     set up already */
  if (init == 0) return;

  /* Now work on filling in swig_module.types */
#ifdef SWIGRUNTIME_DEBUG
  printf("SWIG_InitializeModule: size %d\n", swig_module.size);
#endif
  for (i = 0; i < swig_module.size; ++i) {
    swig_type_info *type = 0;
    swig_type_info *ret;
    swig_cast_info *cast;
  
#ifdef SWIGRUNTIME_DEBUG
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
#endif

    /* if there is another module already loaded */
    if (swig_module.next != &swig_module) {
      type = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, swig_module.type_initial[i]->name);
    }
    if (type) {
      /* Overwrite clientdata field */
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found type %s\n", type->name);
#endif
      if (swig_module.type_initial[i]->clientdata) {
	type->clientdata = swig_module.type_initial[i]->clientdata;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: found and overwrite type %s \n", type->name);
#endif
      }
    } else {
      type = swig_module.type_initial[i];
    }

    /* Insert casting types */
    cast = swig_module.cast_initial[i];
    while (cast->type) {
    
      /* Don't need to add information already in the list */
      ret = 0;
#ifdef SWIGRUNTIME_DEBUG
      printf("SWIG_InitializeModule: look cast %s\n", cast->type->name);
#endif
      if (swig_module.next != &swig_module) {
        ret = SWIG_MangledTypeQueryModule(swig_module.next, &swig_module, cast->type->name);
#ifdef SWIGRUNTIME_DEBUG
	if (ret) printf("SWIG_InitializeModule: found cast %s\n", ret->name);
#endif
      }
      if (ret) {
	if (type == swig_module.type_initial[i]) {
#ifdef SWIGRUNTIME_DEBUG
	  printf("SWIG_InitializeModule: skip old type %s\n", ret->name);
#endif
	  cast->type = ret;
	  ret = 0;
	} else {
	  /* Check for casting already in the list */
	  swig_cast_info *ocast = SWIG_TypeCheck(ret->name, type);
#ifdef SWIGRUNTIME_DEBUG
	  if (ocast) printf("SWIG_InitializeModule: skip old cast %s\n", ret->name);
#endif
	  if (!ocast) ret = 0;
	}
      }

      if (!ret) {
#ifdef SWIGRUNTIME_DEBUG
	printf("SWIG_InitializeModule: adding cast %s\n", cast->type->name);
#endif
        if (type->cast) {
          type->cast->prev = cast;
          cast->next = type->cast;
        }
        type->cast = cast;
      }
      cast++;
    }
    /* Set entry in modules->types array equal to the type */
    swig_module.types[i] = type;
  }
  swig_module.types[i] = 0;

#ifdef SWIGRUNTIME_DEBUG
  printf("**** SWIG_InitializeModule: Cast List ******\n");
  for (i = 0; i < swig_module.size; ++i) {
    int j = 0;
    swig_cast_info *cast = swig_module.cast_initial[i];
    printf("SWIG_InitializeModule: type %d %s\n", i, swig_module.type_initial[i]->name);
    while (cast->type) {
      printf("SWIG_InitializeModule: cast type %s\n", cast->type->name);
      cast++;
      ++j;
    }
  printf("---- Total casts: %d\n",j);
  }
  printf("**** SWIG_InitializeModule: Cast List ******\n");
#endif
}

/* This function will propagate the clientdata field of type to
* any new swig_type_info structures that have been added into the list
* of equivalent types.  It is like calling
* SWIG_TypeClientData(type, clientdata) a second time.
*/
SWIGRUNTIME void
SWIG_PropagateClientData(void) {
  size_t i;
  swig_cast_info *equiv;
  static int init_run = 0;

  if (init_run) return;
  init_run = 1;

  for (i = 0; i < swig_module.size; i++) {
    if (swig_module.types[i]->clientdata) {
      equiv = swig_module.types[i]->cast;
      while (equiv) {
        if (!equiv->converter) {
          if (equiv->type && !equiv->type->clientdata)
            SWIG_TypeClientData(equiv->type, swig_module.types[i]->clientdata);
        }
        equiv = equiv->next;
      }
    }
  }
}

#ifdef __cplusplus
#if 0
{ /* c-mode */
#endif
}
#endif



/* Forward declaration of where the user's %init{} gets inserted */
void SWIG_init_user(lua_State* L );
    
#ifdef __cplusplus
extern "C" {
#endif
/* this is the initialization function
  added at the very end of the code
  the function is always called SWIG_init, but an eariler #define will rename it
*/
SWIGEXPORT int SWIG_init(lua_State* L)
{
  int i;
  /* start with global table */
  lua_pushvalue(L,LUA_GLOBALSINDEX);
  /* SWIG's internal initalisation */
  SWIG_InitializeModule((void*)L);
  SWIG_PropagateClientData();
  /* add a global fn */
  SWIG_Lua_add_function(L,"swig_type",SWIG_Lua_type);
  SWIG_Lua_add_function(L,"swig_equals",SWIG_Lua_equal);
  /* begin the module (its a table with the same name as the module) */
  SWIG_Lua_module_begin(L,SWIG_name);
  /* add commands/functions */
  for (i = 0; swig_commands[i].name; i++){
    SWIG_Lua_module_add_function(L,swig_commands[i].name,swig_commands[i].func);
  }
  /* add variables */
  for (i = 0; swig_variables[i].name; i++){
    SWIG_Lua_module_add_variable(L,swig_variables[i].name,swig_variables[i].get,swig_variables[i].set);
  }
  /* set up base class pointers (the hierachy) */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_init_base_class(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* additional registration structs & classes in lua */
  for (i = 0; swig_types[i]; i++){
    if (swig_types[i]->clientdata){
      SWIG_Lua_class_register(L,(swig_lua_class*)(swig_types[i]->clientdata));
    }
  }
  /* constants */
  SWIG_Lua_InstallConstants(L,swig_constants);
  /* invoke user-specific initialization */
  SWIG_init_user(L);
  /* end module */
  lua_pop(L,1);  /* tidy stack (remove module table)*/
  lua_pop(L,1);  /* tidy stack (remove global table)*/
  return 1;
}

#ifdef __cplusplus
}
#endif


const char* SWIG_LUACODE=
  "";

void SWIG_init_user(lua_State* L)
{
  /* exec Lua code if applicable */
  SWIG_Lua_dostring(L,SWIG_LUACODE);
}

