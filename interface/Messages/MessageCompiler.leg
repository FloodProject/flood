%{

#include "MessageCompiler.h"

//#define DEBUG

#ifdef DEBUG
	#define Log(T, ...) printf(T##"\n", ##__VA_ARGS__)
#else
	#define Log(T, ...)
#endif

#define YYSTYPE Block
#define YY_PARSE(T) static T

#include "Core/API.h"
#include "Core/Reflection.h"

%}

LINE	= BLOCK
		| COMMENT
		| EMPTY { Log("empty line"); }
		| SPACE
		;

COMMENT = '//' (!EOL .)* EOL	{ Log("line comment"); }
		| '/*' (!'*/' .)* '*/'	{ Log("block comment"); }
		;

BLOCK	= BLOCK_STRUCT	{ Log("struct decl"); }
		| BLOCK_ENUM	{ Log("enum decl"); }
		;

# enum Foo {
#  1: SIZE
#  2: NAME
# }

BLOCK_ENUM		= e:ENUM id:IDENTIFIER
				BLOCK_OPEN BLOCK_DECL_ENUM* BLOCK_CLOSE
				{
					Log("enum block");
				}
				;
				
BLOCK_DECL_ENUM	= DECL_ENUM BLOCK_DECL_ENUM { Log("enum decl block"); }
				| DECL_ENUM
				;
				
DECL_ENUM		= - n:NUMBER - COLON - i:IDENTIFIER
				;

# struct Foo : Bar {
#  1: int32 size
#  2: String name
# }

BLOCK_STRUCT	= s:STRUCT id:IDENTIFIER INHERITANCE?
				BLOCK_OPEN BLOCK_FIELD* BLOCK_CLOSE
				{
					Log("struct block");
					s.message.name.assign(id.name);
					messages.push_back(s.message);
				}
				;

BLOCK_FIELD		= FIELD BLOCK_FIELD { Log("field block"); }
				| f:FIELD { $$.message.fields.push_back(f.field); }
				;

FIELD 			= - n:NUMBER - COLON - t:TYPE - i:IDENTIFIER
				{
					Log("field");
					$$.field.id = n.fieldId;
					$$.field.name = strdup(i.name.c_str());
					$$.field.type = t.primitive; 
				} 
				;
				
TYPE			= t:TYPES
 				{
					Log("type '%s'", t.primitive->name)
				}
				;

TYPES 			= BOOL  | STRING | FLOAT
				| INT8  | UINT8  | INT16 | UINT16
				| INT32 | UINT32 | INT64 | UINT64
				;

IDENTIFIER		= < [a-zA-z_][a-zA-Z0-9_]* > { $$.name.assign(yytext); Log("id"); }
DIGIT 			= [0-9]
NUMBER			= DIGIT+ { Log("number"); }

KEYWORD			= IDENTIFIER

ASSIGN			= - '='
COLON			= - ':' { Log("colon"); }
BLOCK_OPEN		= - '{'
BLOCK_CLOSE		= - '}'
PAREN_OPEN		= - '('
PAREN_CLOSE		= - ')'
INHERITANCE		= COLON - id:IDENTIFIER -
				{
					Log("inheritance");
					$$.message.parent.assign(yytext);
				}

MESSAGE		= 'message' -- { Log("message") }
STRUCT		= 'struct'	-- { Log("struct") }
ENUM		= 'enum'	-- { Log("enum") }

BOOL		= 'bool'	- { $$.primitive = &Primitive::s_bool;   }
INT8		= 'int8'	- { $$.primitive = &Primitive::s_int8;   }
UINT8		= 'uint8'	- { $$.primitive = &Primitive::s_uint8;  }
INT16		= 'int16'	- { $$.primitive = &Primitive::s_int16;  }
UINT16		= 'uint16'	- { $$.primitive = &Primitive::s_uint16; }
INT32		= 'int32'	- { $$.primitive = &Primitive::s_int32;  }
UINT32		= 'uint32'	- { $$.primitive = &Primitive::s_uint32; }
INT64		= 'int64'	- { $$.primitive = &Primitive::s_int64;  }
UINT64		= 'uint64'	- { $$.primitive = &Primitive::s_uint64; }
FLOAT		= 'float'	- { $$.primitive = &Primitive::s_float;  }
#DOUBLE		= 'double'	- { $$.primitive = &Primitive::s_double; }
STRING		= 'String' 	- { $$.primitive = &Primitive::s_string; }

EOL			= '\n' | '\r\n' | '\r'
SPACE		= [ \t]
EMPTY		= SPACE* EOL

-			= (SPACE | EOL)*
--			= - #(&KEYWORD -)*

%%

int main()
{
	while (yyparse());
	
	for(auto it = messages.begin(); it != messages.end(); it++)
	{
		MessageBlock& message = *it;
		printf("Message: %s", message.name.c_str());
		if(message.parent.size() > 0)
			printf(" inherits %s\n", message.parent.c_str());
		else
			printf("\n");
	}	
	
	return 0;
}
