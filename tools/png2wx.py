#
#       png2wx - embed png in C++
#       written by Jan Engelhardt <jengelh [at] medozas de>, 2004 - 2007
#       http://jengelh.medozas.de/
#       released in the Public Domain
#
# Please use png2wx.pl over png2wx.py. Here's why:
#
# obj$ time ../src/png2wx.pl -C steelmill/images.cpp -H steelmill/images.hpp
#      -M mark ../src/steelmill/*.png
#
# real    0m0.457s
# user    0m0.410s
# sys     0m0.030s
#
# obj$ time ../src/png2wx.py -C steelmill/images2.cpp -H steelmill/images2.hpp
#      -M mark ../src/steelmill/*.png
#
# real    0m1.461s
# user    0m1.340s
# sys     0m0.050s
#
# This python version was solely written as an exercise for myself.
#

import getopt
import re
import os
import sys
import time

def to_octal(s):
        return "\\%03o" % int(ord(s.groups()[0]))

def encoded(file):
        fh   = open(file, "rb")
        data = "".join(fh.readlines())
        data = re.sub(r"\\", r"\\\\", data)
        data = re.sub(r"([^\x07-\x0d\x20-\x7e])", to_octal, data)
        data = re.sub(r"\x07", r"\\a", data)
        data = re.sub(r"\x08", r"\\b", data)
        data = re.sub(r"\x09", r"\\t", data)
        data = re.sub(r"\x0a", r"\\n", data)
        data = re.sub(r"\x0b", r"\\v", data)
        data = re.sub(r"\x0c", r"\\f", data)
        data = re.sub(r"\x0d", r"\\r", data)
        data = re.sub(r"\\\"", r"\\\\\"", data)
        data = re.sub(r"\?\?(?=[-\(\)<>=/'!])", r"?\\077", data)
        fh.close()
        return data

def parse_options():
        (opts, sys.argv) = getopt.gnu_getopt(sys.argv[1:], "C:H:M:")
        for i in opts:
                if (i[0] == "-C"): c = i[1]
                if (i[0] == "-H"): h = i[1]
                if (i[0] == "-M"): m = i[1]
        try:
                return (c, h, m)
        except:
                print "You need to specify -C, -H and -M options."
                sys.exit()
                
#------------------------------------------------------------------------------

(cpp_file, hpp_file, mark_tag) = parse_options()

#
# C++ header
#

hpp_fp = open(hpp_file, "w")
tmp    = hpp_file.upper()
tmp    = re.sub("[^A-Z0-9]", "_", tmp)
hpp_fp.write(
        "/* Autogenerated by png2wx.py on " + time.ctime(time.time()) + " */\n"
        "#ifndef " + mark_tag + "\n"
        "#define " + mark_tag + " 1\n"
        "\n"
        "#include <wx/wxprec.h>\n"
        "#ifndef WX_PRECOMP\n"
        "#      include <wx/wx.h>\n"
        "#endif\n"
        "\n"
        "extern void initialize_images(void);\n"
        "\n"
)

#
# C++/WX file
#

cpp_fp = open(cpp_file, "w")
cpp_fp.write(
        "/* Autogenerated by png2wx.py on " + time.ctime(time.time()) + " */\n"
        "#include <wx/wxprec.h>\n"
        "#ifndef WX_PRECOMP\n"
        "#      include <wx/wx.h>\n"
        "#endif\n"
        "#include <wx/mstream.h>\n"
        "#include \"" + hpp_file + "\"\n"
        "\n"
)

#
# Process files from the command line
#

main = ""
for file in sys.argv:
        base = re.sub(r"^.*/", "", file)
        base = re.sub(r"(.*)\.(?:jpg|png)", r"\1", base)
        base = re.sub(r"[^A-Za-z0-9]", "_", base)

        hpp_fp.write("extern wxBitmap *_img_" + base + ";\n")
        cpp_fp.write("wxBitmap *_img_" + base + ";\n")
        main += "       {\n"
        main += "               wxMemoryInputStream sm(\"" + encoded(file) + "\", "
        main += str(os.stat(file)[6]) + ");\n"
        main += "               _img_" + base + " = new wxBitmap(wxImage(sm));\n"
        main += "       }\n"
        
#
# Fixup C++ header
#

hpp_fp.write("\n" + "#endif /* " + mark_tag + " */\n")
hpp_fp.close()

cpp_fp.write(
        "\n"
        "void initialize_images(void)\n{\n" +
        main +
        "       return;\n"
        "}\n"
)

cpp_fp.close()