WIP (work-in-progress)
======================

http://www.nuclex.org/downloads/developers/kits/luabind-0-8-1-binaries-and-demo
	
EXAMPLES:
---------

Add a custom node to the scene graph            
Add a custom resource type

SERVER:
-------

EDITOR:
-------

Make the update logic smarter (no 50% CPU hog)
See about integrating wxLua in the editor
Hook up the renaming of Scene node labels
Override the print method of Lua
Console clicks should not change the insertion point
A readline type of library would be kind of nice
 
DONE:

And add some highlighting to it, it's boring now. (DONE)
Add resource events in the ResourceManager (DONE)	
Change scripting background to black (DONE)
Make the scripting evaluate line-a-line (DONE)
Add scene events in the Scene node (DONE)

http://www.ogre3d.org/wiki/index.php/Raycasting_to_the_polygon_level
http://code.google.com/p/minimal-ogre-collision-toolkit/source/browse/trunk/moc.v1.0.rc1.beta.2008.10.20.src/CollisionTools.cpp
http://wxlua.sourceforge.net/
http://news.gmane.org/gmane.comp.lib.wxwidgets.wxlua.user
	

Near TODO:
----------

Add hierarchical frustum culling
Fix Bounding Boxes hierarchy
Fix the logging file and crashing behaviour
Skybox component
Console GUI widget
Per-script Lua state
Fix Overlays positioning
Fix Lua state closing
Fix the Camera behaviour

ENGINE:
------

http://dmalloc.com/releases/
http://cmldev.net/
http://www.introgamedev.com/general_memory.html
http://xania.org/200512/crt-heap-fragmentation-in-windows
http://blog.pavlov.net/2007/11/11/windows-low-fragmentation-heap/
http://msdn.microsoft.com/en-us/library/aa366750%28VS.85%29.aspx
http://www.gamasutra.com/view/feature/2971/play_by_play_effective_memory_.php
http://www.fastformat.org/

Fix Camera direction vectors
Change ExampleFramework to use delegates
update method in RenderDevice
Bounding Boxes and Frustum Culling
Overlays can be 3D too...
Add Blending defaults (Modulate, Replace, etc)
Think about overlays positioning (absolute and relative)

Audio:

	Handle audio streaming for lightweight playback without consuming lots of memory
	Debug a crash in triton's desktop with an Audigy 4 (XP BSOD in Creative's driver 'ctaud2k.sys')
	
Logger:

	The Logger should display the date and time of creation (really needed?)
	Fix format log time to handle minutes, hours and days
	Use truncation and close file so each log entry gets commited in each write
	Make proper type-safe logger that doesn't crash with an invalid format string
	The Log class should use the user writing directory for output
	GetLoggers for each class (could be integrated with Profiler? :)
	AllocConsole for debugging porpuses on a key press
	Log all the engine calls (WIP)
	bind/functor for logging
	Hierarchical log system
	Logging functions with type-safe variable arguments (need variadiac templates?)
	Logging boxes for system/CPU/GPU information

Resource Management:

	Background Resource Loading?
	Switch all the resource loaders to use the VFS layer
	Ogg Loader is buggy (make it load from a memory buffer)
	Make a Localization class, potentially integrating .po files
	Check how the resource manager will handle missing resources
	Switch to intrusive_ptr for all reference-counting classes
	Create a ResourceFile class (maybe stream-based - C++ streams? )
	Magic header resource type detection
	Case-insensitive comparisons in map
	
Scene:

	Variadiac functions for some methods - i.e., group.add(ls, snd, cam, etc)
	Fix Camera key logic (need to cache it and test it in update time)

Input:
	
	Resize the Keyboard KeyState to the proper size. The current 1024 is hackish.

Window:

	Full-screen windowed mode/minimizing doesn't seem to work...
	Make the Engine class take Window creation settings
	The Window title should be set on Window creation
	Move the window polling to a different thread (smooth resizing)
	Hide the window until requested.
	http://msdn.microsoft.com/en-us/library/ms648383%28VS.85%29.aspx
	
	
Platform:

	bundle openal dll / openal soft
	http://www.codeproject.com/KB/cpp/PrivateAssemblyProjects.aspx
	Move from #pragma error instructions to static_assert
	Make an abstract Timer class
	Task manager with callbacks (for e.g. streaming) 
	Cross-platform Clipboard access
	
Rendering:

	ProgramManager for handling programs and shaders.
	Font handling via FreeType 2
	Signed distance fonts
	Bitmap font file format (and converter for some freeware generator tool)

VFS:

	Patch PhysFS to use the proper user dir for App Data on Windows
	FileWatcher for resource change notification integrated with VFS

Engine:

	Re-check the order of initialization of the engine subsystems 

Math:

	Add matrix and AABB class
	Use column-major instead of row-major matrices
	
	
DONE:
-----

Add Resources pane with all the resource groups
Check the need for defining copy-constructors in all classes (boost::noncopyable for now)
Window size changed notifications for Camera/Viewport aspect ration calculations
TextureManager
Vertex and index buffers
Update all the headers to have separators between different sections
Add timing code for FPS calculation and timing events.
Add Action Map class for storing input settings for the game.
Use copy-constructors or boost::non_copyable
Switch to precompiled headers (BIG GAIN!!)
Add Window events for resizing, closing, etc.
Add defines for the different compilers and switch #ifdef pragmas to those...
Simple VFS (with PhysFS 2.0)
Clean up the using std decls
Make the engine memory-leak proof
Make the memory leak detector work
Header in the log output
CSS-styling to the logging output
Implement Settings class
Clean up Window abstract class
Add Milkshape model parser
Add namespaces to subsystems
Clean Visual Studio solutions
Organize the include directories
Adapter class