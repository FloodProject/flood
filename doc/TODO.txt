WIP (work-in-progress)
======================

Near TODO:
----------

Optimize ray-triangle queries

Average terrain normals
	Have to take neighbours into account
Skybox component
View frustum culling
Add Z-bias to the AABB renderables
Fix Overlays positioning (might be related to ortographic projection)
Fix Lua state closing
Console GUI widget
Typesafe logging (FastFormat API)
Switch Skydome geometry to triangle strips

	if( !program )
		warn( "Invalid program in material '%s'", getName().c_str() );

EDITOR:
-------

Console - Write a line then go backwards and to the line again and color is white...
Add subsystem update infrastructure in engine

Ignore Entities (Layers?)
Private editor nodes (hide in the scene tree)

Camera options
	Add a small frame below the viewport with camera options (WIP)
Textures LOD

Terrain editing

	Ray-casting to the polygon level (DONE)
	Fix Picking (DONE)
	
	Brushes interface (wxWidgets)
	Intensity sliders
	Use a separate VB attribute for the terrain heights
	Center the terrain origin
			
Implement camera panning
Edit grid settings
Add a property system like Firefox/µTorrent...
Continuous movement bug (press D inside the world then click in the scene tree to trigger)
Make the update logic smarter (no 50% CPU hog)
See about integrating wxLua in the editor
Hook up the renaming of Scene node labels
Override the print method of Lua
Console clicks should not change the insertion point
A readline type of library would be kind of nice

ENGINE:
------

Quadtree Terrain
Per-script Lua state

Textures:
	Support DDS
	Warn and downsample if texture size is not supported
	Resize the sample to nearest-POT if rectangle textures not supported
	Generate and support MIP-maps
	Generate and support normal maps
	Combine and support cubemaps / skybox textures
	Check squish and NVIDIA Texture Tools libraries

Geometry component is shared per node, and that causes some problems.

WTF?! Static const string references (Component types)?

Fix Camera limiting logic (screws Camera when X-axis reaches 90 degrees)
Change ExampleFramework to use delegates
update method in RenderDevice
Overlays can be 3D too...
Add Blending defaults (Modulate, Replace, etc)
Think about overlays positioning (absolute and relative)

Timer:
	Multithreaded timing and timing leaps (check SFML tracker / OGRE code for more info.)

Audio:

	Handle audio streaming for lightweight playback without consuming lots of memory
	Debug a crash in triton's desktop with an Audigy 4 (XP BSOD in Creative's driver 'ctaud2k.sys')
	Bundle OpenAL Soft
	
Logger:

	The Logger should display the date and time of creation (really needed?)
	Fix format log time to handle minutes, hours and days
	Use truncation and close file so each log entry gets commited in each write
	Make proper type-safe logger that doesn't crash with an invalid format string
	The Log class should use the user writing directory for output
	GetLoggers for each class (could be integrated with Profiler? :)
	AllocConsole for debugging porpuses on a key press
	Log all the engine calls (WIP)
	bind/functor for logging
	Hierarchical log system
	Logging functions with type-safe variable arguments (need variadiac templates?)
	Logging boxes for system/CPU/GPU information

Resource Management:

	Background Resource Loading?
	Make a Localization class, potentially integrating .po files
	Check how the resource manager will handle missing resources
	Create a ResourceFile class (maybe stream-based - C++ streams? )
	Magic header resource type detection
	Case-insensitive comparisons in map
	
Scene:

	Variadiac functions for some methods - i.e., group.add(ls, snd, cam, etc)
	Fix Camera key logic (need to cache it and test it in update time)

Input:
	
	Resize the Keyboard KeyState to the proper size. The current 1024 is hackish.

Window:

	Full-screen windowed mode/minimizing doesn't seem to work...
	Make the Engine class take Window creation settings
	The Window title should be set on Window creation
	Move the window polling to a different thread (smooth resizing / maybe SFML itself will do this in 2.0)
	Hide the window until show is requested.
	http://msdn.microsoft.com/en-us/library/ms648383%28VS.85%29.aspx
	
	
Platform:

	We need a crash handler!!! :)
	http://www.codeproject.com/KB/cpp/PrivateAssemblyProjects.aspx
	Move from #pragma error instructions to static_assert
	Task manager with callbacks (for e.g. streaming) 
	Cross-platform Clipboard access
	
Rendering:


	Font handling via FreeType 2
	Signed distance fonts
	Bitmap font file format (and converter for some freeware generator tool)

VFS:

	Patch PhysFS to use the proper user dir for App Data on Windows

Math:

	Use column-major instead of row-major matrices (Why?)
	
	
DONE:
-----

ProgramManager for handling programs and shaders.
Fix the Camera behaviour
Bounding Boxes
Switch all the resource loaders to use the VFS layer
Check for maximum texture unit size
Watcher for resource change notification integrated with VFS
Switch to intrusive_ptr for all reference-counting classes
Fix the Window's Focus events. Also the mouse cursor is released when focus is lost.
Make an abstract Timer class
Add matrix and AABB class
Ogg Loader is buggy (make it load from a memory buffer)
Add Resources pane with all the resource groups
Check the need for defining copy-constructors in all classes (boost::noncopyable for now)
Window size changed notifications for Camera/Viewport aspect ration calculations
TextureManager
Vertex and index buffers
Update all the headers to have separators between different sections
Add timing code for FPS calculation and timing events.
Add Action Map class for storing input settings for the game.
Use copy-constructors or boost::non_copyable
Switch to precompiled headers (BIG GAIN!!)
Add Window events for resizing, closing, etc.
Add defines for the different compilers and switch #ifdef pragmas to those...
Simple VFS (with PhysFS 2.0)
Clean up the using std decls
Make the engine memory-leak proof
Make the memory leak detector work
Header in the log output
CSS-styling to the logging output
Implement Settings class
Clean up Window abstract class
Add Milkshape model parser
Add namespaces to subsystems
Clean Visual Studio solutions
Organize the include directories
Adapter class

http://www.nuclex.org/downloads/developers/kits/luabind-0-8-1-binaries-and-demo
http://oldhome.schmorp.de/marc/liblzf.html
http://wxlua.sourceforge.net/
http://news.gmane.org/gmane.comp.lib.wxwidgets.wxlua.user
http://www.ogre3d.org/wiki/index.php/Raycasting_to_the_polygon_level
http://code.google.com/p/minimal-ogre-collision-toolkit/source/browse/trunk/moc.v1.0.rc1.beta.2008.10.20.src/CollisionTools.cpp
http://dmalloc.com/releases/
http://cmldev.net/
http://www.introgamedev.com/general_memory.html
http://xania.org/200512/crt-heap-fragmentation-in-windows
http://blog.pavlov.net/2007/11/11/windows-low-fragmentation-heap/
http://msdn.microsoft.com/en-us/library/aa366750%28VS.85%29.aspx
http://www.gamasutra.com/view/feature/2971/play_by_play_effective_memory_.php
http://www.fastformat.org/

SNIPPETS
========

	//// Perform ray casting to find the nodes.
	//RayBoxQueryList list;
	//scene->doRayBoxQuery( pickRay, list );

	//NodePtr node; TerrainPtr terrain;
	//foreach( const RayBoxQueryResult& res, list )
	//{
	//	node = res.node;

	//	// Search for nodes with terrains...
	//	terrain = node->getComponent<Terrain>("Terrain");
	//
	//	if( terrain ) break;
	//}