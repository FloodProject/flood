WIP (work-in-progress)
======================

Market Analysis
	
	Ver as features dos outros engines e tentar encontrar
	problemas nelas para termos justificação para reinventarmos a roda.
	
	OGRE
	
		- bastante abstracto
		- muito complexo
		- demasiado versátil
		
	Unreal Engine
	
		- TOO FUCKIN EXPEN$IVE (milhões)
		
	Irrlicht
	
		- demasiado simplista
		- pouco extensivel
		- não tem foco principal nos shaders
		
	vapor

		+ Motor de jogo especializado vs. motor de render genérico
		+ Integração directa com várias APIs de rede, AI, audio
		+ Grátis, simples e open-sauce. Qualquer um pode contribuir e usar
		+ Extensivel para jogos multiplayer com o servidor integrável
		+ Sistema de edição (editor) integrado com suporte às capacidades do motor.
		+ Sistema de serialização unificado com o motor, para facilidade de criação de ferramentas.
		+ Integração directa com aimbot e megabot, e cagabot e iotabot

Requirements List
	
	
	
	
EXAMPLES:
---------

Add a custom node to the scene graph
Add a custom resource type

SERVER:
-------



ENGINE:
-----

http://cmldev.net/
http://www.introgamedev.com/general_memory.html
http://xania.org/200512/crt-heap-fragmentation-in-windows
http://blog.pavlov.net/2007/11/11/windows-low-fragmentation-heap/
http://msdn.microsoft.com/en-us/library/aa366750%28VS.85%29.aspx
http://www.gamasutra.com/view/feature/2971/play_by_play_effective_memory_.php
http://www.fastformat.org/

Audio:

	Handle audio streaming for lightweight playback without consuming lots of memory
	Debug a crash in triton's desktop with an Audigy 4 (XP BSOD in Creative's driver 'ctaud2k.sys')
	
Logger:

	The Logger should display the date and time of creation (really needed?)
	Fix format log time to handle minutes, hours and days
	Use truncation and close file so each log entry gets commited in each write
	Make proper type-safe logger that doesn't crash with an invalid format string
	The Log class should use the user writing directory for output
	GetLoggers for each class (could be integrated with Profiler? :)
	AllocConsole for debugging porpuses on a key press
	Log all the engine calls (WIP)
	bind/functor for logging
	Hierarchical log system
	Logging functions with type-safe variable arguments
	Logging boxes for system/CPU/GPU information

Resource Management:

	Background Resource Loading?
	Switch all the resource loaders to use the VFS layer
	Ogg Loader is buggy (make it load from a memory buffer)
	Make a Localization class, potentially integrating .po files
	Check how the resource manager will handle missing resources
	Switch to intrusive_ptr for all reference-counting classes
	Create a ResourceFile class (maybe stream-based - C++ streams? )
	Magic header resource type detection
	Case-insensitive comparisons in map
	
Scene:

	Variadiac functions for some methods - i.e., group.add(ls, snd, cam, etc)
	Fix Camera key logic (need to cache it and test it in update time)

Input:
	
	Resize the Keyboard KeyState to the proper size. The current 1024 is hackish.

Window:

	Full-screen windowed mode/minimizing doesn't seem to work...
	Make the Engine class take Window creation settings
	The Window title should be set on Window creation
	Move the window polling to a different thread (smooth resizing)
	Hide the window until requested.
	http://msdn.microsoft.com/en-us/library/ms648383%28VS.85%29.aspx
	
	
Platform:

	bundle openal dll / openal soft
	http://www.codeproject.com/KB/cpp/PrivateAssemblyProjects.aspx
	Move from #pragma error instructions to static_assert
	Make an abstract Timer class
	Task manager with callbacks (for e.g. streaming) 
	Cross-platform Clipboard access
	
Rendering:

	ProgramManager for handling programs and shaders.
	Font handling via FreeType 2
	Signed distance fonts
	Bitmap font file format (and converter for some freeware generator tool)

VFS:

	Patch PhysFS to use the proper user dir for App Data on Windows
	FileWatcher for resource change notification integrated with VFS

Engine:

	Re-check the order of initialization of the engine subsystems 

Math:

	Add matrix and AABB class
	
vaporEditor:

	Add Resources pane with all the resource groups
	
DONE:
-----

Check the need for defining copy-constructors in all classes (boost::noncopyable for now)
Window size changed notifications for Camera/Viewport aspect ration calculations
TextureManager
Vertex and index buffers
Update all the headers to have separators between different sections
Add timing code for FPS calculation and timing events.
Add Action Map class for storing input settings for the game.
Use copy-constructors or boost::non_copyable
Switch to precompiled headers (BIG GAIN!!)
Add Window events for resizing, closing, etc.
Add defines for the different compilers and switch #ifdef pragmas to those...
Simple VFS (with PhysFS 2.0)
Clean up the using std decls
Make the engine memory-leak proof
Make the memory leak detector work
Header in the log output
CSS-styling to the logging output
Implement Settings class
Clean up Window abstract class
Add Milkshape model parser
Add namespaces to subsystems
Clean Visual Studio solutions
Organize the include directories
Adapter class