WIP (work-in-progress)
======================

Milestone 1:
------------

	Render Triangle using Device interface
	
EXAMPLES:
---------

Add a custom node to the scene graph
Add a custom resource type

TODO:
-----

Debug a crash in triton's desktop with an Audigy 4 (XP BSOD in Creative's driver 'ctaud2k.sys')
Move the rendering to a different thread than the main loop code (smooth resizing)
Check the need for copy-constructors
The Log class should use the user writing directory for output
Check the need for defining copy-constructors in all classes
Window size changed notifications for Camera/Viewport aspect ration calculations
Make a Localization class, potentially integrating .po files in the resource manager
The Logger should display the date and time, and not time from launch (or at least show the date it was created)
Make the Engine class take Window creation settings
The Window title should be set on Window creation, so it gets set properly on the first appearance
Make proper type-safe logger that doesn't crash with an invalid format string
Patch PhysFS to use the proper user dir for App Data on Windows
Check how the resource manager will handle missing resources
Make a Timing/Ticking class and maybe a task manager with callbacks (for e.g. streaming)
Check if/how type traits can be useful in engine
Bitmap font file format (and converter for some freeware generator tool)
Are std::string references faster/lighter than normal strings?
Re-check the order of initialization of the engine subsystems (ideally filesystem errors should occur _before_ rendering init)
Clipboard?

Renderer:

	Vertex and index buffers

Resource management:

	Magic header resource type detection
	Case-insensitive comparisons in map
	Font handling via FreeType 2
	
Scene management:

	Code to the API specified in Etherpad

Math:

	Add matrix and AABB class
	
Platform:
	
	Implement abstract timer class
	Color copy cons and operators
	Log all the engine calls
	bind/functor for logging
	Hierarchical log system
	Logging functions with type-safe variable arguments
	Logging boxes for system/CPU/GPU information

vaporEditor:

	Add Resources pane with all the resource groups
	
DONE:
-----

Simple VFS (with PhysFS 2.0)
Clean up the using std decls
Make the engine memory-leak proof
Make the memory leak detector work
Header in the log output
CSS-styling to the logging output
Implement Settings class
Clean up Window abstract class
Add Milkshape model parser
Add namespaces to subsystems
Clean Visual Studio solutions
Organize the include directories
Adapter class